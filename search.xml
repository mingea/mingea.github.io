<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>springboot学习</title>
      <link href="/2025/03/03/springboot%E5%AD%A6%E4%B9%A0/"/>
      <url>/2025/03/03/springboot%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>1 springboot基本介绍</p><h2 id="1-1-SpringBoot是什么"><a href="#1-1-SpringBoot是什么" class="headerlink" title="1.1 SpringBoot是什么"></a>1.1 SpringBoot是什么</h2><p><strong>两句话：</strong></p><ul><li>​<strong>Spring Boot 可以轻松创建独立的、生产级的基于Spring 的应用程序</strong></li><li>​    <strong>Spring Boot 直接嵌入 Tomcat、Jetty 或 Undertow ，可以”直接运行” SpringBoot 应用程序</strong></li></ul><h2 id="1-2-SpringBoot快速入门"><a href="#1-2-SpringBoot快速入门" class="headerlink" title="1.2 SpringBoot快速入门"></a>1.2 SpringBoot快速入门</h2><p>构建一个 SpringBoot 项目，浏览器发送&#x2F;hello 请求 <code>http://localhost:8080/hello</code>，响应Hello:</p><p>这里目前学的的版本是SpringBoot2.7，maven3.6.3，jdk8</p><img src="1.jpg" style="zoom:50%;"><img src="2.jpg" style="zoom: 50%;"><p>创建好之后在pom文件中引入SpringBoot相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wzb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入springboot父工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入web项目场景启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在com.wzb.springboot包中创建启动类Main,需要注解<code>@SpringBootApplication</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动SpringBoot项目</span></span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后创建controller包，创建包下HelloController类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目后，默认端口是8080，访问<code>http://localhost:8080/hello</code>，可以发现 <code>hello</code> 字符串输出在了浏览器页面。</p><h3 id="1-2-1-小结"><a href="#1-2-1-小结" class="headerlink" title="1.2.1 小结"></a>1.2.1 小结</h3><ol><li>SpringBoot 比较传统的 SSM 开发， 简化整合步骤, 提高开发效率</li><li>简化了 Maven 项目的 pom.xml 依赖导入, 可以说是一键导入，如图</li></ol><img src="3.jpg" style="zoom: 33%;"><p>​3.内置 Tomcat , 简化服务器的配置</p><h2 id="1-3-SpringBoot与SpringMVC关系"><a href="#1-3-SpringBoot与SpringMVC关系" class="headerlink" title="1.3 SpringBoot与SpringMVC关系"></a>1.3 SpringBoot与SpringMVC关系</h2><h3 id="1-3-1-梳理关系"><a href="#1-3-1-梳理关系" class="headerlink" title="1.3.1 梳理关系"></a>1.3.1 梳理关系</h3><ul><li>他们的关系大概是: Spring Boot &gt; Spring &gt; Spring MVC</li><li>Spring MVC 只是 Spring 处理 WEB 层请求的一个模块&#x2F;组件, Spring MVC 的基石是Servlet</li><li>Spring 的核心是 IOC 和 AOP, IOC 提供了依赖注入的容器, AOP 解决了面向切面编程</li><li>Spring Boot 是为了简化开发, 推出的封神框架(约定优于配置[COC]，简化了Spring项目的配置流程), SpringBoot 包含很多组件&#x2F;框架，Spring就是最核心的内容之一，也包含SpringMVC</li><li>Spring 家族，有众多衍生框架和组件例如 boot、security、jpa 等, 他们的基础都是Spring</li></ul><h3 id="1-3-2-如何理解-约定优于配置"><a href="#1-3-2-如何理解-约定优于配置" class="headerlink" title="1.3.2 如何理解 -约定优于配置"></a>1.3.2 如何理解 -约定优于配置</h3><ol><li>约定优于配置(Convention over Configuration&#x2F;COC)，又称按约定编程，是一种软件设计规范, 本质上是对系统、类库或框架中一些东西假定一个大众化合理的默认值(缺省值)</li><li>例如在模型中存在一个名为 User 的类，那么对应到数据库会存在一个名为user 的表，只有在偏离这个约定时才需要做相关的配置 (例如你想将表名命名为t_user 等非user 时才需要写关于这个名字的配置)</li><li>简单来说就是假如你所期待的配置与约定的配置一致，那么就可以不做任何配置，约定不符合期待时, 才需要对约定进行替换配置</li><li>约定其实就是一种规范，遵循了规范，那么就存在通用性，存在通用性，那么事情就会变得相对简单，程序员之间的沟通成本会降低，工作效率会提升，合作也会变得更加简单</li></ol><h1 id="2-依赖管理和自动配置"><a href="#2-依赖管理和自动配置" class="headerlink" title="2 依赖管理和自动配置"></a>2 依赖管理和自动配置</h1><h2 id="2-1-依赖管理"><a href="#2-1-依赖管理" class="headerlink" title="2.1 依赖管理"></a>2.1 依赖管理</h2><h3 id="2-1-1-什么是依赖管理"><a href="#2-1-1-什么是依赖管理" class="headerlink" title="2.1.1 什么是依赖管理"></a>2.1.1 什么是依赖管理</h3><p>spring-boot-starter-parent 还有父项目, 声明了开发中常用的依赖的版本号，并且进行 自动版本仲裁 , 即如果程序员没有指定某个依赖jar 的版本，则以父项目指定的版本为准</p><p><img src="4.jpg"></p><img src="5.jpg" style="zoom:50%;"><h3 id="2-1-2-修改自动仲裁-默认版本号"><a href="#2-1-2-修改自动仲裁-默认版本号" class="headerlink" title="2.1.2 修改自动仲裁&#x2F;默认版本号"></a>2.1.2 修改自动仲裁&#x2F;默认版本号</h3><p>需求说明: 将 SpringBoot mysql 驱动修改成 5.1.49</p><p><img src="6.jpg"></p><p>查看 spring-boot-dependencies.pom 里面规定当前依赖的版本对应的key , 这里是mysql.version</p><p><img src="7.jpg"></p><p>修改 springboot2\quickstart\pom.xml 重写配置, 当更新Maven 时，就依赖到新的mysql 驱动.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入 web 项目场景启动器,会自动导入和 web 开发相关依赖,非常方便--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据依赖就近优先原则，以自己指定的为准 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-starter-场景启动器"><a href="#2-2-starter-场景启动器" class="headerlink" title="2.2 starter 场景启动器"></a>2.2 starter 场景启动器</h2><h3 id="2-2-1-starter场景启动器基本介绍"><a href="#2-2-1-starter场景启动器基本介绍" class="headerlink" title="2.2.1 starter场景启动器基本介绍"></a>2.2.1 starter<strong>场景启动器基本介绍</strong></h3><p>1.<strong>开发中我们引入了相关场景的</strong>starter**，这个场景中所有的相关依赖都引入进来了，比如我们做<strong>web</strong>开发引入了，该<strong>starter</strong>将导入与<strong>web</strong>开发相关的所有包**</p><p>2.<strong>依赖树:可以看到spring-boot-starter-web，帮我们引入了spring-webmvc，spring-web开发模块，还引入了spring-boot-starter-tomcat场景，spring-boot-starter-json场景，这些场景下面又引入了一大堆相关的包，这些依赖项可以快速启动和运行一个项目，提高开发效率.</strong></p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C8.jpg"></p><p><strong>3.所有场景启动器最基本的依赖就是spring-boot-starter</strong></p><h3 id="2-2-2-官方提供的starter"><a href="#2-2-2-官方提供的starter" class="headerlink" title="2.2.2 官方提供的starter"></a>2.2.2 <strong>官方提供的</strong>starter</h3><p>1.<strong>在开发中我们经常会用到</strong>spring-boot-starter-xxx**，比如<strong>spring-boot-starter-web</strong>，该场景是用作<strong>web</strong>开发，也就是说<strong>xxx</strong>是某种开发场景。**</p><p>2.我们只要引入starter，这个场景的所有常规需要的依赖我们都自动引入。</p><h3 id="2-2-3-第三方starter"><a href="#2-2-3-第三方starter" class="headerlink" title="2.2.3 第三方starter"></a>2.2.3 <strong>第三方</strong>starter</h3><p>1.SpringBoot<strong>也支持第三方</strong>starter</p><p>2.第三方starter不要从spring-boot开始，因为这是官方spring-boot保留的命名方式的。第三方启动程序通常以项目名称开头。例如，名为thirdpartyproject的第三方启动程序项目通常被命名为thirdpartyproject-spring-boot-starter。</p><p>3.也就是说：xxx-spring-boot-starter是第三方为我们提供的简化开发的场景启动器</p><h2 id="2-3-自动配置"><a href="#2-3-自动配置" class="headerlink" title="2.3 自动配置"></a><strong>2.3</strong> 自动配置</h2><h3 id="2-3-1-自动配置功能"><a href="#2-3-1-自动配置功能" class="headerlink" title="2.3.1 自动配置功能"></a>2.3.1 自动配置功能</h3><p>1.SpringBoot<strong>自动配置</strong>Tomcat、SpringMVC、Web常用功能:比如字符过滤器等等</p><p>2.默认主程序所在的包及其子包下会被扫描</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C9.jpg"></p><h3 id="2-3-2-如何修改默认扫描包结构"><a href="#2-3-2-如何修改默认扫描包结构" class="headerlink" title="2.3.2 如何修改默认扫描包结构"></a>2.3.2 <strong>如何修改默认扫描包结构</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span>.com.wzb;</span><br><span class="line">importorg.springframework.stereotype.Controller; </span><br><span class="line">importorg.springframework.web.bind.annotation.RequestMapping; importorg.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span> wzb</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiController</span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hi&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">&quot;hi~,spring boot&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改MainApp.java,增加扫描的包,并完成测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接在SpringBootApplication注解后指定</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages=&quot;com.wzb&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span>&#123;<span class="comment">//.....</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-3-resources-application-properties-配置"><a href="#2-3-3-resources-application-properties-配置" class="headerlink" title="2.3.3 resources\application.properties 配置"></a>2.3.3 resources\application.properties 配置</h3><p>- SpringBoot 项目最重要也是最核心的配置文件就是 application.properties，所有的框架配置都可以在这个配置文件中说明</p><p>● 各 种 配 置 都 有 默 认 , 可 以 在 resources\application.properties 修改, application.properties 文件我们可以手动创建</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认 server.port=8080</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment">#比如: 默认 spring.servlet.multipart.max-file-size=1MB</span></span><br><span class="line"><span class="comment">#该属性可以指定 springboot 上传文件大小的限制</span></span><br><span class="line"><span class="comment">#默认配置最终都是映射到某个类上,比如这里配置会映射到 MultipartProperties</span></span><br><span class="line"><span class="comment">#把光标放在该属性，ctrl+b 就可以定位该配置映射到的类</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></table></figure><p>常用配置</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment">#应用的上下文路径(项目路径)</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/allModel</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.cxs.allmodel.model</span></span><br><span class="line"><span class="comment">#指定 mapper.xml 的路径</span></span><br><span class="line"><span class="comment">#(application 上配置了@MapperScan(扫面 mapper 类的路径)和 pom.xml 中放行了mapper.xml 后，# 配 置 mapper-locations 没 有 意 义 。 如 果 mapper 类 和 mapper.xml 不 在 同 一个路径下时，mapper-locations 就有用了)</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:com/cxs/allmodel/mapper</span></span><br><span class="line"><span class="comment">#session 失效时间(单位 s)</span></span><br><span class="line"><span class="attr">spring.session.timeout</span>=<span class="string">18000</span></span><br><span class="line"><span class="comment">#数据库连接配置</span></span><br><span class="line"><span class="comment">#mysql 数据库 url</span></span><br><span class="line"><span class="attr">mysql.one.jdbc-url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line"><span class="comment">#mysql 数据库用户名</span></span><br><span class="line"><span class="attr">mysql.one.username</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line"><span class="attr">mysql.one.password</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql.one.maximum-pool-size</span>=<span class="string">15</span></span><br><span class="line"><span class="comment">#日志打印:日志级别 trace&lt;debug&lt;info&lt;warn&lt;error&lt;fatal 默认级别为 info，即默认打印info 及其以上级别的日志</span></span><br><span class="line"><span class="comment">#logging.level 设置日志级别，后面跟生效的区域，比如 root 表示整个项目，也可以设置为某个包下，也可以具体到某个类名（日志级别的值不区分大小写）</span></span><br><span class="line"><span class="attr">logging.level.com.cxs.allmodel.</span>=<span class="string">debug</span></span><br><span class="line"><span class="attr">logging.level.com.cxs.allmodel.mapper</span>=<span class="string">debug</span></span><br><span class="line"><span class="attr">logging.level.org.springframework.web</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.org.springframework.transaction</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.org.apache.ibatis</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.org.mybatis</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.com.github.pagehelper</span> = <span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="comment">#日志输出路径</span></span><br><span class="line"><span class="attr">logging.file</span>=<span class="string">/tmp/api/allmodel.log</span></span><br><span class="line"><span class="comment">#配置 pagehelper 分页插件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pagehelper.reasonable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">pagehelper.supportMethodsArguments</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">pagehelper.params</span>=<span class="string">count=countSql</span></span><br><span class="line"><span class="comment">#jackson 时间格式化</span></span><br><span class="line"><span class="attr">spring.jackson.serialization.fail-on-empty-beans</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#指定日期格式，比如 yyyy-MM-dd HH:mm:ss，或者具体的格式化类的全限定名</span></span><br><span class="line"><span class="attr">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">#指定日期格式化时区，比如 America/Los_Angeles 或者 GMT+10</span></span><br><span class="line"><span class="attr">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br><span class="line"><span class="comment">#设置统一字符集</span></span><br><span class="line"><span class="attr">spring.http.encoding.charset</span>=<span class="string">utf8</span></span><br><span class="line"><span class="comment">#redis 连接配置</span></span><br><span class="line"><span class="comment"># redis 所在主机 ip 地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#redis 服务器密码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#redis 服务器端口号</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#redis 数据库的索引编号(0 到 15)</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">14</span></span><br><span class="line"><span class="comment">## 连接池的最大活动连接数量，使用负值无限制</span></span><br><span class="line"><span class="comment">#spring.redis.pool.max-active=8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 连接池的最大空闲连接数量，使用负值表示无限数量的空闲连接</span></span><br><span class="line"><span class="comment">#spring.redis.pool.max-idle=8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 连接池最大阻塞等待时间，使用负值表示没有限制</span></span><br><span class="line"><span class="comment">#spring.redis.pool.max-wait=-1ms</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 最小空闲连接数量，使用正值才有效果</span></span><br><span class="line"><span class="comment">#spring.redis.pool.min-idle=0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 是否启用 SSL 连接. ##spring.redis.ssl=false</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 连接超时，毫秒为单位</span></span><br><span class="line"><span class="comment">#spring.redis.timeout= 18000ms</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 集群模式下，集群最大转发的数量</span></span><br><span class="line"><span class="comment">#spring.redis.cluster.max-redirects=</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 集群模式下，逗号分隔的键值对（主机：端口）形式的服务器列表</span></span><br><span class="line"><span class="comment">#spring.redis.cluster.nodes=</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 哨兵模式下，Redis 主服务器地址</span></span><br><span class="line"><span class="comment">#spring.redis.sentinel.master=</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 哨兵模式下，逗号分隔的键值对（主机：端口）形式的服务器列表</span></span><br><span class="line"><span class="comment">#spring.redis.sentinel.nodes= 127.0.0.1:5050,127.0.0.1:5060</span></span><br></pre></td></tr></table></figure><p>自定义配置</p><p>● 还可以在 properties 文件中自定义配置，通过@Value(“${}”)获取对应属性值</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.properties 文件</span></span><br><span class="line"><span class="attr">my.website</span>=<span class="string">https://www.baidu.com</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//某个 Bean</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;my.website&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String bdUrl;</span><br></pre></td></tr></table></figure><p>SpringBoot 在哪配置读取 application.properites?打开 ConfigFileApplicationListener.java , 看一下源码</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C10.jpg"></p><p>满足DEFAULT_SEARCH_LOCATIONS中的所有路径就可以了</p><h3 id="2-3-4-spring-boot-autoconfigure"><a href="#2-3-4-spring-boot-autoconfigure" class="headerlink" title="2.3.4 spring-boot-autoconfigure"></a>2.3.4 spring-boot-autoconfigure</h3><p>SpringBoot 所 有 的 自 动 配 置 功 能 都 在 spring-boot-autoconfigure 包</p><p>在 SpringBoot 的 自 动 配 置 包 , 一 般 是 XxxAutoConfiguration.java, 对应XxxxProperties.java</p><h1 id="3-容器功能"><a href="#3-容器功能" class="headerlink" title="3 容器功能"></a>3 容器功能</h1><h2 id="3-1-Spring-注入组件的注解"><a href="#3-1-Spring-注入组件的注解" class="headerlink" title="3.1 Spring 注入组件的注解"></a>3.1 Spring 注入组件的注解</h2><h3 id="3-1-1-Component、-Controller、-Service、-Repository"><a href="#3-1-1-Component、-Controller、-Service、-Repository" class="headerlink" title="3.1.1 @Component、@Controller、 @Service、@Repository"></a>3.1.1 @Component、@Controller、 @Service、@Repository</h3><p>这些在 Spring 中的传统注解仍然有效，通过这些注解可以给容器注入组件</p><h2 id="3-2-Configuration"><a href="#3-2-Configuration" class="headerlink" title="3.2 @Configuration"></a>3.2 @Configuration</h2><h3 id="3-2-1-应用实例"><a href="#3-2-1-应用实例" class="headerlink" title="3.2.1 应用实例"></a>3.2.1 应用实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Configuration 标识这是一个配置类: 等价 配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. <span class="doctag">@Bean</span> : 给容器中添加组件</span></span><br><span class="line"><span class="comment">* 2. monster01() : 默认方法名作为组件的 id</span></span><br><span class="line"><span class="comment">* 3. Monster: 返回类型就是组件类型, 返回的值就是 new Monster(100, &quot;牛魔王&quot;, 500, &quot;芭蕉扇&quot;)</span></span><br><span class="line"><span class="comment">* 4. <span class="doctag">@Bean</span>(&quot;monster_nmw&quot;): 重新指定组件的 id = “monster_nmw”</span></span><br><span class="line"><span class="comment">* 5. 配置类里面使用<span class="doctag">@Bean</span> 标注在方法上给容器注册组件，默认是单实例的*/</span></span><br><span class="line"><span class="comment">// @Bean(&quot;monster_nmw&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Monster <span class="title function_">monster01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">100</span>, <span class="string">&quot;牛魔王&quot;</span>, <span class="number">500</span>, <span class="string">&quot;芭蕉扇&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 MainApp.java , 从配置文件&#x2F;容器获取 bean , 并完成测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//启动 SpringBoot 应用程序</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">SpringApplication.run(MainApp.class, args);</span><br><span class="line"><span class="comment">// //查看容器里面的组件</span></span><br><span class="line"><span class="comment">// String[] beanDefinitionNames = ioc.getBeanDefinitionNames();</span></span><br><span class="line"><span class="comment">// for (String beanDefinitionName : beanDefinitionNames) &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(beanDefinitionName);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. ioc.getBean(&quot;monster01&quot;, Monster.class) 是从 BeanConfig 配置类/容器获取bean实例</span></span><br><span class="line"><span class="comment">//2. 默认是单列模式, 所以 monster01 == monster02</span></span><br><span class="line"><span class="comment">//获取 BeanConfig 配置类的组件/bean 实例</span></span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01);</span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01 == monster02);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-Configuration-注意事项和细节"><a href="#3-2-2-Configuration-注意事项和细节" class="headerlink" title="3.2.2 @Configuration 注意事项和细节"></a>3.2.2 @Configuration 注意事项和细节</h3><ol><li>配置类本身也是组件， 因此也可以获取, 测试 修改</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">SpringApplication.run(MainApp.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. ioc.getBean(&quot;monster01&quot;, Monster.class) 是从 BeanConfig 配置类/容器获取bean实例//2. 默认是单列模式, 所以 monster01 == monster02</span></span><br><span class="line"><span class="comment">//获取 BeanConfig 配置类的组件/bean 实例</span></span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01);</span><br><span class="line">韩顺平Java 工程师<span class="type">Monster</span> <span class="variable">monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01 == monster02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类本身也是组件， 因此也可以获取</span></span><br><span class="line"><span class="type">BeanConfig</span> <span class="variable">beanConfig</span> <span class="operator">=</span> ioc.getBean(BeanConfig.class);</span><br><span class="line">System.out.println(<span class="string">&quot;beanConfig= &quot;</span> + beanConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.SpringBoot2 新增特性： proxyBeanMethods 指定 Full 模式和Lite 模式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> wzb</span></span><br><span class="line"><span class="comment">* 1. proxyBeanMethods：代理 bean 的方法</span></span><br><span class="line"><span class="comment">* (1) Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span> 方法被调用多少次返回的组件都是单实例的, 是代理方式】</span></span><br><span class="line"><span class="comment">* (2) Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span> 方法被调用多少次返回的组件都是新创建的, 是非代理方式】</span></span><br><span class="line"><span class="comment">* (3) 特别说明: proxyBeanMethods 是在 调用<span class="doctag">@Bean</span> 方法 才生效，因此，需要先获取BeanConfig 组件，再调用方法</span></span><br><span class="line"><span class="comment">* 而不是直接通过 SpringBoot 主程序得到的容器来获取bean, 注意观察直接通过ioc.getBean() 获取 Bean, proxyBeanMethods 值并没有生效</span></span><br><span class="line"><span class="comment">* (4) 如何选择: 组件依赖必须使用 Full 模式默认。如果不需要组件依赖使用Lite 模* (5) Lite 模 也称为轻量级模式，因为不检测依赖关系，运行速度快*/</span></span><br><span class="line"><span class="comment">//@Configuration 标识这是一个配置类: 等价 配置文件</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. <span class="doctag">@Bean</span> : 给容器中添加组件</span></span><br><span class="line"><span class="comment">* 2. monster01() : 默认方法名作为组件的 id</span></span><br><span class="line"><span class="comment">* 3. Monster: 返回类型就是组件类型, 返回的值就是 new Monster(100, &quot;牛魔王&quot;, 500, &quot;芭蕉扇&quot;)</span></span><br><span class="line"><span class="comment"> 4. <span class="doctag">@Bean</span>(&quot;monster_nmw&quot;): 重新指定组件的 id = “monster_nmw” * 5. 配置类里面使用<span class="doctag">@Bean</span> 标注在方法上给容器注册组件，默认是单实例的*/</span></span><br><span class="line"><span class="comment">// @Bean(&quot;monster_nmw&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Monster <span class="title function_">monster01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">100</span>, <span class="string">&quot;牛魔王&quot;</span>, <span class="number">500</span>, <span class="string">&quot;芭蕉扇&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hspedu.springboot;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.springboot.bean.Monster;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.springboot.config.BeanConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;com.hspedu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//启动 SpringBoot 应用程序</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">SpringApplication.run(MainApp.class, args);</span><br><span class="line"><span class="comment">// //查看容器里面的组件</span></span><br><span class="line"><span class="comment">// String[] beanDefinitionNames = ioc.getBeanDefinitionNames();</span></span><br><span class="line"><span class="comment">// for (String beanDefinitionName : beanDefinitionNames) &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(beanDefinitionName);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. ioc.getBean(&quot;monster01&quot;, Monster.class) 是从 BeanConfig 配置类/容器获取bean实例</span></span><br><span class="line"><span class="comment">//2. 默认是单列模式, 所以 monster01 == monster02</span></span><br><span class="line"><span class="comment">//获取 BeanConfig 配置类的组件/bean 实例</span></span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01);</span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01 == monster02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类本身也是组件， 因此也可以获取</span></span><br><span class="line"><span class="type">BeanConfig</span> <span class="variable">beanConfig</span> <span class="operator">=</span> ioc.getBean(BeanConfig.class);</span><br><span class="line">System.out.println(<span class="string">&quot;beanConfig= &quot;</span> + beanConfig);</span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster03</span> <span class="operator">=</span> beanConfig.monster01();</span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster04</span> <span class="operator">=</span> beanConfig.monster01();</span><br><span class="line">System.out.println(<span class="string">&quot;monster03 == monster04 : &quot;</span> + (monster03 == monster04));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-Import"><a href="#3-3-Import" class="headerlink" title="3.3 @Import"></a>3.3 @Import</h2><p>@Import 方式注入的组件, 默认组件的名字就是全类名</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Dog.class, Cat.class&#125;)</span></span><br><span class="line"><span class="comment">// @Configuration//标识这是一个配置类: 等价 配置文件</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-Conditional"><a href="#3-4-Conditional" class="headerlink" title="3.4 @Conditional"></a>3.4 @Conditional</h2><h3 id="3-4-1-Conditional-介绍"><a href="#3-4-1-Conditional-介绍" class="headerlink" title="3.4.1 @Conditional 介绍"></a>3.4.1 @Conditional 介绍</h3><p>​1. 条件装配：满足 Conditional 指定的条件，则进行组件注入</p><ol start="2"><li>@Conditional 是一个根注解，下面有很多扩展注解</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wzb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@ConditionalOnBean(name=&quot;monster02&quot;) 如果是在类中，代表所有的Bean都满足条件，需要monster02这个Bean存在于spring容器中</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig2</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">monster02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="string">&quot;小怪兽&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Dog对象，并返回给容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ConditionalOnBean</span>(name=&quot;monster02&quot;)当容器中有 monster02 Bean时，就注入dog01这个bean</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@ConditionalOnMissingBean</span>,在容器中没有 monster02 Bean时，就注入dog01这个bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name=&quot;monster02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">dog01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小狗&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5-ImportResource"><a href="#3-5-ImportResource" class="headerlink" title="3.5 @ImportResource"></a>3.5 @ImportResource</h2><p>作用：原生配置文件引入, 也就是可以直接导入 Spring 传统的beans.xml ，可以认为是 SpringBoot 对 Spring 容器文件的兼容</p><p>将 beans.xml 导入到 BeanConfig.java 配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wzb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 可以获取beans.xml中的bean</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig3</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-配置绑定"><a href="#3-6-配置绑定" class="headerlink" title="3.6 配置绑定"></a>3.6 配置绑定</h2><p>一句话：使用 Java 读取到 SpringBoot 核心配置文件 application.properties 的内容，并且把它封装到 JavaBean 中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. <span class="doctag">@Component</span> 将 Furn 注册为一个组件</span></span><br><span class="line"><span class="comment">* 2. <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;furn01&quot;) 指定在 application.properties 前缀* 这样 Furn 组件就会属性文件中的 值绑定了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;furn01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Furn</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double price;</span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 修改 HelloController.java</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">package</span> com.hspedu.springboot.controller;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.springboot.bean.Furn;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello, spring boot&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Furn furn;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/furn&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Furn <span class="title function_">furn</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> furn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置绑定还有第 2 种方式,效果一样，注意: 注销@Component 需 要 在 BeanConfig.java( 也可以是其它配置类) 配置@EnableConfigurationProperties(Furn.class), 否则会提示错误</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C11.jpg"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@EnableConfigurationProperties(Furn.class)解读</span></span><br><span class="line"><span class="comment">//1、开启 Furn 配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把 Furn 组件自动注册到容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Furn.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br></pre></td></tr></table></figure><h1 id="4-Lombok"><a href="#4-Lombok" class="headerlink" title="4 Lombok"></a>4 Lombok</h1><h2 id="4-1-Lomkbok的作用"><a href="#4-1-Lomkbok的作用" class="headerlink" title="4.1 Lomkbok的作用"></a>4.1 Lomkbok的作用</h2><ol><li>简化 JavaBean 开发, 可以使用 Lombok 的注解让代码更加简洁</li><li>Java 项目中，很多没有技术含量又必须存在的代码：POJO 的getter&#x2F;setter&#x2F;toString；异常处理；I&#x2F;O 流的关闭操作等等，这些代码既没有技术含量，又影响着代码的美观，Lombok应运而生</li></ol><h2 id="4-2-Lomkbok常用注解"><a href="#4-2-Lomkbok常用注解" class="headerlink" title="4.2 Lomkbok常用注解"></a>4.2 Lomkbok常用注解</h2><ul><li><code>@Data</code>: 注解在类上;提供类所有属性的 aetting 和 seting 方法，此外还提供了equals、canEaual、hashCode、toString方法</li><li><code>@Setter</code>:注解在属性上;为属性提供 setting 方法</li><li><code>@Gettter</code> :注解在属性上;为属性提供 getting 方法</li><li><code>@Log4j</code>:注解在类上;为类提供一个 属性名为log 的 log4j日志对象</li><li><code>@NoArgsConstructor</code>:注解在类上;为类提供一个无参的构造方法</li><li><code>@AllArgsConstructor</code>:注解在类上;为类提供一个全参的构造方法</li><li><code>@Cleanup</code>:可以关闭流</li><li><code>@Builder</code>: 被注解的类加个构造者模式</li><li><code>@Synchronized</code> :加个同步锁</li><li><code>@SneakyThrows</code>:等同于try&#x2F;catch 捕获异常</li><li><code>@NonNull</code>:如果给参数加个这个注解 参数为null会抛出空指针异常</li><li><code>@Value</code>:注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。</li></ul><h2 id="4-3-Lombok应用"><a href="#4-3-Lombok应用" class="headerlink" title="4.3 Lombok应用"></a>4.3 Lombok应用</h2><p>在 pom.xml 引入 lombok，springboot会自动引入该依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引 入 lombok, 版 本 在 spring-boot-dependencies-2.5.3.pom指定了, 把光标放在lombok ctrl+b 可以看到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ToString : lombok 注解, 会在编译时生成 toString()</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="comment">//@Data: lombok 注解, 会在编译时生成 setter / getter</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor:lombok 注解, 会在编译时生成无参构造器@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor: lombok 注解, 会在编译时生成全参构造器@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;furn01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Furn</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持日志输出，建议使用@Slf4j</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello, spring boot&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Furn furn;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/furn&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Furn <span class="title function_">furn</span><span class="params">()</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;furn = &quot;</span> + furn);</span><br><span class="line"><span class="comment">//占位用法</span></span><br><span class="line">log.info(<span class="string">&quot;furn = &#123;&#125; &quot;</span>, furn);</span><br><span class="line"><span class="keyword">return</span> furn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-yaml"><a href="#5-yaml" class="headerlink" title="5 yaml"></a>5 yaml</h1><h2 id="5-1-yaml介绍"><a href="#5-1-yaml介绍" class="headerlink" title="5.1 yaml介绍"></a>5.1 yaml介绍</h2><p>1、YAML 以数据做为中心，而不是以标记语言为重点</p><p>2、YAML 仍然是一种标记语言, 但是和传统的标记语言不一样, 是以数据为中心的标记语言.</p><p>3、YAML 非常适合用来做以数据为中心的配置文件 [springboot : application.yml]</p><h2 id="5-2-yaml基本语法"><a href="#5-2-yaml基本语法" class="headerlink" title="5.2 yaml基本语法"></a>5.2 yaml基本语法</h2><ol><li>形式为 key: value；注意: 后面有空格 </li><li>区分大小写 </li><li>使用缩进表示层级关系 </li><li>缩进不允许使用 tab，只允许空格 [有些地方也识别 tab , 推荐使用空格] </li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可 </li><li>字符串无需加引号</li><li>yml 中, 注释使用 #</li></ol><h2 id="5-3-数据类型"><a href="#5-3-数据类型" class="headerlink" title="5.3 数据类型"></a>5.3 数据类型</h2><h3 id="5-3-1-字面量"><a href="#5-3-1-字面量" class="headerlink" title="5.3.1 字面量"></a>5.3.1 字面量</h3><p>字面量：单个的、不可再分的值。date、boolean、string、number、null</p><p>保存形式为 key: value</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">monster:</span></span><br><span class="line"><span class="attr">id:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2-对象"><a href="#5-3-2-对象" class="headerlink" title="5.3.2 对象"></a>5.3.2 对象</h3><p>对象：键值对的集合, 比如 map、hash、set、object</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 行内写法： k: &#123;k1:v1,k2:v2,k3:v3&#125;</span></span><br><span class="line"><span class="attr">monster:</span> &#123;<span class="attr">id:</span> <span class="number">100</span>,<span class="attr">name:</span> <span class="string">牛魔王</span>&#125;</span><br><span class="line"><span class="comment">#或换行形式</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"><span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">k3:</span> <span class="string">v3</span></span><br><span class="line"><span class="attr">monster:</span> <span class="comment"># 可以是对象</span></span><br><span class="line">    <span class="attr">id:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">牛魔王</span></span><br><span class="line"><span class="attr">skill:</span> <span class="comment"># 可以是String[]或者List&lt;String&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">飞</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">跑</span></span><br><span class="line"><span class="attr">hobby:</span> [<span class="string">喝酒，吃肉</span>]</span><br><span class="line"><span class="attr">brand:</span> &#123;<span class="attr">key01:</span> <span class="string">小米</span>,<span class="attr">key02:</span> <span class="string">比亚迪</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-数组"><a href="#5-3-3-数组" class="headerlink" title="5.3.3 数组"></a>5.3.3 数组</h3><p>数组：一组按次序排列的值, 比如 array、list、queue</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行内写法：</span> <span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="attr">hobby:</span> [<span class="string">打篮球</span>, <span class="string">打乒乓球</span>, <span class="string">踢足球</span>]</span><br><span class="line"><span class="comment">#或者换行格式</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v3</span></span><br><span class="line"><span class="attr">hobby:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">打篮球</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">打乒乓球</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">踢足球</span></span><br></pre></td></tr></table></figure><h2 id="5-4-yaml-使用细节"><a href="#5-4-yaml-使用细节" class="headerlink" title="5.4 yaml 使用细节"></a>5.4 yaml 使用细节</h2><p>如 果 application.properties 和 application.yaml 有 相同的前缀值绑定，则application.properties 优先级高, 开发时，应当避免</p><h1 id="6-静态资源访问"><a href="#6-静态资源访问" class="headerlink" title="6 静态资源访问"></a>6 静态资源访问</h1><h3 id="6-1-基本介绍"><a href="#6-1-基本介绍" class="headerlink" title="6.1 基本介绍"></a>6.1 基本介绍</h3><p>只要静态资源放在类路径下： &#x2F;static 、 &#x2F;public 、 &#x2F;resources 、&#x2F;META-INF&#x2F;resources可以被直接访问- 对应文件 WebProperties.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS=&#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>常见静态资源：JS、CSS 、图片（.jpg .png .gif .bmp .svg）、字体文件(Fonts)等</p><p>访问方式 ：默认: 项目根路径&#x2F; + 静态资源名 比如 <code>http://localhost:8080/hi.jpg .</code> </p><h3 id="6-2-使用注意"><a href="#6-2-使用注意" class="headerlink" title="6.2 使用注意"></a>6.2 使用注意</h3><p>问题：静态资源访问原理：静态映射是 &#x2F;** , 也就是对所有请求拦截，请求进来，先看Controller能不能处理，不能处理的请求交给静态资源处理器，如果静态资源找不到则响应404页面</p><p>改变静态资源访问前缀，比如我们希望 <code>http://localhost:8080/wzb/*</code> 去请求静态资源, 应用场景：静态资源访问前缀和控制器请求路径冲突</p><p>需要在配置文件中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line"><span class="attr">static-path-pattern:</span> <span class="string">/wzb/**</span></span><br></pre></td></tr></table></figure><p>改变默认的静态资源路径，比如希望在类路径下增加 wzbimg 目录作为静态资源路径, 也就是希望resources目录下可以访问wzbimg中的资源</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line"><span class="attr">static-path-pattern:</span> <span class="string">/hspres/**</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">static-locations:</span> [<span class="string">classpath:/wzbimg/</span>, <span class="string">classpath:/public/</span>, <span class="string">classpath:/static/</span>] <span class="comment"># 必须把public static目录带上，否则原来等等静态目录访问不上</span></span><br></pre></td></tr></table></figure><h1 id="7-Rest风格请求处理"><a href="#7-Rest风格请求处理" class="headerlink" title="7 Rest风格请求处理"></a>7 Rest风格请求处理</h1><h2 id="7-1-基本介绍"><a href="#7-1-基本介绍" class="headerlink" title="7.1 基本介绍"></a>7.1 基本介绍</h2><p>Rest 风格支持（使用 HTTP 请求方式动词来表示对资源的操作）</p><p>举例说明： </p><p>● 请求方式: &#x2F;monster </p><p>● GET-获取怪物 </p><p>● DELETE-删除怪物 </p><p>● PUT-修改怪物 </p><p>● POST-保存妖怪</p><p>7.2 应用实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MonsterController</span> &#123;</span><br><span class="line"><span class="comment">// @RequestMapping(value = &quot;/monster&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/monster&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMonster</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;GET-查询妖怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @RequestMapping(value = &quot;/monster&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/monster&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveMonster</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;POST-添加妖怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @RequestMapping(value = &quot;/monster&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/monster&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">putMonster</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-修改妖怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/monster&quot;)</span></span><br><span class="line"><span class="comment">// @RequestMapping(value = &quot;/monster&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteMonster</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;DELETE-删除妖怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-注意事项和细节"><a href="#7-2-注意事项和细节" class="headerlink" title="7.2 注意事项和细节"></a>7.2 注意事项和细节</h2><p>1、客户端是 PostMan 可以直接发送 Put、delete 等方式请求，可不设置Filter </p><p>2、如果要 SpringBoot 支持 页面表单的 Rest 功能, 则需要注意如下细节</p><ul><li>Rest 风 格 请 求 核 心 Filter ； HiddenHttpMethodFilter ，表单请求会被HiddenHttpMethodFilter 拦截 , 获取到表单 _method 的值，再判断是PUT&#x2F;DELETE&#x2F;PATCH(注释: PATCH 方法是新引入的，是对 PUT 方法的补充，用来对已知资源进行局部更新) </li><li>如果要 SpringBoot 支持 页面表单的 Rest 功能, 需要在 application.yml 启用filter 功能, 否则无效 </li><li>修改 application.yml 启用 filter 功能</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line"><span class="attr">mvc</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">static-path-pattern</span>: <span class="string">/wzb/**</span></span><br><span class="line">    <span class="attr">hiddenmethod</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">filter</span>:<span class="string"></span></span><br><span class="line"><span class="attr">enabled</span>: <span class="string">true #开启页面表单的 Rest 功能</span></span><br></pre></td></tr></table></figure><p>3、 @ResController 是一个复合注解, 含有@ResponseBody, 所以springboot 底层(springmvc), 在处理，如果单纯用@Controller注解，就不会返回数据给客户端，而是找视图解析器处理，比如return “test”，就会找<code>test.html</code>静态页面</p><p>解决方法：如果已经有了对应的test.html，可以在配置文件进行配置，返回“test”字符串也可以找到页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    <span class="keyword">static</span>-path-pattern: /wzb<span class="comment">/**</span></span><br><span class="line"><span class="comment">    hiddenmethod:</span></span><br><span class="line"><span class="comment">      filter:</span></span><br><span class="line"><span class="comment">    enabled: true #开启页面表单的 Rest 功能</span></span><br><span class="line"><span class="comment">    view:</span></span><br><span class="line"><span class="comment">      prefix: / # 找根路径</span></span><br><span class="line"><span class="comment">      suffix: .html # 结尾是以.html结尾</span></span><br></pre></td></tr></table></figure><h1 id="8-接收参数相关注解"><a href="#8-接收参数相关注解" class="headerlink" title="8 接收参数相关注解"></a>8 接收参数相关注解</h1><h2 id="8-1-基本介绍"><a href="#8-1-基本介绍" class="headerlink" title="8.1 基本介绍"></a>8.1 基本介绍</h2><h3 id="1-PathVariable"><a href="#1-PathVariable" class="headerlink" title="1. @PathVariable"></a>1. @PathVariable</h3><p>作用：从URL路径中提取变量值。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本使用</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定名称</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;userId&#125;/orders/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getOrder</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> Long uid, </span></span><br><span class="line"><span class="params">                         <span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long oid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.findOrder(uid, oid);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用正则表达式</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;name:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">(<span class="meta">@PathVariable</span> String name, </span></span><br><span class="line"><span class="params">                            <span class="meta">@PathVariable</span> String version)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;:&quot;</span> + version;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有路径变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;type&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getAllPathVariables</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Map&lt;String, String&gt; pathVars)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pathVars;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-RequestHeader"><a href="#2-RequestHeader" class="headerlink" title="2. @RequestHeader"></a>2. @RequestHeader</h3><p>作用：从HTTP请求头中提取值。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取单个请求头</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/header&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User-Agent: &quot;</span> + userAgent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/language&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLanguage</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(value = &quot;Accept-Language&quot;, defaultValue = &quot;zh-CN&quot;)</span> String lang)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Language: &quot;</span> + lang;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取数值类型的请求头</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/content-length&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContentLength</span><span class="params">(<span class="meta">@RequestHeader(&quot;Content-Length&quot;)</span> <span class="type">long</span> contentLength)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Content-Length: &quot;</span> + contentLength;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有请求头</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/all-headers&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getAllHeaders</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader</span> Map&lt;String, String&gt; headers)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取多值请求头</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/multi-header&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMultiValueHeader</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(&quot;Accept&quot;)</span> List&lt;String&gt; acceptHeaders)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> acceptHeaders;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ModelAttribute"><a href="#3-ModelAttribute" class="headerlink" title="3. @ModelAttribute"></a>3. @ModelAttribute</h3><p>作用：将请求参数绑定到模型对象。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自动绑定到对象</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(<span class="meta">@ModelAttribute</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User: &quot;</span> + user.getName() + <span class="string">&quot;, Age: &quot;</span> + user.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在方法级别使用，为所有请求添加公共属性</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCommonAttributes</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;currentTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义属性名</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@ModelAttribute(&quot;prod&quot;)</span> Product product)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法、getter、setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter和setter方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123; <span class="keyword">return</span> email; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123; <span class="built_in">this</span>.email = email; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-RequestParam"><a href="#4-RequestParam" class="headerlink" title="4. @RequestParam"></a>4. @RequestParam</h3><p>作用：从URL查询参数或表单数据中提取值。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本使用</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">search</span><span class="params">(<span class="meta">@RequestParam</span> String keyword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Searching for: &quot;</span> + keyword;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定参数名和默认值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPage</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;size&quot;, defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Page: %d, Size: %d&quot;</span>, page, size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可选参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/optional&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">optionalParam</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String filter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filter != <span class="literal">null</span> ? <span class="string">&quot;Filter: &quot;</span> + filter : <span class="string">&quot;No filter&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/all-params&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getAllParams</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> Map&lt;String, String&gt; allParams)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> allParams;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多值参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/multi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMultiParams</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; tags)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tags;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理数组参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String[] getArrayParams(<span class="meta">@RequestParam</span> String[] ids) &#123;</span><br><span class="line">        <span class="keyword">return</span> ids;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-MatrixVariable"><a href="#5-MatrixVariable" class="headerlink" title="5. @MatrixVariable"></a>5. @MatrixVariable</h3><p>作用：从URL路径的矩阵变量中提取值（需要额外配置）。</p><p>配置和使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;car&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCar</span><span class="params">(<span class="meta">@PathVariable</span> String car,</span></span><br><span class="line"><span class="params">                        <span class="meta">@MatrixVariable</span> String color,</span></span><br><span class="line"><span class="params">                        <span class="meta">@MatrixVariable</span> String year)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Car: %s, Color: %s, Year: %s&quot;</span>, car, color, year);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// URL示例: /cars/BMW;color=red;year=2022</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定路径变量的矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findPet</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable(pathVar = &quot;ownerId&quot;)</span> String q1,</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable(pathVar = &quot;petId&quot;)</span> String q2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Owner query: &quot;</span> + q1 + <span class="string">&quot;, Pet query: &quot;</span> + q2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// URL示例: /owners/123;q=ownerQuery/pets/456;q=petQuery</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/products/&#123;category&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getMatrixVars</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable</span> Map&lt;String, String&gt; matrixVars)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> matrixVars;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多值矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/filter/&#123;criteria&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMultiMatrix</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable</span> List&lt;String&gt; filters)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-CookieValue"><a href="#6-CookieValue" class="headerlink" title="6. @CookieValue"></a>6. @CookieValue</h3><p>作用：从HTTP Cookie中提取值。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Cookie值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cookie&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCookie</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String sessionId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Session ID: &quot;</span> + sessionId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/theme&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTheme</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@CookieValue(value = &quot;theme&quot;, defaultValue = &quot;light&quot;)</span> String theme)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Theme: &quot;</span> + theme;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取完整的Cookie对象</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/full-cookie&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFullCookie</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> Cookie sessionCookie)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Name: %s, Value: %s, Domain: %s&quot;</span>, </span><br><span class="line">                sessionCookie.getName(), </span><br><span class="line">                sessionCookie.getValue(),</span><br><span class="line">                sessionCookie.getDomain());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置Cookie的示例</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/set-cookie&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">setCookie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResponseCookie</span> <span class="variable">cookie</span> <span class="operator">=</span> ResponseCookie.from(<span class="string">&quot;user-token&quot;</span>, <span class="string">&quot;abc123&quot;</span>)</span><br><span class="line">                .httpOnly(<span class="literal">true</span>)</span><br><span class="line">                .secure(<span class="literal">true</span>)</span><br><span class="line">                .path(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .maxAge(Duration.ofHours(<span class="number">1</span>))</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                .header(HttpHeaders.SET_COOKIE, cookie.toString())</span><br><span class="line">                .body(<span class="string">&quot;Cookie set&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-RequestBody"><a href="#7-RequestBody" class="headerlink" title="7. @RequestBody"></a>7. @RequestBody</h3><p>作用：将HTTP请求体绑定到方法参数，主要用于处理JSON&#x2F;XML等格式的数据。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BodyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定到简单对象</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理用户创建逻辑</span></span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定到Map</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/map&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">handleMap</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; payload)</span> &#123;</span><br><span class="line">        payload.put(<span class="string">&quot;processed&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        payload.put(<span class="string">&quot;timestamp&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="keyword">return</span> payload;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定到List</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/batch&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">batchCreate</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Created &quot;</span> + users.size() + <span class="string">&quot; users&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定到字符串</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/raw&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleRawBody</span><span class="params">(<span class="meta">@RequestBody</span> String rawBody)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Received: &quot;</span> + rawBody;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用HttpEntity获取完整请求信息</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/entity&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleEntity</span><span class="params">(HttpEntity&lt;String&gt; entity)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> entity.getBody();</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> entity.getHeaders();</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Body: %s, Content-Type: %s&quot;</span>, </span><br><span class="line">                body, headers.getContentType());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证请求体</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/validate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; createValidUser(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">savedUser</span> <span class="operator">=</span> userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(savedUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证注解示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;年龄不能小于0&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 150, message = &quot;年龄不能大于150&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-复杂参数接收请求数据"><a href="#8-2-复杂参数接收请求数据" class="headerlink" title="8.2 复杂参数接收请求数据"></a>8.2 复杂参数接收请求数据</h2><h3 id="1-常用复杂参数类型"><a href="#1-常用复杂参数类型" class="headerlink" title="1. 常用复杂参数类型"></a>1. 常用复杂参数类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonParamsController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常用复杂参数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">            Map&lt;String, Object&gt; map,                    // 数据存储</span></span><br><span class="line"><span class="params">            Model model,                                // 模型数据  </span></span><br><span class="line"><span class="params">            RedirectAttributes redirectAttributes,     // 重定向属性</span></span><br><span class="line"><span class="params">            HttpServletResponse response,              // HTTP响应</span></span><br><span class="line"><span class="params">            HttpSession session                        // Session</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Map-和-Model-Request域数据"><a href="#2-Map-和-Model-Request域数据" class="headerlink" title="2. Map 和 Model - Request域数据"></a>2. Map 和 Model - Request域数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(Map&lt;String, Object&gt; map, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// Map 和 Model 数据都会放在request域中（底层request.setAttribute()）</span></span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在模板中通过 $&#123;name&#125;、$&#123;age&#125; 获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 快捷方式 - 直接返回数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        data.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-RedirectAttributes-重定向携带数据"><a href="#3-RedirectAttributes-重定向携带数据" class="headerlink" title="3. RedirectAttributes - 重定向携带数据"></a>3. RedirectAttributes - 重定向携带数据</h3><p>java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedirectController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(User user, RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.save(user);</span><br><span class="line">            <span class="comment">// 添加flash属性 - 重定向后自动消失</span></span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;用户添加成功&quot;</span>);</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;alertType&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;alertType&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/user/list&quot;</span>;  <span class="comment">// 重定向到列表页</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 普通属性（会拼接到URL）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">search</span><span class="params">(String keyword, RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line">        redirectAttributes.addAttribute(<span class="string">&quot;keyword&quot;</span>, keyword); <span class="comment">// → /result?keyword=xxx</span></span><br><span class="line">        redirectAttributes.addAttribute(<span class="string">&quot;page&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-HttpServletResponse-响应控制"><a href="#4-HttpServletResponse-响应控制" class="headerlink" title="4. HttpServletResponse - 响应控制"></a>4. HttpServletResponse - 响应控制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=file.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 直接写入响应流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;文件内容&quot;</span>.getBytes());</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/json&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnJson</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;&#123;\&quot;status\&quot;:\&quot;success\&quot;&#125;&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-HttpSession-会话管理"><a href="#5-HttpSession-会话管理" class="headerlink" title="5. HttpSession - 会话管理"></a>5. HttpSession - 会话管理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(User user, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 存储用户信息到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;currentUser&quot;</span>, user);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置session超时时间（分钟）</span></span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">30</span> * <span class="number">60</span>); <span class="comment">// 30分钟</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/home&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/profile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">profile</span><span class="params">(HttpSession session, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 从session获取数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;currentUser&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;profile&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 销毁session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-实际应用示例"><a href="#6-实际应用示例" class="headerlink" title="6. 实际应用示例"></a>6. 实际应用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PracticalExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submitOrder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">submitOrder</span><span class="params">(Order order, </span></span><br><span class="line"><span class="params">                            HttpSession session,</span></span><br><span class="line"><span class="params">                            RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 从session获取用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;currentUser&quot;</span>);</span><br><span class="line">        order.setUserId(user.getId());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 业务处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            orderService.create(order);</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;订单创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;创建失败：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 重定向到结果页</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/order/result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportData</span><span class="params">(String type, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=data.xlsx&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 导出逻辑</span></span><br><span class="line">        excelService.export(data, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-自定义对象参数自动封装"><a href="#8-3-自定义对象参数自动封装" class="headerlink" title="8.3 自定义对象参数自动封装"></a>8.3 自定义对象参数自动封装</h2><h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h3><ul><li><strong>自动封装</strong>：SpringBoot支持将请求参数自动封装到自定义对象</li><li><strong>类型转换</strong>：自动完成数据类型转换与格式化</li><li><strong>级联封装</strong>：支持对象属性的嵌套封装</li></ul><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户实体</span></span><br><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Controller 使用</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自动封装对象参数</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// SpringBoot自动将请求参数封装到User对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户: &quot;</span> + user.getName() + <span class="string">&quot;, 年龄: &quot;</span> + user.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /user?name=张三&amp;age=25&amp;email=zhangsan@example.com&amp;birthDate=2023-01-01</span><br></pre></td></tr></table></figure><h3 id="3-级联封装（嵌套对象）"><a href="#3-级联封装（嵌套对象）" class="headerlink" title="3. 级联封装（嵌套对象）"></a>3. 级联封装（嵌套对象）</h3><p><strong>嵌套对象定义</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地址类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户类（包含地址）</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;  <span class="comment">// 嵌套对象</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>级联封装使用</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/userWithAddress&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUserWithAddress</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 自动级联封装</span></span><br><span class="line">        <span class="keyword">return</span> user.getName() + <span class="string">&quot; 住在 &quot;</span> + user.getAddress().getCity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/userWithAddress?</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">李四&amp;</span></span><br><span class="line"><span class="attr">age</span>=<span class="string">30&amp;</span></span><br><span class="line"><span class="attr">address.province</span>=<span class="string">广东&amp;</span></span><br><span class="line"><span class="attr">address.city</span>=<span class="string">深圳&amp;</span></span><br><span class="line"><span class="attr">address.street</span>=<span class="string">科技园</span></span><br></pre></td></tr></table></figure><h3 id="4-列表和数组封装"><a href="#4-列表和数组封装" class="headerlink" title="4. 列表和数组封装"></a>4. 列表和数组封装</h3><p><strong>支持集合类型</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;     <span class="comment">// 列表</span></span><br><span class="line">    <span class="keyword">private</span> String[] skills;          <span class="comment">// 数组</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/userWithList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">userWithList</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.getName() + <span class="string">&quot; 有 &quot;</span> + user.getHobbies().size() + <span class="string">&quot; 个爱好&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/userWithList?</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">王五&amp;</span></span><br><span class="line"><span class="attr">hobbies</span>=<span class="string">读书&amp;</span></span><br><span class="line"><span class="attr">hobbies</span>=<span class="string">游泳&amp;</span></span><br><span class="line"><span class="attr">hobbies</span>=<span class="string">编程&amp;</span></span><br><span class="line"><span class="attr">skills</span>=<span class="string">Java&amp;</span></span><br><span class="line"><span class="attr">skills</span>=<span class="string">Spring</span></span><br></pre></td></tr></table></figure><h3 id="5-实际应用示例"><a href="#5-实际应用示例" class="headerlink" title="5. 实际应用示例"></a>5. 实际应用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 订单相关实体</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; items;  <span class="comment">// 订单项列表</span></span><br><span class="line">    <span class="keyword">private</span> User user;              <span class="comment">// 用户信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> Integer quantity;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/createOrder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// 自动封装复杂对象结构</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;订单创建成功: &quot;</span> + order.getOrderNo() + </span><br><span class="line">               <span class="string">&quot;, 金额: &quot;</span> + order.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/createOrder?</span></span><br><span class="line"><span class="attr">orderNo</span>=<span class="string">ORD001&amp;</span></span><br><span class="line"><span class="attr">amount</span>=<span class="string">299.99&amp;</span></span><br><span class="line"><span class="attr">user.name</span>=<span class="string">张三&amp;</span></span><br><span class="line"><span class="attr">items[0].productName</span>=<span class="string">手机&amp;</span></span><br><span class="line"><span class="attr">items[0].quantity</span>=<span class="string">1&amp;</span></span><br><span class="line"><span class="attr">items[0].price</span>=<span class="string">2999&amp;</span></span><br><span class="line"><span class="attr">items[1].productName</span>=<span class="string">耳机&amp;</span></span><br><span class="line"><span class="attr">items[1].quantity</span>=<span class="string">2&amp;</span></span><br><span class="line"><span class="attr">items[1].price</span>=<span class="string">199</span></span><br></pre></td></tr></table></figure><h1 id="9-自定义转换器"><a href="#9-自定义转换器" class="headerlink" title="9 自定义转换器"></a>9 自定义转换器</h1><h2 id="1-基本介绍-1"><a href="#1-基本介绍-1" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h2><p><strong>核心概念</strong></p><ul><li><strong>内置转换器</strong>：SpringBoot 使用内置转换器将请求数据封装成对象</li><li><strong>自定义转换器</strong>：支持开发自定义转换器处理特殊数据类型</li><li><strong>调试查看</strong>：在 debug 时可以看到内置转换器的工作过程</li></ul><h2 id="2-内置转换器示例"><a href="#2-内置转换器示例" class="headerlink" title="2. 内置转换器示例"></a>2. 内置转换器示例</h2><p><strong>自动类型转换</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SpringBoot 内置转换器自动处理类型转换</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(</span></span><br><span class="line"><span class="params">        Integer id,           // String → Integer</span></span><br><span class="line"><span class="params">        Boolean status,       // String → Boolean  </span></span><br><span class="line"><span class="params">        Date createTime,      // String → Date</span></span><br><span class="line"><span class="params">        BigDecimal amount     // String → BigDecimal</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ID: &quot;</span> + id + <span class="string">&quot;, Status: &quot;</span> + status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test?id=123&amp;status=true&amp;createTime=2023-01-01&amp;amount=99.99</span><br></pre></td></tr></table></figure><h2 id="3-自定义转换器场景"><a href="#3-自定义转换器场景" class="headerlink" title="3. 自定义转换器场景"></a>3. 自定义转换器场景</h2><p><strong>需要自定义的情况</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 场景1：特殊格式字符串转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tags;  <span class="comment">// 需要将 &quot;java,spring,boot&quot; 转换为 List</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：自定义对象转换  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coordinate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Double x;</span><br><span class="line">    <span class="keyword">private</span> Double y;</span><br><span class="line">    <span class="comment">// 需要将 &quot;10.5,20.3&quot; 转换为 Coordinate 对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现自定义转换器"><a href="#4-实现自定义转换器" class="headerlink" title="4. 实现自定义转换器"></a>4. 实现自定义转换器</h2><h4 id="方式1：Converter-接口"><a href="#方式1：Converter-接口" class="headerlink" title="方式1：Converter 接口"></a><strong>方式1：Converter 接口</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串到List的转换器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToListConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, List&lt;String&gt;&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span> || source.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 &quot;java,spring,boot&quot; 转换为 List</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(source.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                    .map(String::trim)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串到坐标对象的转换器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToCoordinateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Coordinate&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coordinate <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span> || !source.contains(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] parts = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="type">Coordinate</span> <span class="variable">coord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Coordinate</span>();</span><br><span class="line">        coord.setX(Double.parseDouble(parts[<span class="number">0</span>].trim()));</span><br><span class="line">        coord.setY(Double.parseDouble(parts[<span class="number">1</span>].trim()));</span><br><span class="line">        <span class="keyword">return</span> coord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式2：使用配置类注册"><a href="#方式2：使用配置类注册" class="headerlink" title="方式2：使用配置类注册"></a>方式2：使用配置类注册</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 注册自定义转换器</span></span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToListConverter</span>());</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToCoordinateConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-使用自定义转换器"><a href="#5-使用自定义转换器" class="headerlink" title="5. 使用自定义转换器"></a>5. 使用自定义转换器</h2><p><strong>在Controller中使用</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomConverterController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用自定义转换器</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// SpringBoot会自动使用 StringToListConverter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户: &quot;</span> + user.getName() + <span class="string">&quot;, 标签: &quot;</span> + user.getTags();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/point&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPoint</span><span class="params">(Coordinate coord)</span> &#123;</span><br><span class="line">        <span class="comment">// 自动使用 StringToCoordinateConverter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;坐标: (&quot;</span> + coord.getX() + <span class="string">&quot;, &quot;</span> + coord.getY() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实体类定义</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tags;  <span class="comment">// 自动转换 &quot;java,spring&quot; → List</span></span><br><span class="line">    <span class="keyword">private</span> Coordinate location; <span class="comment">// 自动转换 &quot;10.5,20.3&quot; → Coordinate</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /user?</span><br><span class="line">name=张三&amp;</span><br><span class="line">tags=java,spring,boot&amp;</span><br><span class="line">location=116.40,39.90</span><br></pre></td></tr></table></figure><h2 id="6-调试查看转换器"><a href="#6-调试查看转换器" class="headerlink" title="6. 调试查看转换器"></a>6. 调试查看转换器</h2><p><strong>调试方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/debug&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">debug</span><span class="params">(<span class="meta">@RequestParam</span> String data, WebDataBinder binder)</span> &#123;</span><br><span class="line">        <span class="comment">// 在debug时可以查看binder中的转换服务</span></span><br><span class="line">        <span class="comment">// 查看 ConversionService 中的注册的转换器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;转换器数量: &quot;</span> + binder.getConversionService());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;调试信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-拦截器-HandlerInterceptor"><a href="#10-拦截器-HandlerInterceptor" class="headerlink" title="10 拦截器-HandlerInterceptor"></a>10 拦截器-HandlerInterceptor</h1><h2 id="10-1-基本介绍"><a href="#10-1-基本介绍" class="headerlink" title="10.1 基本介绍"></a>10.1 基本介绍</h2><p>在 Spring Boot 项目中， 拦截器是开发中常用手段，要来做登陆验证、性能检查、日志记录等。</p><h2 id="10-2-拦截器应用实例"><a href="#10-2-拦截器应用实例" class="headerlink" title="10.2 拦截器应用实例"></a>10.2 拦截器应用实例</h2><p>需求: 使用拦截器防止用户非法登录, 使用拦截器就不需要在每个方法验证了</p><p>浏览器输入 : <a href="http://localhost:8080/manage.html">http://localhost:8080/manage.html</a> , 如果用户没有登录，则返回登录界面.</p><p>代码实现：</p><p>创建 com&#x2F;wzb&#x2F;usersys&#x2F;interceptor&#x2F;LoginInterceptor.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 目标方法执行之前*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle 拦截的请求路径是&#123;&#125;&quot;</span>, requestURI);</span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginAdmin</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;loginAdmin&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginAdmin != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;错误/重新登录&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 目标方法执行完成以后*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 页面渲染以后*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 com&#x2F;wzb&#x2F;usersys&#x2F;config&#x2F;WebConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这里实现 Spring-Boot 定制功能, 加入自己的配置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有请求</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/images/**&quot;</span>); <span class="comment">//放行的请求, 可以根据需要增加&#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注册拦截器, 依然可以使用如下方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="comment">/*implements WebMvcConfigurer*/</span> &#123;</span><br><span class="line">    <span class="comment">//将我们的拦截器, 注入到容器中</span></span><br><span class="line">    <span class="comment">//@Override</span></span><br><span class="line">    <span class="comment">//public void addInterceptors(InterceptorRegistry registry) &#123;</span></span><br><span class="line">    <span class="comment">// System.out.println(&quot;addInterceptors...&quot;);</span></span><br><span class="line">    <span class="comment">// //加入我们的拦截器</span></span><br><span class="line">    <span class="comment">// registry.addInterceptor(new LoginInterceptor())</span></span><br><span class="line">    <span class="comment">// .addPathPatterns(&quot;/**&quot;) //拦截所有请求</span></span><br><span class="line">    <span class="comment">// .excludePathPatterns(&quot;/&quot;,&quot;/login&quot;,&quot;/images/**&quot;);//</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;addInterceptors...~~~~:):)&quot;</span>);</span><br><span class="line">                <span class="comment">//加入我们的拦截器</span></span><br><span class="line">                registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                    .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有请求.excludePathPatterns(&quot;/&quot;, &quot;/login&quot;, &quot;/images/**&quot;);//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-文件上传"><a href="#11-文件上传" class="headerlink" title="11 文件上传"></a>11 文件上传</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upload&#125;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    电 邮:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    年 龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    职 位:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;job&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    头 像:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    宠 物:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重新填写&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进行文件上传时要将enctype&#x3D;”multipart&#x2F;form-data”写成这样</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/upload.html&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* MultipartFile 自动封装上传过来的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email, <span class="meta">@RequestParam(&quot;name&quot;)</span>String name, <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age, <span class="meta">@RequestParam(&quot;job&quot;)</span></span></span><br><span class="line"><span class="params">                         String job, <span class="meta">@RequestPart(&quot;header&quot;)</span> MultipartFile header, <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> throwsIOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;，name=&#123;&#125;，age=&#123;&#125;, job=&#123;&#125;, header=&#123;&#125;，photos=&#123;&#125;&quot;</span>, email, name, age, job, header.getSize(), photos.length);</span><br><span class="line">        <span class="comment">// 也 可 以 自 己 动 态 的 创 建 上 传 文 件 目 录 , 来存放文件, 比如在resources/static/images/upload/</span></span><br><span class="line">        <span class="comment">// String path = ResourceUtils.getURL(&quot;classpath:&quot;).getPath();</span></span><br><span class="line">        <span class="comment">// File file = new File(path + &quot;static/images/upload/&quot;);</span></span><br><span class="line">        <span class="comment">// if (!file.exists()) file.mkdirs();</span></span><br><span class="line">        <span class="keyword">if</span> (!header.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//保存到文件服务器或者 OSS 服务器//需要先创建好d:\\temp_upload 目录String originalFilename = header.getOriginalFilename();</span></span><br><span class="line">            <span class="comment">//方式 1: 指定某个目录存放上传文件</span></span><br><span class="line">            header.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\temp_upload\\&quot;</span> + originalFilename));</span><br><span class="line">            <span class="comment">//方式 2: 动态的创建文件存放文件</span></span><br><span class="line">            <span class="comment">//header.transferTo(new File(file.getAbsolutePath() + &quot;/&quot; + originalFilename));</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (photos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!photo.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">                    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\temp_upload\\&quot;</span> + originalFilename));</span><br><span class="line">                    <span class="comment">//photo.transferTo(new File(file.getAbsolutePath() + &quot;/&quot; +originalFilename));</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传成功~~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改 WebConfig 配置，放行&#x2F;upload.html 和 &#x2F;upload 请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有请求</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/upload.html&quot;</span>, <span class="string">&quot;/upload&quot;</span>); <span class="comment">//放行的请求, 可以根据需要增加&#125;</span></span><br></pre></td></tr></table></figure><p>在配置文件中修改文件上传配置参数，max-file-size 单个文件大小, max-request-size 一次请求最大上传大小(多个文件.)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">50MB</span></span><br></pre></td></tr></table></figure><h1 id="12-异常处理"><a href="#12-异常处理" class="headerlink" title="12 异常处理"></a>12 异常处理</h1><h2 id="12-1-基本介绍"><a href="#12-1-基本介绍" class="headerlink" title="12.1 基本介绍"></a>12.1 基本介绍</h2><p>默认情况下，Spring Boot 提供&#x2F;error 处理所有错误的映射</p><p>对于机器客户端，它将生成 JSON 响应，其中包含错误，HTTP 状态和异常消息的详细信息。对于浏览器客户端，响应一个”whitelabel”错误视图，以HTML 格式呈现相同的数据</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C12.jpg"></p><h2 id="12-2-拦截器VS过滤器"><a href="#12-2-拦截器VS过滤器" class="headerlink" title="12.2 拦截器VS过滤器"></a>12.2 拦截器VS过滤器</h2><p>使用范围不同：</p><ul><li>过滤器 实现的是 javax.servlet.Filter 接口，而这个接口是在Servlet 规范中定义的，也就是说过滤器 Filter 的使用要依赖于 Tomcat 等容器，Filter 只能在web 程序中使用</li><li>拦截器(Interceptor) 它是一个 Spring 组件，并由 Spring 容器管理，并不依赖Tomcat 等容器，是可以单独使用的。不仅能应用在 web 程序中，也可以用于Application 等程序中</li></ul><p>过滤器 和 拦截器的触发时机也不同，看下边这张图</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C13.jpg"></p><ul><li>过滤器 Filter 是在请求进入容器后, 但在进入 servlet 之前进行预处理, 请求结束是在servlet 处理完以后 </li><li>拦截器 Interceptor 是在请求进入 servlet 后, 在进入 Controller 之前进行预处理的, Controller 中渲染了对应的视图之后请求结束</li></ul><p><strong>过滤器不会处理请求转发, 拦截器会处理请求转发</strong>，这里举例说明：</p><p><strong>场景设定</strong></p><p>假设我们有一个请求：</p><ol><li>用户访问 <code>/start</code>。</li><li>Controller 处理 <code>/start</code>，然后<strong>转发</strong>到 <code>/forward</code>。</li><li>Controller 处理 <code>/forward</code>，返回结果。</li></ol><p>我们将创建一个<strong>过滤器</strong>和一个<strong>拦截器</strong>，并观察它们在这个流程中的行为。</p><hr><ol><li><strong>创建过滤器 (Filter)</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span> <span class="comment">// 过滤所有请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器 Filter: 进入 &quot;</span> + req.getRequestURI() + <span class="string">&quot; | 请求类型: &quot;</span> + getDispatcherType(req));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行后续过滤器或Servlet</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器 Filter: 退出 &quot;</span> + req.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getDispatcherType</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求的派发类型</span></span><br><span class="line">        <span class="keyword">return</span> request.getDispatcherType().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建拦截器 (Interceptor)</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器 Interceptor: preHandle  &quot;</span> + request.getRequestURI() + <span class="string">&quot; | 请求类型: &quot;</span> + request.getDispatcherType());</span><br><span class="line">        <span class="comment">// 在Controller方法执行前调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 继续流程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器 Interceptor: postHandle &quot;</span> + request.getRequestURI() + <span class="string">&quot; | 请求类型: &quot;</span> + request.getDispatcherType());</span><br><span class="line">        <span class="comment">// 在Controller方法执行后，视图渲染前调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器 Interceptor: afterCompletion &quot;</span> + request.getRequestURI() + <span class="string">&quot; | 请求类型: &quot;</span> + request.getDispatcherType());</span><br><span class="line">        <span class="comment">// 在整个请求完成后调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过配置类注册这个拦截器：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyInterceptor myInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(myInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>); <span class="comment">// 拦截所有路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>创建控制器 (Controller)</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/start&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- Controller: 处理 /start，准备转发到 /forward ---&quot;</span>);</span><br><span class="line">        <span class="comment">// 关键：这里是服务器端转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/forward&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/forward&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">forward</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- Controller: 处理 /forward ---&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">// 返回一个视图名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="4"><li><strong>运行并访问 <code>/start</code> 查看控制台输出</strong></li></ol><p>当你访问 <code>http://localhost:8080/start</code> 时，控制台的输出顺序和内容将非常说明问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 原始请求 /start 进入</span></span><br><span class="line">过滤器 Filter: 进入 /start | 请求类型: REQUEST</span><br><span class="line">拦截器 Interceptor: preHandle  /start | 请求类型: REQUEST</span><br><span class="line"></span><br><span class="line">--- Controller: 处理 /start，准备转发到 /forward ---</span><br><span class="line"></span><br><span class="line">拦截器 Interceptor: postHandle /start | 请求类型: REQUEST</span><br><span class="line">拦截器 Interceptor: afterCompletion /start | 请求类型: REQUEST</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 注意！过滤器没有为转发的请求再次执行！</span></span><br><span class="line"><span class="comment">// 但拦截器处理了！</span></span><br><span class="line">拦截器 Interceptor: preHandle  /forward | 请求类型: FORWARD</span><br><span class="line"></span><br><span class="line">--- Controller: 处理 /forward ---</span><br><span class="line"></span><br><span class="line">拦截器 Interceptor: postHandle /forward | 请求类型: FORWARD</span><br><span class="line">拦截器 Interceptor: afterCompletion /forward | 请求类型: FORWARD</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 最终，原始请求的过滤器退出</span></span><br><span class="line">过滤器 Filter: 退出 /start</span><br></pre></td></tr></table></figure><p><strong>关键分析</strong></p><p>从输出结果可以清晰地看到：</p><ol><li><strong>过滤器 (Filter)</strong>：<ul><li>只记录了 <strong><code>进入 /start</code></strong> 和 <strong><code>退出 /start</code></strong>。</li><li>对于从 <code>/start</code> 转发到 <code>/forward</code> 的这次<strong>内部请求，过滤器完全忽略了</strong>。它只处理了一次 <code>DispatcherType.REQUEST</code>。</li></ul></li><li><strong>拦截器 (Interceptor)</strong>：<ul><li>处理了两次请求：<ul><li>第一次：<code>/start</code>，请求类型为 <strong><code>REQUEST</code></strong>。</li><li>第二次：<code>/forward</code>，请求类型为 <strong><code>FORWARD</code></strong>。</li></ul></li><li>它完整地参与了Spring MVC的整个内部流程，包括请求转发。</li></ul></li></ol><p><strong>如何让过滤器也处理转发？</strong></p><p>如果你需要让过滤器也能处理转发请求，可以在注册过滤器时进行配置。在Spring Boot中，使用 <code>FilterRegistrationBean</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;MyFilter&gt; <span class="title function_">myFilterRegistration</span><span class="params">()</span> &#123;</span><br><span class="line">        FilterRegistrationBean&lt;MyFilter&gt; registration = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> <span class="title class_">MyFilter</span>());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置派发类型，使其也处理转发</span></span><br><span class="line">        registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.FORWARD);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置后，过滤器也会对 <code>FORWARD</code> 类型的请求生效。</p><h2 id="12-3-自定义异常页面"><a href="#12-3-自定义异常页面" class="headerlink" title="12.3 自定义异常页面"></a>12.3 自定义异常页面</h2><p><strong>核心概念</strong><br>当应用程序抛出异常时，Spring Boot 默认会提供一个名为 “whitelabel error page” 的错误页面。要替换它，我们需要处理 &#x2F;error 路径。Spring Boot 自动将异常信息绑定到请求中，供错误页面使用。</p><h3 id="方法一：静态自定义错误页面（最简单）"><a href="#方法一：静态自定义错误页面（最简单）" class="headerlink" title="方法一：静态自定义错误页面（最简单）"></a>方法一：静态自定义错误页面（最简单）</h3><p>这种方式通过创建静态 HTML 页面来定义错误页面，适用于简单的、静态的错误提示。</p><p>在 src&#x2F;main&#x2F;resources&#x2F;static&#x2F;error&#x2F; 目录下创建对应的错误状态码 HTML 文件。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">src/main/resources/</span></span><br><span class="line"><span class="attr">└──</span> <span class="string">static/</span></span><br><span class="line">    <span class="attr">└──</span> <span class="string">error/</span></span><br><span class="line">        <span class="attr">├──</span> <span class="string">404.html</span></span><br><span class="line">        <span class="attr">├──</span> <span class="string">500.html</span></span><br><span class="line">        <span class="attr">└──</span> <span class="string">5xx.html  # 通配符，匹配所有5xx错误</span></span><br></pre></td></tr></table></figure><h3 id="方法二：动态模板错误页面（推荐）"><a href="#方法二：动态模板错误页面（推荐）" class="headerlink" title="方法二：动态模板错误页面（推荐）"></a>方法二：动态模板错误页面（推荐）</h3><p>使用模板引擎（Thymeleaf、FreeMarker等）创建动态错误页面，可以显示异常信息。</p><p>使用 Thymeleaf 示例<br>在 src&#x2F;main&#x2F;resources&#x2F;templates&#x2F;error&#x2F; 目录下创建模板文件：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">src/main/resources/</span></span><br><span class="line"><span class="attr">└──</span> <span class="string">templates/</span></span><br><span class="line">    <span class="attr">└──</span> <span class="string">error/</span></span><br><span class="line">        <span class="attr">├──</span> <span class="string">404.html</span></span><br><span class="line">        <span class="attr">├──</span> <span class="string">500.html</span></span><br><span class="line">        <span class="attr">└──</span> <span class="string">error.html  # 通用错误页面</span></span><br></pre></td></tr></table></figure><h3 id="方法三：使用-ControllerAdvice-全局异常处理（最灵活）"><a href="#方法三：使用-ControllerAdvice-全局异常处理（最灵活）" class="headerlink" title="方法三：使用 @ControllerAdvice 全局异常处理（最灵活）"></a>方法三：使用 @ControllerAdvice 全局异常处理（最灵活）</h3><p>这种方式可以完全控制异常处理逻辑，适合复杂的业务场景。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.NoHandlerFoundException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理404异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(NoHandlerFoundException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.NOT_FOUND)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleNotFound</span><span class="params">(HttpServletRequest request, Exception ex, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;页面不存在&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;path&quot;</span>, request.getRequestURL());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;timestamp&quot;</span>, java.time.LocalDateTime.now());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error/404&quot;</span>; <span class="comment">// 返回自定义的404页面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理所有其他异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleAllExceptions</span><span class="params">(HttpServletRequest request, Exception ex, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;服务器内部错误&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;message&quot;</span>, ex.getMessage());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;path&quot;</span>, request.getRequestURL());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;timestamp&quot;</span>, java.time.LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开发环境显示详细错误</span></span><br><span class="line">        <span class="keyword">if</span> (isDevEnvironment()) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;exception&quot;</span>, ex.getClass().getName());</span><br><span class="line">            model.addAttribute(<span class="string">&quot;trace&quot;</span>, getStackTrace(ex));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error/500&quot;</span>; <span class="comment">// 返回自定义的500页面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isDevEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以检查当前环境是否是开发环境</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 实际应用中应该从配置中读取</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getStackTrace</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        java.io.<span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StringWriter();</span><br><span class="line">        java.io.<span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.PrintWriter(sw);</span><br><span class="line">        ex.printStackTrace(pw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为了让404异常能被捕获，需要在 <code>application.properties</code> 中配置：</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用抛出NoHandlerFoundException而不是返回404页面</span></span><br><span class="line"><span class="attr">spring.mvc.throw-exception-if-no-handler-found</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 禁止静态资源映射，确保能抛出异常</span></span><br><span class="line"><span class="attr">spring.web.resources.add-mappings</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><hr><h3 id="方法四：自定义-ErrorController（完全控制）"><a href="#方法四：自定义-ErrorController（完全控制）" class="headerlink" title="方法四：自定义 ErrorController（完全控制）"></a>方法四：自定义 ErrorController（完全控制）</h3><p>实现自定义的 <code>ErrorController</code> 来完全控制错误处理流程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.ErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomErrorController</span> <span class="keyword">implements</span> <span class="title class_">ErrorController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleError</span><span class="params">(HttpServletRequest request, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 从请求中获取错误信息</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">statusCode</span> <span class="operator">=</span> (Integer) request.getAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">exception</span> <span class="operator">=</span> (Exception) request.getAttribute(<span class="string">&quot;javax.servlet.error.exception&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestUri</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;javax.servlet.error.request_uri&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (requestUri == <span class="literal">null</span>) &#123;</span><br><span class="line">            requestUri = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        model.addAttribute(<span class="string">&quot;statusCode&quot;</span>, statusCode);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;requestUri&quot;</span>, requestUri);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;exception&quot;</span>, exception);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;timestamp&quot;</span>, java.time.LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据状态码返回不同的页面</span></span><br><span class="line">        <span class="keyword">if</span> (statusCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error/404&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">500</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error/500&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error/error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法是过时的，但在新版本中仍然需要实现</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getErrorPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="13-注入-Servlet、Filter、Listener"><a href="#13-注入-Servlet、Filter、Listener" class="headerlink" title="13 注入 Servlet、Filter、Listener"></a>13 注入 Servlet、Filter、Listener</h1><h2 id="13-1-使用-Spring-Boot-注解（最推荐）"><a href="#13-1-使用-Spring-Boot-注解（最推荐）" class="headerlink" title="13.1 使用 Spring Boot 注解（最推荐）"></a>13.1 使用 Spring Boot 注解（最推荐）</h2><p>这是 Spring Boot 中最简单、最常用的方式。</p><h3 id="1-注入-Servlet"><a href="#1-注入-Servlet" class="headerlink" title="1. 注入 Servlet"></a>1. 注入 Servlet</h3><p><strong>注意注入的原生 Servlet 不会被 Spring-Boot 拦截器拦截</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/custom-servlet&quot;)</span>  <span class="comment">// 指定Servlet的访问路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&lt;h1&gt;这是自定义Servlet&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&lt;p&gt;当前时间: &quot;</span> + <span class="keyword">new</span> <span class="title class_">java</span>.util.Date() + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-注入-Filter"><a href="#2-注入-Filter" class="headerlink" title="2. 注入 Filter"></a>2. 注入 Filter</h3><p><strong>过滤器配置的 urlPatterns 也会经过 Spring-Boot 拦截器</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span>  <span class="comment">// 过滤所有请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义过滤器初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, </span></span><br><span class="line"><span class="params">                        FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器: 请求 &quot;</span> + req.getRequestURI());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 继续执行过滤器链</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器: 响应 &quot;</span> + req.getRequestURI() + <span class="string">&quot; 耗时: &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义过滤器销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-注入-Listener"><a href="#3-注入-Listener" class="headerlink" title="3. 注入 Listener"></a>3. 注入 Listener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=== 应用程序启动 ===&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext 初始化完成&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可以在这里进行应用启动时的初始化工作</span></span><br><span class="line">        sce.getServletContext().setAttribute(<span class="string">&quot;appStartTime&quot;</span>, System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=== 应用程序关闭 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> (Long) sce.getServletContext().getAttribute(<span class="string">&quot;appStartTime&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (startTime != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">runTime</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            System.out.println(<span class="string">&quot;应用运行时间: &quot;</span> + runTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-启用注解扫描"><a href="#4-启用注解扫描" class="headerlink" title="4. 启用注解扫描"></a>4. 启用注解扫描</h3><p><strong>关键步骤</strong>：在 Spring Boot 主类上添加 <code>@ServletComponentScan</code> 注解：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@ServletComponentScan  // 扫描 @WebServlet, @WebFilter, @WebListener 注解</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="13-2-使用-Java-Config-配置（灵活配置）"><a href="#13-2-使用-Java-Config-配置（灵活配置）" class="headerlink" title="13.2 使用 Java Config 配置（灵活配置）"></a>13.2 使用 Java Config 配置（灵活配置）</h2><p>这种方式更适合需要动态配置的场景。</p><h3 id="1-先创建-Servlet、Filter、Listener-类"><a href="#1-先创建-Servlet、Filter、Listener-类" class="headerlink" title="1. 先创建 Servlet、Filter、Listener 类"></a>1. 先创建 Servlet、Filter、Listener 类</h3><p><strong>CustomServlet.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;Java Config 配置的 Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CustomFilter.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, </span></span><br><span class="line"><span class="params">                        FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Config Filter 执行前&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Config Filter 执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CustomListener.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Config Listener: 应用启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Config Listener: 应用关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用配置类注册"><a href="#2-使用配置类注册" class="headerlink" title="2. 使用配置类注册"></a>2. 使用配置类注册</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletListenerRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean&lt;CustomServlet&gt; <span class="title function_">customServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CustomServlet</span>(), </span><br><span class="line">            <span class="string">&quot;/java-config-servlet&quot;</span>  <span class="comment">// 映射路径</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 Filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;CustomFilter&gt; <span class="title function_">customFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        FilterRegistrationBean&lt;CustomFilter&gt; registrationBean = </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">CustomFilter</span>());</span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);  <span class="comment">// 过滤所有请求</span></span><br><span class="line">        registrationBean.setOrder(<span class="number">1</span>);  <span class="comment">// 设置过滤器执行顺序</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 Listener</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean&lt;CustomListener&gt; <span class="title function_">customListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">CustomListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-请求-Servlet-时，为什么不会到达拦截器"><a href="#13-3-请求-Servlet-时，为什么不会到达拦截器" class="headerlink" title="13.3 请求 Servlet 时，为什么不会到达拦截器"></a>13.3 请求 Servlet 时，为什么不会到达拦截器</h2><h3 id="1-请求处理流程的差异"><a href="#1-请求处理流程的差异" class="headerlink" title="1. 请求处理流程的差异"></a>1. 请求处理流程的差异</h3><p>首先，我们需要理解一个关键点：<strong>在Spring Boot应用中，实际上存在两套并行的请求处理机制</strong>。</p><p><strong>对于Spring MVC控制器（Controller）的请求：</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">HTTP</span> <span class="string">Request → Servlet Container → DispatcherServlet → 拦截器 → 控制器方法</span></span><br></pre></td></tr></table></figure><p><strong>对于直接映射的Servlet的请求：</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">HTTP</span> <span class="string">Request → Servlet Container → 自定义Servlet</span></span><br></pre></td></tr></table></figure><h3 id="2-详细原因分析"><a href="#2-详细原因分析" class="headerlink" title="2. 详细原因分析"></a>2. 详细原因分析</h3><h4 id="①-DispatcherServlet-的角色定位"><a href="#①-DispatcherServlet-的角色定位" class="headerlink" title="① DispatcherServlet 的角色定位"></a>① DispatcherServlet 的角色定位</h4><ul><li><code>DispatcherServlet</code> 是Spring MVC的<strong>前端控制器</strong>，它是所有Spring MVC请求的<strong>统一入口</strong></li><li>但它<strong>不是</strong>整个Web应用的唯一Servlet</li><li>在Spring Boot中，<code>DispatcherServlet</code> 默认被映射到根路径 <code>/</code>，但<strong>它也会处理更具体的路径匹配</strong></li></ul><h4 id="②-Servlet-容器的处理机制"><a href="#②-Servlet-容器的处理机制" class="headerlink" title="② Servlet 容器的处理机制"></a>② Servlet 容器的处理机制</h4><p>当请求到达时，Servlet容器会根据URL路径选择最精确匹配的Servlet：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情况1：请求匹配到自定义Servlet的路径</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/api/servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 请求直接到达这里，绕过DispatcherServlet</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2：请求匹配到Controller的路径  </span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/controller&quot;)</span> <span class="comment">// 请求会经过DispatcherServlet → 拦截器 → 这里</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;controller response&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-拦截器的工作范围"><a href="#③-拦截器的工作范围" class="headerlink" title="③ 拦截器的工作范围"></a>③ 拦截器的工作范围</h4><p>Spring的拦截器是<strong>绑定在<code>DispatcherServlet</code>的处理流程中</strong>的：</p><p>java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 这个模式只对DispatcherServlet处理的请求有效</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/api/servlet&quot;</span>); <span class="comment">// 排除Servlet路径实际上是不必要的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-验证实验"><a href="#3-验证实验" class="headerlink" title="3. 验证实验"></a>3. 验证实验</h3><p>我们可以通过代码来验证这个现象：</p><p><strong>自定义Servlet</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/direct-servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;✅ 直接访问Servlet - 请求到达&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;Response from Direct Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拦截器</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                           HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🔍 拦截器执行: &quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><ul><li><p>访问 <code>http://localhost:8080/direct-servlet</code>：</p><p>text</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✅ 直接访问Servlet - 请求到达</span><br><span class="line">// 控制台没有拦截器输出</span><br></pre></td></tr></table></figure></li><li><p>访问Controller路径时：</p><p>text</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🔍 拦截器执行: /api/controller</span><br><span class="line">✅ Controller处理请求</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4. 解决方案"></a>4. 解决方案</h3><p>如果希望Servlet请求也经过Spring的拦截器，有几种方式：</p><h4 id="方案1：使用Filter代替拦截器"><a href="#方案1：使用Filter代替拦截器" class="headerlink" title="方案1：使用Filter代替拦截器"></a>方案1：使用Filter代替拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, </span></span><br><span class="line"><span class="params">                        FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter处理: &quot;</span> + ((HttpServletRequest)request).getRequestURI());</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案2：通过DispatcherServlet转发到Servlet"><a href="#方案2：通过DispatcherServlet转发到Servlet" class="headerlink" title="方案2：通过DispatcherServlet转发到Servlet"></a>方案2：通过DispatcherServlet转发到Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouterController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/router-to-servlet&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">routeToServlet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 这样会经过拦截器</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/direct-servlet&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>食分速递项目</title>
      <link href="/2025/01/03/%E9%A3%9F%E5%88%86%E9%80%9F%E9%80%92%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/01/03/%E9%A3%9F%E5%88%86%E9%80%9F%E9%80%92%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一 环境搭建"></a>一 环境搭建</h2><p><img src="4.png"></p><h3 id="1-前端环境搭建"><a href="#1-前端环境搭建" class="headerlink" title="1.前端环境搭建"></a>1.前端环境搭建</h3><p><strong>前端工程基于 nginx 运行</strong></p><h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><p>在nginx安装的文件夹内，双击 nginx.exe 即可启动 nginx 服务，访问端口号为 80</p><h4 id="什么是nginx？"><a href="#什么是nginx？" class="headerlink" title="什么是nginx？"></a>什么是nginx？</h4><p>nginx 反向代理，就是将前端发送的<strong>动态请求</strong>由 nginx 转发到<strong>后端服务器</strong></p><ul><li><strong>位置</strong>：运行在你的<strong>服务器</strong>上。</li><li><strong>职责</strong>：<strong>接收、调度、分发</strong>请求。它是请求到达服务器后遇到的第一个“门卫”和“调度员”。它不处理核心业务逻辑（比如计算订单金额），但它决定把这个请求交给谁去处理，或者直接自己处理（比如直接返回一个图片文件）。</li></ul><h4 id="nginx-反向代理的好处"><a href="#nginx-反向代理的好处" class="headerlink" title="nginx 反向代理的好处"></a>nginx 反向代理的好处</h4><p>•提高访问速度</p><p>•进行负载均衡</p><p>•保证后端服务安全</p><p>所谓<strong>负载均衡</strong>,就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器</p><img src="5.png" style="zoom: 50%;"><h4 id="nginx-反向代理的配置方式"><a href="#nginx-反向代理的配置方式" class="headerlink" title="nginx 反向代理的配置方式"></a>nginx 反向代理的配置方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location /api/ &#123;</span><br><span class="line">            proxy_pass   http:<span class="comment">//localhost:8080/admin/;  #反向代理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**listen 80;**监听80端口</p><p><strong>逐行详解</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br></pre></td></tr></table></figure><ul><li><strong>定义一个虚拟服务器</strong>：Nginx 可以同时托管多个网站（虚拟主机），每个 <code>server {}</code> 块就是一个网站的配置。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 80;</span><br></pre></td></tr></table></figure><ul><li><strong>监听端口</strong>：这个虚拟服务器会监听来自 <strong>80 端口</strong> 的 HTTP 请求（80 是 HTTP 协议的默认端口）。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server_name localhost;</span><br></pre></td></tr></table></figure><ul><li><strong>服务器名称</strong>：这个虚拟服务器对应的域名是 <code>localhost</code>。当你在浏览器里访问 <code>http://localhost</code> 时，就会由这个 server 块来处理。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api/ &#123;</span><br></pre></td></tr></table></figure><ul><li><strong>位置块</strong>：这是最核心的配置。它定义了一个 <strong>URL 路径匹配规则</strong>。所有以 <code>/api/</code> 开头的请求（例如 <code>http://localhost/api/employee/login</code>），都会进入这个 <code>location</code> 块内的逻辑。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_pass http://localhost:8080/admin/;</span><br></pre></td></tr></table></figure><ul><li><strong>反向代理指令</strong>：这是实现转发的关键命令。<ul><li>它告诉 Nginx，对于匹配到的请求，不要自己处理，而是将其 <strong>转发（代理）</strong> 到指定的地址。</li><li><code>http://localhost:8080/admin/</code> 是 <strong>目标地址</strong>。</li></ul></li></ul><img src="6.png" style="zoom:80%;"><h4 id="nginx-负载均衡的配置方式"><a href="#nginx-负载均衡的配置方式" class="headerlink" title="nginx 负载均衡的配置方式"></a>nginx 负载均衡的配置方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">server <span class="number">192.168</span><span class="number">.100</span><span class="number">.128</span>:<span class="number">8080</span>;</span><br><span class="line">server <span class="number">192.168</span><span class="number">.100</span><span class="number">.129</span>:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location /api/ &#123;</span><br><span class="line">            proxy_pass   http:<span class="comment">//webservers/admin/;  #负载均衡</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1. <code>upstream</code> 块 - 定义服务器池（后端集群）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream webservers &#123;</span><br><span class="line">    server 192.168.100.128:8080;</span><br><span class="line">    server 192.168.100.129:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>upstream webservers {}</code></strong>：定义一个名为 <code>webservers</code> 的上游服务器组（也叫集群或服务器池）。</li><li><strong><code>server 192.168.100.128:8080;</code></strong>：在池中添加第一台后端服务器，IP 是 <code>192.168.100.128</code>，端口是 <code>8080</code>。</li><li><strong><code>server 192.168.100.129:8080;</code></strong>：在池中添加第二台后端服务器，IP 是 <code>192.168.100.129</code>，端口是 <code>8080</code>。</li></ul><p><strong>Nginx 默认的负载均衡策略是轮询</strong>，也就是说，第一个请求发给 128，第二个请求发给 129，第三个又发给 128，以此类推。</p><p><strong>2. <code>location</code> 块 - 流量分发</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api/ &#123;</span><br><span class="line">    proxy_pass http://webservers/admin/;  #负载均衡</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关键变化在这里：<code>proxy_pass</code> 的目标不再是单一的服务器地址，而是指向了我们定义的 upstream 池 <code>http://webservers</code>。</li><li>这意味着，所有匹配到的请求都会被分发到 <code>webservers</code> 池中的服务器上。</li></ul><p><img src="7.png"></p><h3 id="2-后端环境搭建"><a href="#2-后端环境搭建" class="headerlink" title="2.后端环境搭建"></a>2.后端环境搭建</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>后端工程基于 maven 进行项目构建，并且进行分模块开发</p><p><img src="8.png"></p><p><img src="9.png"></p><p><strong>sky-common</strong> 子模块中存放的是一些公共类，可以供其他模块使用</p><p><strong>sky-pojo</strong> 子模块中存放的是一些 entity、DTO、VO</p><img src="10.png" style="zoom: 67%;"><p><strong>sky-server</strong> 子模块中存放的是 配置文件、配置类、拦截器、controller、service、mapper、启动类等</p><h4 id="使用Git进行版本控制"><a href="#使用Git进行版本控制" class="headerlink" title="使用Git进行版本控制"></a>使用Git进行版本控制</h4><p>.gitingore文件是git的相关文件，目的是忽略推送到服务器的文件或文件夹</p><p><img src="11.png"></p><p>还没有被git版本控制的项目可以在idea配置，具体操作是上方操作菜单点击VSC，点击创建git仓库，最后在弹出窗中选择项目</p><img src="12.png" style="zoom:50%;"><p>之后就可以测试提交，注意第一次提交会提交到本地仓库</p><p>推送就是要推送到远程仓库，第一次会提示你配置远程仓库信息</p><p><strong>核心概念总结</strong></p><table><thead><tr><th align="left">动作</th><th align="left">作用域</th><th align="left">描述</th><th align="left">影响</th><th align="left">类比</th></tr></thead><tbody><tr><td align="left"><strong><code>commit</code></strong></td><td align="left"><strong>本地</strong></td><td align="left">将<strong>暂存区</strong>的快照永久记录到<strong>本地仓库</strong>的历史中。</td><td align="left">只更新你自己电脑上的 Git 仓库。团队其他成员看不到你的这次提交。</td><td align="left"><strong>保存到本地硬盘</strong></td></tr><tr><td align="left"><strong><code>push</code></strong></td><td align="left"><strong>本地 → 远程</strong></td><td align="left">将<strong>本地仓库</strong>中的新提交记录上传到<strong>远程仓库</strong>（如 GitHub, Gitee）。</td><td align="left">更新共享的远程仓库，团队其他成员可以通过 <code>pull</code> 获取你的更新。</td><td align="left"><strong>上传到网盘&#x2F;服务器</strong></td></tr></tbody></table><p><strong>工作流程图示</strong></p><p>一个标准的 Git 协作流程如下：</p><p><strong>你的电脑</strong><br><code>工作区</code> –(<code>git add</code>)–&gt; <code>暂存区</code> –(<code>git commit</code>)–&gt; <code>本地仓库</code> –(<code>git push</code>)–&gt; <strong>远程仓库</strong></p><p><strong>同事的电脑拉远程仓库代码</strong><br><strong>远程仓库</strong> –(<code>git fetch</code>)–&gt; <strong>本地仓库</strong> –(<code>git checkout</code>)–&gt; <strong>工作区</strong></p><ul><li><strong>合并（Merge）</strong>：<strong>“邀请别人的成果加入我的版本”</strong><ul><li>操作：我站在原地不动，把别人完成的新内容<strong>拉过来</strong>，和我当前的内容<strong>融合</strong>在一起。如果内容有重叠（冲突），我需要手动调解。</li><li>结果：历史记录会留下一次“合并”的痕迹，标明两条线在这里汇合了。</li></ul></li><li><strong>变基（Rebase）</strong>：<strong>“把我的工作挪到最新的成果之上”</strong><ul><li>操作：我先把我的工作暂时<strong>放到一边</strong>，然后<strong>把别人的新成果作为新的基础</strong>，最后我再把我的工作<strong>重新实施</strong>在这个崭新的、最新的基础之上。</li><li>结果：历史记录看起来就像是我从一开始就是在最新的代码基础上进行工作的，一条直线，非常整洁。</li></ul></li></ul><p><strong>比喻</strong></p><p><strong>合并</strong>：你正在拼A部分，同事拼好了B部分。你直接把同事拼好的B部分拿过来，和你的A部分对接在一起。如果对接不上（冲突），你就需要调整一下接口。</p><p><strong>变基</strong>：你发现同事不仅拼好了B部分，还把你们共同的底座C也升级了。于是，你先把你的A部分拆下来，把升级后的新底座C换上去，然后再把你的A部分重新拼到新底座C上。</p><h3 id="3-swagger接口文档"><a href="#3-swagger接口文档" class="headerlink" title="3.swagger接口文档"></a>3.swagger接口文档</h3><h4 id="Knife4j使用方式"><a href="#Knife4j使用方式" class="headerlink" title="Knife4j使用方式"></a>Knife4j使用方式</h4><p><a href="https://doc.xiaominfo.com/">K</a><a href="https://doc.xiaominfo.com/">nife4j</a><a href="https://doc.xiaominfo.com/"> </a>是为Java MVC框架集成Swagger生成Api文档的增强解决方案</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>WebMvcConfiguration</strong>文件配置</p><p>1.在配置类中加入 knife4j 相关配置</p><p>2.设置静态资源映射，否则接口文档页面无法访问</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Api</td><td>用在类上，例如Controller，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在类上，例如entity、DTO、VO</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述属性信息</td></tr><tr><td>@ApiOperation</td><td>用在方法上，例如Controller的方法，说明方法的用途、作用</td></tr></tbody></table><h2 id="二-后台管理模块开发"><a href="#二-后台管理模块开发" class="headerlink" title="二 后台管理模块开发"></a>二 后台管理模块开发</h2><h3 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h3><h4 id="1-新增员工"><a href="#1-新增员工" class="headerlink" title="1.新增员工"></a>1.新增员工</h4><p><strong>业务代码</strong></p><p><strong>注意</strong>：当前端提交的数据和实体类中对应的属性差别较大时（也就是实体类中会有多余的属性），建议使用DTO来封装（DTO里的数据字段和前端提交的数据字段都能对应上）。</p><p>在EmployeeController中新建一个方法save，传入的参数是employeeDTO</p><ol><li>首先编写如下代码，是网页端读入的字段数据，在这里传入employeeService对象。有2点注意事项：①前端传入的数据是json格式，要用@RequestBody注解转换为对象。②为了方便调试加一个log.info，花括号{}的内容在后面会被替换为employeeDTO的值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span><span class="comment">//post方式请求</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;新增员工&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123; </span><br><span class="line">      log.info(<span class="string">&quot;新增员工：&#123;&#125;&quot;</span>,employeeDTO);</span><br><span class="line">      employeeService.save(employeeDTO);</span><br><span class="line">      <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在EmployeeService中编写如下代码，思路是：先创建一个emloyee实体类，然后把DTO的数据拷贝到实体类中，然后对剩下的属性进行赋值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(EmployeeDTO employeeDTO)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO,employee);<span class="comment">//对象属性拷贝</span></span><br><span class="line">    employee.setStatus(StatusConstant.ENABLE);</span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));</span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setCreateUser(<span class="number">10L</span>); <span class="comment">//TODO 后续需要改为当前登录用户的id</span></span><br><span class="line">    employee.setUpdateUser(<span class="number">10L</span>);</span><br><span class="line">    employeeMapper.insert(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有2个注意事项：①可以用BeanUtils工具类中的copyProperties方法来对对象进行拷贝，前提是对象的属性有一部分是相同的。②不应该直接用数字数字，否则会是硬编码，应该使用StatusConstant常量类。 </p><ol start="3"><li>在EmployeeMapper中编写SQL语句，来将数据插入数据库：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into employee(name,username,password,phone,sex,id_number,status,create_time,update_time,create_user,update_user)&quot;+</span></span><br><span class="line"><span class="meta">    &quot;values&quot;+</span></span><br><span class="line"><span class="meta">    &quot;(#(name),#(username),#(password),#(phone),#(sex),#(idNumber),#(status),#(createTime),#(updateTime),#(createUser),#(updateUser))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>为了使java属性字段对应数据库字段，这里需要开启Mybatis的驼峰命名，需要在配置文件application.yml文件中进行配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#mapper配置文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.sky.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#开启驼峰命名</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>问题一</strong></p><p>在开发阶段，前端界面可能没有开发好，所以不能进行前后端联调测试，只能用接口文档进行测试。</p><p>下面进行测试出现401，是因为有拦截器进行了拦截，原因是缺少token令牌：</p><p><img src="13.png"></p><p>所以我们先在员工登录页面获取一个令牌：</p><p><img src="14.png"></p><p>全局参数设置-输入参数名称+参数值，然后关闭页面：</p><p><img src="15.png"></p><p>然后带着参数值发送：</p><p><img src="16.png"></p><p>最后可以在数据库查看已经新增成功</p><p>问题二</p><p>录入的用户名已存在，抛出异常后没有处理，没处理的话，控制台会抛出错误P19。（因为在数据库里面设计的用户名字段是唯一）</p><p>用全局的异常处理器sky-server&#x2F;handler&#x2F;GlobalExceptionHandler，创建exceptionHandler方法，在方法里添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">        <span class="keyword">if</span>(message.contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = message.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> split[<span class="number">2</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> username + MessageConstant.ALREADY_EXISTS;</span><br><span class="line">            <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的是输出：xxx已经存在的提示。核心思想是：提取错误那段话的第3个词，然后拼接后输出。</p><p>效果如图：</p><p><img src="17.png"></p><p><strong>问题三</strong></p><p>新增员工时，创建人id和修改人id设置为了固定值P20。程序中将创建者和更新者的id写死为10：</p><p><img src="18.png"></p><p><strong>JWT认证机制</strong>：用户发起请求发送用户名和密码，后端进行校验，如果验证通过就生成JWT Token，将Token返回给客户端，客户端会保存Token，在后续请求的请求头中都会携带JWT Token，请求会被拦截器拦截到，会检查Token，如果通过就会展示数据，如果没有通过就会返回错误信息。</p><p><img src="19.png"></p><p>在拦截请求验证的时候可以获得JWT令牌</p><p>问题是：在解析出登录员工id后如何传递给Service的save方法？</p><p>答：通过ThreadLocal，它是Thread的局部变量，为每个线程提供单独一份的存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，在线程外则不能访问。</p><p>可以通过在controller、service和拦截器中输出线程的id来看是否单次请求是同一个线程，经实验验证是同一个线程。 </p><p><code>System.out.println(&quot;当前线程的id:&quot;+Thread.currentThread().getId());</code></p><p><img src="20.png"></p><p>在sky-common&#x2F;src&#x2F;main&#x2F;java&#x2F;context&#x2F;BaseContext下封装了ThreadLocal的操作。 </p><p>先在拦截器JwtTokenAdminInterceptor里将ID存到存储空间里（set），因为每次请求线程不变，所以存储空间的值不会被更改，因此可以在EmployeeServiceImpl类中取到该值（get），进而输出，很妙！</p><p><img src="21.png"></p><h4 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2.分页查询"></a>2.分页查询</h4><p>下面是PageResult和EmployeePageQueryDTO的实体类定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装分页查询结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total; <span class="comment">//总记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List records; <span class="comment">//当前页数据集合</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeePageQueryDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> page;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每页显示记录数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在EmployeeService接口中编写方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">PageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeServiceImpl中实现方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">PageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123; <span class="comment">//DTO已将页码和每页记录数传入，因此可以算出</span></span><br><span class="line">        <span class="comment">// select * from employee limit 0,10，通过Limit来控制</span></span><br><span class="line">    PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize()); <span class="comment">//页码和每页记录数传入</span></span><br><span class="line">        <span class="comment">//Page是固定的，Employee是每个用户的信息</span></span><br><span class="line">        Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//要将page对象处理为PageResult对象</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> page.getTotal();</span><br><span class="line">        List&lt;Employee&gt; result = page.getResult();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total,result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>PageHelper的startPage方法可以通过传入的参数自动设置Limit，传入的是页码和每页的记录数，好处是：字符串的拼接不用自己做。底层实现是：它会给ThreadLocal设置上述参数，然后在执行SQL语句时会自动被取出，然后拼接成Limit。</p><p>Page是PageHelper插件定义的一个泛型类，是一个固定的返回类型。</p><p>pagehelper可以简化分页代码的编写：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在EmployeeMapper中编写方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;Employee&gt; <span class="title function_">pageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在application.yml配置文件中扫描了EmployeeMapper.xml配置文件：</p><p><img src="23.png"></p><p>在EmployeeMapper.xml中编写SQL语句，limit不用我们手写，pagehelper会自动帮我们追加拼接，order by是排序条件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by create_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里是模糊查询，用concat将name与%进行拼接，%的意思是匹配任意字符串&#x2F;字符。</p><p>标签的id是mapper中的对应方法名。resultType是传入的参数类型。</p><p><strong>代码完善，解决时间显示问题</strong></p><p>方法一：在Employee实体类中的LocalDateTime属性上加上@JsonFormat注解，格式化时间。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure><p>方法二：拓展Spring MVC的消息转换器，统一对后端返回给前端的数据进行转换处理：（推荐）</p><p>在sky-server下的com&#x2F;sky&#x2F;config&#x2F;WebMvcConfiguration下创建：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//托转Spring MVC框架的消息转换器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">//先创建一个消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span></span><br><span class="line">        converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//消息转换器还没交给框架，需要把消息转换器加到容器里</span></span><br><span class="line">        converters.add(<span class="number">0</span>,converter); <span class="comment">//容器自带消息转换器，默认新加的排在末尾，0表示是首位，自己加的消息转换器排在首位</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在JacksonObjectMapper里面有关于日期时间的序列化和反序列化器。</p><h4 id="3-启禁账号"><a href="#3-启禁账号" class="headerlink" title="3.启禁账号"></a>3.启禁账号</h4><p>{status}是路径参数，1为启用，0为禁用。地址栏传参传入员工id。</p><p>操作：传入status和id，将某一id的status从0改为1或从1改为0。</p><p>在EmployeeController中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;启用禁用员工账号&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status,Long id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;启用禁用员工账号：&#123;&#125;,&#123;&#125;&quot;</span>,status,id);</span><br><span class="line">        employeeService.startOrStop(status,id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取的是路径参数，加注解@PathVariable，如果和路径参数不同名，就要加括号双引号指明取的是哪个路径参数@PathVariable(“status”) ；如果同名，就不用加。</p><p>在EmployeeService接口中编入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启用禁用员工账号</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeServiceImpl类中写入如下代码，注意下面的第2种书写方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//update employee set status = ? where id = ?</span></span><br><span class="line">       <span class="comment">/* Employee employee = new Employee();</span></span><br><span class="line"><span class="comment">        employee.setStatus(status);</span></span><br><span class="line"><span class="comment">        employee.setId(id); */</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> Employee.builder()</span><br><span class="line">                .status(status)</span><br><span class="line">                .id(id)</span><br><span class="line">                .build();</span><br><span class="line">        employeeMapper.update(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在EmployeeMapper中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeMapper.xml中写入如下代码，下面这个代码对全字段都可以进行修改，所以不仅仅适用于对status的修改：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;/select&gt;</span><br><span class="line">    &lt;update id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;Employee&quot;</span>&gt;</span><br><span class="line">        update employee</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt; name = #&#123;name&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;username != null&quot;</span>&gt; username = #&#123;username&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;password != null&quot;</span>&gt; password = #&#123;password&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;phone != null&quot;</span>&gt; phone = #&#123;phone&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;sex != null&quot;</span>&gt; sex = #&#123;sex&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;idNumber != null&quot;</span>&gt; id_Number = #&#123;idNumber&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateTime != null&quot;</span>&gt; update_Time = #&#123;updateTime&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateUser != null&quot;</span>&gt; update_User = #&#123;updateUser&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt; status = #&#123;status&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></table></figure><h4 id="4-编辑员工"><a href="#4-编辑员工" class="headerlink" title="4.编辑员工"></a>4.编辑员工</h4><p>①回显数据操作：用查询语句把Employee对象查出来，然后显示。</p><p>EmployeeController编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询员工信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeService接口编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询员工</span></span><br><span class="line">Employee <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>EmployeeServiceImpl实现类编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.getById(id);</span><br><span class="line">        employee.setPassword(<span class="string">&quot;****&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> employee;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>EmployeeMapper中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询员工信息</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Employee <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>②接收提交的数据：调用之前mapper的update方法进行更新。</p><p>EmployeeController编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;编辑员工信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123;</span><br><span class="line">     log.info(<span class="string">&quot;编辑员工信息：&#123;&#125;&quot;</span>,employeeDTO);</span><br><span class="line">     employeeService.update(employeeDTO);</span><br><span class="line">     <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeService接口编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编辑员工信息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span>;</span><br></pre></td></tr></table></figure><p>EmployeeServiceImpl实现类编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO,employee); <span class="comment">//属性拷贝</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line">    employeeMapper.update(employee); <span class="comment">//需要传入Employee参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeMapper中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><h4 id="5-字段填充"><a href="#5-字段填充" class="headerlink" title="5.字段填充"></a>5.字段填充</h4><p>在多个业务表中都有公共字段，如create_time、create_user（insert时用到）；update_time，update_user（insert和update时用到）这些。</p><p>插入数据的时候需要为这些字段赋值，会有大量重复的冗余set方法代码，后期如果表结构发生变化，代码需要跟着修改，此时就不方便修改（如果后期进行修改要重复一个个进行修改）。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th><th><strong>操作类型</strong></th></tr></thead><tbody><tr><td>1</td><td>create_time</td><td>创建时间</td><td>datetime</td><td>insert</td></tr><tr><td>2</td><td>create_user</td><td>创建人id</td><td>bigint</td><td>insert</td></tr><tr><td>3</td><td>update_time</td><td>修改时间</td><td>datetime</td><td>insert、update</td></tr><tr><td>4</td><td>update_user</td><td>修改人id</td><td>bigint</td><td>insert、update</td></tr></tbody></table><p>实现思路：自定义注解AutoFill，用于标识需要进行公共字段自动填充的方法。然后自定义切面类AutoFillAspect，统一拦截加入了AutoFill注解的方法，通过反射为公共字段赋值。在Mapper的方法上加入AutoFill注解。</p><p>技术点：枚举，注解，AOP，反射。</p><p>在com.sky下创建annotation包，创造一个AutoFill的Annotation注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义注解，用于标识某个方法需要进行功能字段自动填充处理</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line">    <span class="comment">//数据库操作类型：UPDATE INSERT</span></span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target注解指定加上什么上面，Retention注解指定什么时候用，</p><p>在com.sky下创建aspect包，创建类AutoFillAspect，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义切面，实现公共字段自动填充处理逻辑</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line">    <span class="comment">//切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//前置通知，在通知中进行公共字段的赋值</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFill</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行公共字段自动填充...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切入点：对哪些类的哪些方法进行拦截。@Pointcut里面写的是对哪些方法进行拦截，要满足2点：①必须是mapper下的所有类的方法，②还要有AutoFill这个注解。</p><p>通知：前置通知，后置通知，环绕通知，异常通知。</p><p>然后在sky-server下的mapper中的EmployeeMapper类里，insert上加入@AutoFill(value&#x3D; OperationType.INSERT)注解，update上加入@AutoFill(value&#x3D; OperationType.UPDATE)注解。</p><p>在sky-server的com.sky下的aspect的AutoFillAspect里的log.info(“开始进行公共字段自动填充…”);下添加如下代码：</p><p>1.获取到当前被拦截的方法上的数据库操作类型（比如是Insert还是Update，不同的类型需要给不同的参数赋值）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();<span class="comment">//通过连接点对象来获取签名，向下转型为MethodSignature</span></span><br><span class="line"><span class="type">AutoFill</span> <span class="variable">autoFill</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);<span class="comment">//获得方法上的注解对象</span></span><br><span class="line"><span class="type">OperationType</span> <span class="variable">operationType</span> <span class="operator">=</span> autoFill.value();<span class="comment">//获得数据库操作类型（Insert or Update）</span></span><br></pre></td></tr></table></figure><p>2.获取到当前被拦截的方法的参数–实体对象（比如传入的参数是员工还是菜品还是其它的）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] args = joinPoint.getArgs(); <span class="comment">//获得了方法所有的参数</span></span><br><span class="line"><span class="keyword">if</span>(args == <span class="literal">null</span> || args.length==<span class="number">0</span> )&#123; <span class="comment">//没有参数</span></span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> args[<span class="number">0</span>];<span class="comment">//现在约定实体放在第1个位置,传入实体可能不同所以用Object</span></span><br></pre></td></tr></table></figure><p>3.准备赋值的数据（给公共字段赋值的数据，比如时间就是系统时间，用户ID是从ThreadLocal获取）</p><p>4.根据当前不同的操作类型，为对应的属性通过反射来赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"><span class="keyword">if</span>(operationType == OperationType.INSERT)&#123;</span><br><span class="line">    <span class="comment">//为4个公共字段赋值</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setCreateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class); <span class="comment">//把方法名全部换成常量类，防止写错</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setCreateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">        <span class="comment">//4.根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class="line">        setCreateTime.invoke(entity,now);</span><br><span class="line">        setCreateUser.invoke(entity,currentId);</span><br><span class="line">        setUpdateTime.invoke(entity,now);</span><br><span class="line">        setUpdateUser.invoke(entity,currentId);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(operationType == OperationType.UPDATE)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//为2个公共字段赋值</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">        <span class="comment">//4.根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class="line">        setUpdateTime.invoke(entity, now);</span><br><span class="line">        setUpdateUser.invoke(entity, currentId);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后要在mapper层的CategoryMapper和EmployeeMapper中的Insert和Update方法上加上@AutoFill注解，注解内容用OperationType.INSERT或OperationType.Update。</p><p>最后把service层的那些手动赋值删除掉或者注释掉。</p><h3 id="菜品管理"><a href="#菜品管理" class="headerlink" title="菜品管理"></a>菜品管理</h3><h4 id="1-新增菜品"><a href="#1-新增菜品" class="headerlink" title="1.新增菜品"></a>1.新增菜品</h4><p>在controller下创建一个CommonController，写入如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/common&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;通用接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sky.upload.local&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadPath;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;文件上传&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;文件上传：&#123;&#125;&quot;</span>, file);</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;上传文件不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理相对路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> Paths.get(uploadPath).toAbsolutePath().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建目录</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(absolutePath);</span><br><span class="line">            <span class="keyword">if</span> (!directory.exists()) &#123;</span><br><span class="line">                directory.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成唯一文件名</span></span><br><span class="line">            <span class="comment">// 获取源文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 获取文件后缀</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            <span class="comment">// 生成文件名(当前时间戳+uuid+后缀)</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> +</span><br><span class="line">                    UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + extension;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> absolutePath + File.separator + fileName;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;文件上传成功，保存路径：&#123;&#125;&quot;</span>, filePath);</span><br><span class="line">            <span class="comment">// 返回完整路径</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;文件上传失败&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Result.error(MessageConstant.UPLOAD_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在sky-server的controller下创建DishController：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/dish&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;菜品相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增菜品：&#123;&#125;&quot;</span>,dishDTO);</span><br><span class="line">        dishService.saveWithFlavor(dishDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下创建DishService：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="comment">//新增菜品和对应的口味</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDTO dishDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service的impl下创建DishServiceImpl：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorMapper dishFlavorMapper;</span><br><span class="line">    <span class="comment">//新增菜品对应的口味</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDTO dishDTO)</span> &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        BeanUtils.copyProperties(dishDTO,dish);</span><br><span class="line">        <span class="comment">//想菜品表插入1条数据</span></span><br><span class="line">        dishMapper.insert(dish);</span><br><span class="line">        <span class="comment">//获取insert语句生成的主键值</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish.getId();</span><br><span class="line">        <span class="comment">//向口味表插入n条数据</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();</span><br><span class="line">        <span class="keyword">if</span>(flavors != <span class="literal">null</span> &amp;&amp; flavors.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            flavors.forEach(dishFlavor -&gt; &#123;</span><br><span class="line">                dishFlavor.setDishId(dishId);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//向口味表插入n条数据</span></span><br><span class="line">            dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个菜品有多个口味数据，向菜品表插入1条数据，向口味表插入n条数据。</strong></p><p><strong>因为涉及到多个表，所以添加@Transactional的注解（需要在启动类上添加@EnableTransactionManagement注解）</strong></p><p>在sky-server的mapper创建DishMapper类，写入insert方法的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据分类id查询菜品数量</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from dish where category_id = #&#123;categoryId&#125;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">countByCategoryId</span><span class="params">(Long categoryId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Dish dish)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下创建DishMapper.xml文件，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.DishMapper&quot;</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insert&quot;</span>&gt;</span><br><span class="line">        insert into <span class="title function_">dish</span><span class="params">(name,category_id,price,image,description,create_time,update_time,create_user,update_user,status)</span></span><br><span class="line">        values (#&#123;name&#125;,#&#123;categoryId&#125;,#&#123;price&#125;,#&#123;image&#125;,#&#123;description&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;,#&#123;status&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper创建DishFlavorMapper类，写入insert方法的代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorMapper</span> &#123;</span><br><span class="line">    <span class="meta">@AutoFill(value= OperationType.INSERT)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;DishFlavor&gt; flavors)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下创建DishFlavorMapper.xml文件，写入如下代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.DishFlavorMapper&quot;</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insertBatch&quot;</span>&gt;</span><br><span class="line">        insert into <span class="title function_">dish_flavor</span> <span class="params">(dish_id,name,value)</span> VALUES</span><br><span class="line">        &lt;foreach collection=<span class="string">&quot;flavors&quot;</span> item=<span class="string">&quot;df&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">            (#&#123;df.dishId&#125;,#&#123;df.name&#125;,#&#123;df.value&#125;)</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>在DishMapper和DishFlavorMapper中的insert方法上添加@AutoFill(value&#x3D; OperationType.INSERT)注解。</p><h4 id="2-分页查询-1"><a href="#2-分页查询-1" class="headerlink" title="2.分页查询"></a>2.分页查询</h4><p>在sky-server的controller中已有的DishController类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;菜品分页查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;菜品分页查询：&#123;&#125;&quot;</span>,dishPageQueryDTO);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> dishService.pageQuery(dishPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>&#123;</span><br><span class="line">    PageHelper.startPage(dishPageQueryDTO.getPage(),dishPageQueryDTO.getPageSize());</span><br><span class="line">    Page&lt;DishVO&gt; page = dishMapper.pageQuery(dishPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(),page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中已有的DishMapper类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;DishVO&gt; <span class="title function_">pageQuery</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下已有的DishMapper.xml中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;pageQuery&quot;</span> resultType=<span class="string">&quot;com.sky.vo.DishVO&quot;</span>&gt;</span><br><span class="line">    select d.* , c.name as categoryName from dish d left outer join category c on d.category_id = c.id</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;</span><br><span class="line">            and d.name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span><br><span class="line">            and d.category_id = #&#123;categoryId&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">            and d.status = #&#123;status&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-删除菜品"><a href="#3-删除菜品" class="headerlink" title="3.删除菜品"></a>3.删除菜品</h4><p>批量删除是在地址栏写入要删除菜品的集合。</p><p>在sky-server的controller中已有的DishController类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;菜品批量删除&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;菜品批量删除：&#123;&#125;&quot;</span>,ids);</span><br><span class="line">        dishService.deleteBatch(ids);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要加一个注解@RequestParam，可以将地址栏中多个数字参数提取出来然后变成List集合。 </p><p>在sky-server的service中已有的DishService类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    <span class="comment">//不能删除：存在起售中的菜品</span></span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span>(dish.getStatus()== StatusConstant.ENABLE)&#123; <span class="comment">//状态为1起售中</span></span><br><span class="line">            <span class="comment">//当前菜品处于起售中，不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不能删除：菜品被套餐关联</span></span><br><span class="line">    List&lt;Long&gt; setmealIds = setmealDishMapper.getSetmealIdsByDishIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(setmealIds != <span class="literal">null</span> &amp;&amp; setmealIds.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//当前菜品被套餐关联了，不能删除</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除菜品表中的菜品数据</span></span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        dishMapper.deleteById(id);</span><br><span class="line">        <span class="comment">//删除口味数据</span></span><br><span class="line">        dishFlavorMapper.deleteByDishId(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量删除用foreach循环来遍历，删除被套餐关联的SQL语句比较复杂。 </p><p>删除菜品表中的菜品数据这里，每次循环需要执行2次SQL，可能会出现性能问题。应该采用如下的SQL形式：delete from dish where id in (?,?,?)。</p><p>在sky-server的mapper中已有的DishMapper类中添加如下代码（负责删除菜品）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据主键删除菜品</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from dish where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中创建DishFlavorMapper类中添加如下代码（负责删除关联的口味数据）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据菜品id删除对应的口味数据</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from dish_flavor where dish_id = #&#123;dishId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByDishId</span><span class="params">(Long dishId)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中创建SetmealDishMapper类中添加如下代码（负责查看是否有关联的套餐）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据菜品id查询对应的套餐id</span></span><br><span class="line">    <span class="comment">//select setmeal_id from setmeal_dish where dish_id in (1,2,3,4)</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">getSetmealIdsByDishIds</span><span class="params">(List&lt;Long&gt; dishIds)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（上步SQL具体实现）在sky-server的resources的mapper中创建SetmealDishMapper类中添加如下代码（思路是去查询套餐表，看套餐菜品id是否和当前传入的id相同）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.SetmealDishMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getSetmealIdsByDishIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select setmeal_id from setmeal_dish where dish_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;dishIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;dishId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;dishId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里比较巧妙的是foreach循环，collection是集合，item是一个个项，separator是分割符号，open是开始符号，close是结束符号。每个元素用逗号分割，然后用大括号括起来。</p><h4 id="4-修改菜品"><a href="#4-修改菜品" class="headerlink" title="4.修改菜品"></a>4.修改菜品</h4><p>在sky-server的controller中已有的DishController类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;DishVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询菜品：&#123;&#125;&quot;</span>,id);</span><br><span class="line">    <span class="type">DishVO</span> <span class="variable">dishVO</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(dishVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品</span></span><br><span class="line">DishVO <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品和对应的口味数据</span></span><br><span class="line"><span class="keyword">public</span> DishVO <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询菜品数据</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">    <span class="comment">//根据菜品id查询口味数据</span></span><br><span class="line">    List&lt;DishFlavor&gt; dishFlavors = dishFlavorMapper.getByDishId(id);</span><br><span class="line">    <span class="comment">//将查询到的数据封装到VO</span></span><br><span class="line">    <span class="type">DishVO</span> <span class="variable">dishVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishVO</span>() ;</span><br><span class="line">    BeanUtils.copyProperties(dish,dishVO);</span><br><span class="line">    dishVO.setFlavors(dishFlavors);</span><br><span class="line">    <span class="keyword">return</span> dishVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中已有的dishFlavorMapper类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from dish_flavor where dish_id=#&#123;dishId&#125;&quot;)</span></span><br><span class="line">List&lt;DishFlavor&gt; <span class="title function_">getByDishId</span><span class="params">(Long dishId)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的controller中已有的DishController类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改菜品</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改菜品；&#123;&#125;&quot;</span>,dishDTO);</span><br><span class="line">    dishService.updateWithFlavor(dishDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id修改菜品基本信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDTO dishDTO)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id修改菜品基本信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDTO dishDTO)</span>&#123;</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">    BeanUtils.copyProperties(dishDTO,dish);</span><br><span class="line">    <span class="comment">//修改菜品表基本信息</span></span><br><span class="line">    dishMapper.update(dish);</span><br><span class="line">    <span class="comment">//删除原有的口味数据</span></span><br><span class="line">    dishFlavorMapper.deleteByDishId(dishDTO.getId());</span><br><span class="line">    <span class="comment">//重新插入口味数据</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();</span><br><span class="line">    <span class="keyword">if</span>(flavors != <span class="literal">null</span> &amp;&amp; flavors.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        flavors.forEach(dishFlavor -&gt;&#123;</span><br><span class="line">            dishFlavor.setDishId(dishDTO.getId());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>口味的修改比较麻烦，有可能是删除了再新增，有可能不删除，有可能没删除直接新增。</p><p>处理方法：直接把菜品原先关联的口味数据删掉，然后再按照当前传来的口味重新插入数据。</p><p>传入DTO不合适，因为DTO里有口味数据，而修改菜品不应该包含口味，所以应该只传入一个Dish数据。</p><p>  在sky-server的mapper中已有的dishFlavorMapper类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id动态修改菜品</span></span><br><span class="line"><span class="meta">@AutoFill(value=OperationType.UPDATE)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper中已有的dishFlavorMapper.xml类中添加代码如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update dish</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span>category_id = #&#123;categoryId&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;price != null&quot;</span>&gt;</span>price = #&#123;price&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span>image = #&#123;image&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null&quot;</span>&gt;</span>description = #&#123;description&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span>update_Time = #&#123;updateTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateUser != null&quot;</span>&gt;</span>update_User = #&#123;updateUser&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里用的是动态SQL。</p><h3 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h3><h4 id="1-新增套餐"><a href="#1-新增套餐" class="headerlink" title="1. 新增套餐"></a>1. 新增套餐</h4><p>1.2.1 DishController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span>&#123;</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(categoryId);</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.2 DishService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span>;</span><br></pre></td></tr></table></figure><p>1.2.3 DishServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> Dish.builder()</span><br><span class="line">        .categoryId(categoryId)</span><br><span class="line">        .status(StatusConstant.ENABLE)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> dishMapper.list(dish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.4 DishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态条件查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure><p>1.2.5 DishMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dish&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Dish&quot;</span>&gt;</span></span><br><span class="line">    select * from dish</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.2.6 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;套餐相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增套餐&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">        setmealService.saveWithDish(setmealDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.7 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDTO setmealDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.8 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐业务实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishMapper setmealDishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">        BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向套餐表插入数据</span></span><br><span class="line">        setmealMapper.insert(setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取生成的套餐id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmeal.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">        setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class="line">            setmealDish.setSetmealId(setmealId);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存套餐和菜品的关联关系</span></span><br><span class="line">        setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.9 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@AutoFill(OperationType.INSERT)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Setmeal setmeal)</span>;</span><br></pre></td></tr></table></figure><p>1.2.10 SetmealMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Setmeal&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into setmeal</span><br><span class="line">    (category_id, name, price, status, description, image, create_time, update_time, create_user, update_user)</span><br><span class="line">    values (#&#123;categoryId&#125;, #&#123;name&#125;, #&#123;price&#125;, #&#123;status&#125;, #&#123;description&#125;, #&#123;image&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;,</span><br><span class="line">    #&#123;createUser&#125;, #&#123;updateUser&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.2.11 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDishes</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;SetmealDish&gt; setmealDishes)</span>;</span><br></pre></td></tr></table></figure><p>1.2.12 SetmealDishMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    insert into setmeal_dish</span><br><span class="line">    (setmeal_id,dish_id,name,price,copies)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;setmealDishes&quot;</span> <span class="attr">item</span>=<span class="string">&quot;sd&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;sd.setmealId&#125;,#&#123;sd.dishId&#125;,#&#123;sd.name&#125;,#&#123;sd.price&#125;,#&#123;sd.copies&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-套餐分页查询"><a href="#2-套餐分页查询" class="headerlink" title="2. 套餐分页查询"></a>2. 套餐分页查询</h4><p>2.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;分页查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> setmealService.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PageResult <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>2.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> setmealPageQueryDTO.getPage();</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> setmealPageQueryDTO.getPageSize();</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">    Page&lt;SetmealVO&gt; page = setmealMapper.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.4 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Page&lt;SetmealVO&gt; <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>2.2.5 SetmealMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.vo.SetmealVO&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    s.*,c.name categoryName</span><br><span class="line">    from</span><br><span class="line">    setmeal s</span><br><span class="line">    left join</span><br><span class="line">    category c</span><br><span class="line">    on</span><br><span class="line">    s.category_id = c.id</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and s.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and s.status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and s.category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by s.create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h4><p>3.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;批量删除套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    setmealService.deleteBatch(ids);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p>3.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    ids.forEach(id -&gt; &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span>(StatusConstant.ENABLE == setmeal.getStatus())&#123;</span><br><span class="line">            <span class="comment">//起售中的套餐不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.SETMEAL_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ids.forEach(setmealId -&gt; &#123;</span><br><span class="line">        <span class="comment">//删除套餐表中的数据</span></span><br><span class="line">        setmealMapper.deleteById(setmealId);</span><br><span class="line">        <span class="comment">//删除套餐菜品关系表中的数据</span></span><br><span class="line">        setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.4 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Setmeal <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><p>3.2.5 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据套餐id删除套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h4 id="4-修改套餐"><a href="#4-修改套餐" class="headerlink" title="4. 修改套餐"></a>4. 修改套餐</h4><p>4.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐，用于修改页面回显数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SetmealVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> setmealService.getByIdWithDish(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    setmealService.update(setmealDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐和关联的菜品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SetmealVO <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SetmealDTO setmealDTO)</span>;</span><br></pre></td></tr></table></figure><p>4.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐和套餐菜品关系</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> SetmealVO <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDishMapper.getBySetmealId(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealVO</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmeal, setmealVO);</span><br><span class="line">    setmealVO.setSetmealDishes(setmealDishes);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> setmealVO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、修改套餐表，执行update</span></span><br><span class="line">    setmealMapper.update(setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmealDTO.getId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、删除套餐和菜品的关联关系，操作setmeal_dish表，执行delete</span></span><br><span class="line">    setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">    setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class="line">        setmealDish.setSetmealId(setmealId);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3、重新插入套餐和菜品的关联关系，操作setmeal_dish表，执行insert</span></span><br><span class="line">    setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2.4 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据套餐id查询套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Select(&quot;select * from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line">   List&lt;SetmealDish&gt; <span class="title function_">getBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h4 id="5-起售停售套餐"><a href="#5-起售停售套餐" class="headerlink" title="5. 起售停售套餐"></a>5. 起售停售套餐</h4><p>5.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;套餐起售停售&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class="line">    setmealService.startOrStop(status, id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售、停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span>;</span><br></pre></td></tr></table></figure><p>5.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售、停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//起售套餐时，判断套餐内是否有停售菜品，有停售菜品提示&quot;套餐内包含未启售菜品，无法启售&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(status == StatusConstant.ENABLE)&#123;</span><br><span class="line">        <span class="comment">//select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?</span></span><br><span class="line">        List&lt;Dish&gt; dishList = dishMapper.getBySetmealId(id);</span><br><span class="line">        <span class="keyword">if</span>(dishList != <span class="literal">null</span> &amp;&amp; dishList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            dishList.forEach(dish -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(StatusConstant.DISABLE == dish.getStatus())&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SetmealEnableFailedException</span>(MessageConstant.SETMEAL_ENABLE_FAILED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> Setmeal.builder()</span><br><span class="line">        .id(id)</span><br><span class="line">        .status(status)</span><br><span class="line">        .build();</span><br><span class="line">    setmealMapper.update(setmeal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.2.4 DishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据套餐id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">getBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h2 id="三-Redis使用"><a href="#三-Redis使用" class="headerlink" title="三 Redis使用"></a>三 Redis使用</h2><h3 id="营业状态"><a href="#营业状态" class="headerlink" title="营业状态"></a>营业状态</h3><p>设置营业状态；管理端查询营业状态，用户端查询营业状态（管理端和用户端查询路径不同）。</p><p>营业状态存储在Redis中，不用在Mysql中单独创建一张表。</p><p>在controller&#x2F;admin下创建ShopController这个是管理端的，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;adminShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/shop&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;店铺相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY=<span class="string">&quot;SHOP_STATUS&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">//设置店铺营业状态</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;设置店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setStatus</span><span class="params">( <span class="meta">@PathVariable</span> Integer status)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;设置店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span> ?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;SHOP_STATUS&quot;</span>,status);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取店铺的营业状态</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取到店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span>?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>在controller下创建user包，然后把amin的ShopController复制到这个下面，然后进行简单修改，只保留获取状态的。因为有2个类类名相同，会导致Bean冲突，所以我们要在@RestController中指定Bean的名称。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;userShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/shop&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;店铺相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY=<span class="string">&quot;SHOP_STATUS&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">//获取店铺的营业状态</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取到店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span>?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-客户端"><a href="#四-客户端" class="headerlink" title="四 客户端"></a>四 客户端</h2><h3 id="1-HttpClient"><a href="#1-HttpClient" class="headerlink" title="1 HttpClient"></a>1 HttpClient</h3><h4 id="1-1-HttpClient-介绍"><a href="#1-1-HttpClient-介绍" class="headerlink" title="1.1 (HttpClient)介绍"></a>1.1 (HttpClient)介绍</h4><p>介绍：在Java中通过编码的方式发送HTTP请求。</p><p>HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p><p>maven坐标：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-HttpClient-发GET请求"><a href="#1-2-HttpClient-发GET请求" class="headerlink" title="1.2 (HttpClient)发GET请求"></a>1.2 (HttpClient)发GET请求</h4><p>要保证当前项目已经提前启动好了。</p><p>在key-server&#x2F;src&#x2F;test&#x2F;java&#x2F;com&#x2F;sky&#x2F;test下面创建HttpClientTest类然后写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTest</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="comment">//创建请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/user/shop/status&quot;</span>);</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">//获取服务端返回的状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的状态码为：&quot;</span>+statusCode);</span><br><span class="line">        <span class="comment">//获取服务端返回的数据</span></span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的数据为：&quot;</span>+body);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-HttpClient-发POST请求"><a href="#1-3-HttpClient-发POST请求" class="headerlink" title="1.3 (HttpClient)发POST请求"></a>1.3 (HttpClient)发POST请求</h4><p>要保证当前项目已经提前启动好了。POST需要提前传入参数。</p><p>在上一节的HttpClientTest类中写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPOST</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建httpclient对象</span></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//创建请求对象</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    jsonObject.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    jsonObject.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonObject.toString());</span><br><span class="line">    <span class="comment">//指定请求编码方式</span></span><br><span class="line">    entity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//数据格式</span></span><br><span class="line">    entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    httpPost.setEntity(entity);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">    <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">    System.out.println(<span class="string">&quot;响应码为：&quot;</span>+statusCode);</span><br><span class="line">    <span class="type">HttpEntity</span> <span class="variable">entity1</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity1);</span><br><span class="line">    System.out.println(<span class="string">&quot;响应数据为：&quot;</span>+body);</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与Get不同的是，这里添加了登录的参数以及请求编码的方式和数据的格式，其它的基本都是相同的。</p><p>这个其实是调用了登录的API，最后会返回一个Token。</p><h3 id="2-缓存商品和购物车"><a href="#2-缓存商品和购物车" class="headerlink" title="2 缓存商品和购物车"></a>2 缓存商品和购物车</h3><h4 id="2-1-本章内容介绍"><a href="#2-1-本章内容介绍" class="headerlink" title="2.1 本章内容介绍"></a>2.1 本章内容介绍</h4><p>菜品和套餐存储在数据库中，如果短期内有大量的人查询会导致数据库压力过大，用户体验不佳。现在把商品数据缓存到Redis中。</p><p>加入购物车，查看购物车，可以看到购物车中的商品，可以清空购物车，还可以添加商品到购物车。</p><p>缓存菜品 -&gt; 缓存套餐 -&gt; 添加购物车 -&gt; 查看购物车 -&gt; 清空购物车，从购物车中减去某个商品。</p><h4 id="2-2-缓存菜品-设计分析"><a href="#2-2-缓存菜品-设计分析" class="headerlink" title="2.2 (缓存菜品)设计分析"></a>2.2 (缓存菜品)设计分析</h4><p>问题说明：小程序菜品数据是通过数据库获得，如果用户端访问量过大，数据库的压力会增加。</p><p>实现思路：通过Redis来缓存菜品数据，减少数据库查询操作。内存操作的性能比磁盘IO性能更高。</p><p>每个分类下的菜品保存一份缓存数据。</p><p>数据库中菜品数据有变更时要清理缓存数据。</p><h4 id="2-3-缓存菜品-代码开发"><a href="#2-3-缓存菜品-代码开发" class="headerlink" title="2.3 (缓存菜品)代码开发"></a>2.3 (缓存菜品)代码开发</h4><p>在sky-server下的controller&#x2F;user下的DishController类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;userDishController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/dish&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;C端-菜品浏览接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">// 根据分类id查询菜品</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">        <span class="comment">//构造redis中的key，规则：dish_分类id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + categoryId;</span><br><span class="line">        <span class="comment">//查询redis中是否存在菜品数据</span></span><br><span class="line">        List&lt;DishVO&gt; list = (List&lt;DishVO&gt;)redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;<span class="comment">//如果存在，直接返回，无须查询数据库</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        dish.setCategoryId(categoryId);</span><br><span class="line">        dish.setStatus(StatusConstant.ENABLE);<span class="comment">//查询起售中的菜品</span></span><br><span class="line">        <span class="comment">//如果不存在，查询数据库，将查询到的数据放入redis中</span></span><br><span class="line">        list = dishService.listWithFlavor(dish);</span><br><span class="line">        redisTemplate.opsForValue().set(key,list);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在小程序助手中编译，然后在不同的菜类间切换（比如蜀味烤鱼和蜀味牛蛙），效果是第一次IDEA的控制台会输出SQL语句，然后去看Redis会发现已经有了缓存。然后继续在前面已缓存的菜类间切换，会发现控制台不再输出SQL语句，说明走的是Redis缓存。</p><h4 id="2-4-缓存菜品-清理缓存"><a href="#2-4-缓存菜品-清理缓存" class="headerlink" title="2.4 (缓存菜品)清理缓存"></a>2.4 (缓存菜品)清理缓存</h4><p>不清理可能出现的问题：比如菜品的价格如果被修改，如果继续从Redis从取数据，会导致数据的不一致。</p><p>新增菜品、修改菜品、批量删除菜品、起售和停售菜品的时候需要清理缓存。</p><p>所以需要在controller下的admin中的DishController中修改代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理缓存数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanCache</span><span class="params">(String pattern)</span>&#123;</span><br><span class="line">    <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(pattern);</span><br><span class="line">    redisTemplate.delete(keys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在update、delete方法中调用完service的方法后：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cleanCache(<span class="string">&quot;dish_*&quot;</span>);</span><br></pre></td></tr></table></figure><p>在save方法中调用service的方法后：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDTO.getCategoryId();</span><br><span class="line">cleanCache(key);<span class="comment">//清理缓存数据</span></span><br></pre></td></tr></table></figure><h4 id="2-5-缓存菜品-功能测试"><a href="#2-5-缓存菜品-功能测试" class="headerlink" title="2.5 (缓存菜品)功能测试"></a>2.5 (缓存菜品)功能测试</h4><p>首先把所有的菜类都缓存到Redis中（在小程序助手里把所有菜类都点一遍），然后在电脑管理端的前端平台修改某一道菜，然后再看Redis的可视化面板，看看是不是所有的Redis都被清空。</p><h4 id="2-6-SpringCache介绍"><a href="#2-6-SpringCache介绍" class="headerlink" title="2.6 SpringCache介绍"></a>2.6 SpringCache介绍</h4><p>SpringCache是Spring提供的缓存框架。提供了基于注解的缓存功能。</p><p>SpringCache提供了一层抽象，底层可以切换不同的缓存实现（只需要导入不同的Jar包即可），如EHCache，Caffeine，Redis。</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能，通常加在启动类上</td></tr><tr><td>@Cacheable</td><td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><h4 id="2-7-SpringCache"><a href="#2-7-SpringCache" class="headerlink" title="2.7 SpringCache"></a>2.7 SpringCache</h4><p>依赖导入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-8-SpringCache入门"><a href="#2-8-SpringCache入门" class="headerlink" title="2.8 SpringCache入门"></a>2.8 SpringCache入门</h4><p>在启动类上加@EnableCaching</p><p>在controller层的UserController下的save方法上写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#user.id&quot;)</span> <span class="comment">//如果使用spring Cache缓存数据，key的生成：userCache::1。user是从参数取到的。</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#result.id&quot;) //result是从返回值return取到的</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#p0.id&quot;)</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#a0.id&quot;)</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#root.args[0].id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意key&#x3D;”#result.id”中的result取的是返回值返回的那个结果。 key&#x3D;”#user.id”的user取的是传入的参数。p0，a0，root.args[0]表示取的都是第1个参数。</p><p>在controller层的UserController下的getById方法上写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;userCache&quot;,key=&quot;#id&quot;)</span></span><br></pre></td></tr></table></figure><p>然后在方法体的第1行打上断点，点击小虫，然后到localhost:8888&#x2F;doc.html中对get方法进行测试，发送1，效果是：直接从Redis中返回数据，压根不会触发断点。</p><p>现在手动删除id为1的数据，然后重新在doc.html中发送数据，然后会执行断点，放心后控制台输出SQL语句，然后Redis缓存中也有数据。</p><p>在controller层的UserController下的deleteById和deleteAll方法上加入如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;userCache&quot;,key=&quot;#id&quot;)</span> <span class="comment">//key的形式 userCache::10</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;userMapper.deleteById(id);&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/delAll&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames=&quot;userCache&quot;,allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试的话可以在两个方法内的第1行打上断点，点击小虫，然后到localhost:8888&#x2F;doc.html中对delete和deleteAll方法进行测试，先通过getById方法增加几个数据，然后再逐一删除。</p><p>可以这么理解cacheNames里的参数就是指定key的名字，只会删除相应的key。</p><h4 id="2-9-缓存套餐-代码开发"><a href="#2-9-缓存套餐-代码开发" class="headerlink" title="2.9 (缓存套餐)代码开发"></a>2.9 (缓存套餐)代码开发</h4><p>首先要在sky-server包下导入下面两个坐标：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后要在sky-server包下的启动类SkyApplication类上加如下注解：</p><p><code>@EnableCaching</code></p><p>首先是在controller&#x2F;user包下的SetmealController类中的list方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;setmealCache&quot;,key=&quot;#categoryId&quot;)</span> <span class="comment">//key: setmealCache::100</span></span><br></pre></td></tr></table></figure><p>然后是在controller&#x2F;admin包下的SetmealController类中的save方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(cacheNames=&quot;setmealCache&quot;,key=&quot;#setmealDTO.categoryId&quot;)</span></span><br></pre></td></tr></table></figure><p>最后是在controller&#x2F;admin包下的SetmealController类中的update、delete、startOrStop方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;,allEntries = true)</span></span><br></pre></td></tr></table></figure><h4 id="2-10-添购物车"><a href="#2-10-添购物车" class="headerlink" title="2.10 (添购物车)"></a>2.10 (添购物车)</h4><p>在sky-server的controller的user中创建一个名为ShoppingCartController类，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/shoppingCart&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;C端购物车相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加购物车&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCartDTO shoppingCartDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;添加购物车，商品信息为：&#123;&#125;&quot;</span>,shoppingCartDTO);</span><br><span class="line">        shoppingCartService.addShoppingCart(shoppingCartDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在sky-server的service下创建ShoppingCartService类，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="comment">//添加购物车</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在sky-server的service的Impl下创建ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善sky-server的service的Impl下的ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);</span><br><span class="line">        <span class="comment">//userid暂时还不知道，从ThreadLocal取</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);</span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            cart.setNumber(cart.getNumber()+<span class="number">1</span>);</span><br><span class="line">            shoppingCartMapper.updateNumberById(cart);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper下的ShoppingCartMapper类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartMapper</span> &#123;</span><br><span class="line">    List&lt;ShoppingCart&gt; <span class="title function_">list</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br><span class="line">    <span class="comment">//根据id修改商品数量</span></span><br><span class="line">    <span class="meta">@Update(&quot;update shopping_cart set number = #&#123;number&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateNumberById</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下的ShoppingCartMapper.xml类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.ShoppingCartMapper&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;select id=<span class="string">&quot;list&quot;</span> resultType=<span class="string">&quot;com.sky.entity.ShoppingCart&quot;</span>&gt;</span><br><span class="line">        select * from shopping_cart</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;userId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">user_id</span> <span class="operator">=</span> #&#123;userId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;setmealId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">setmeal_id</span> <span class="operator">=</span> #&#123;setmealId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;dishId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">dish_id</span> <span class="operator">=</span> #&#123;dishId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;dishFlavor != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">dish_flavor</span> <span class="operator">=</span> #&#123;dishFlavor&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>完善sky-server的service的Impl下的ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);</span><br><span class="line">        <span class="comment">//userid暂时还不知道，从ThreadLocal取</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);</span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            cart.setNumber(cart.getNumber()+<span class="number">1</span>);</span><br><span class="line">            shoppingCartMapper.updateNumberById(cart);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">            <span class="comment">//判断本次添加到购物车的是菜品还是套餐,因为要查询不同表</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCartDTO.getDishId();</span><br><span class="line">            <span class="keyword">if</span>(dishId!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//本次添加到购物车的是菜品</span></span><br><span class="line">                <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(dishId);</span><br><span class="line">                shoppingCart.setName(dish.getName());</span><br><span class="line">                shoppingCart.setImage(dish.getImage());</span><br><span class="line">                shoppingCart.setAmount(dish.getPrice());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//本次添加到购物车的是套餐</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> shoppingCartDTO.getSetmealId();</span><br><span class="line">                <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(setmealId);</span><br><span class="line">                shoppingCart.setName(setmeal.getName());</span><br><span class="line">                shoppingCart.setImage(setmeal.getImage());</span><br><span class="line">                shoppingCart.setAmount(setmeal.getPrice());</span><br><span class="line">            &#125;</span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">            shoppingCartMapper.insert(shoppingCart);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在shoppingCartMapper中添加insert方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into shopping_cart(name,user_id,dish_id,setmeal_id,dish_flavor,number,amount,image,create_time)&quot; +</span></span><br><span class="line"><span class="meta">    &quot;value (#&#123;name&#125;,#&#123;userId&#125;,#&#123;dishId&#125;,#&#123;setmealId&#125;,#&#123;dishFlavor&#125;,#&#123;number&#125;,#&#123;amount&#125;,#&#123;image&#125;,#&#123;createTime&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br></pre></td></tr></table></figure><h4 id="2-11-查看购物车"><a href="#2-11-查看购物车" class="headerlink" title="2.11 查看购物车"></a>2.11 查看购物车</h4><p>在sky-server的controller下的ShoppingCartController类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查看购物车&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.showShoppingCart();</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下的ShoppingCartService类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ShoppingCart&gt; <span class="title function_">showShoppingCart</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl下的ShoppingCartServiceImpl类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ShoppingCart&gt; <span class="title function_">showShoppingCart</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> ShoppingCart.builder()</span><br><span class="line">                    .userId(userId)</span><br><span class="line">                    .build();</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);<span class="comment">//只需要传userid即可</span></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-清空购物车"><a href="#2-12-清空购物车" class="headerlink" title="2.12 清空购物车"></a>2.12 清空购物车</h4><p>在sky-server的controller下的ShoppingCartController类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;清空购物车&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">    shoppingCartService.clean();</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下的ShoppingCartService类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空购物车</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl下的ShoppingCartServiceImpl类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空购物车</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCartMapper.deleteByUserId(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper的ShoppingCartMapper类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from shopping_cart where user_id=#&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByUserId</span><span class="params">(Long userId)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件开发整体介绍</title>
      <link href="/2024/10/03/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/10/03/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-软件开发流程"><a href="#1-软件开发流程" class="headerlink" title="1.软件开发流程"></a>1.软件开发流程</h2><img src="1.png" style="zoom: 33%;"><h2 id="2-角色分工"><a href="#2-角色分工" class="headerlink" title="2.角色分工"></a>2.角色分工</h2><img src="2.png" style="zoom:50%;"><h2 id="3-软件环境"><a href="#3-软件环境" class="headerlink" title="3.软件环境"></a>3.软件环境</h2><p><img src="3.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo搭建个人博客</title>
      <link href="/2024/09/30/%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/09/30/%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境及工具准备"><a href="#1-环境及工具准备" class="headerlink" title="1.环境及工具准备"></a>1.环境及工具准备</h2><p>需要安装git和nodejs</p><p>安装完成后打开cmd控制台，输入命令<code>npm install hexo-cli -g</code>，安装Hexo</p><h2 id="2-仓库搭建"><a href="#2-仓库搭建" class="headerlink" title="2.仓库搭建"></a>2.仓库搭建</h2><p>进入github网站后，点击创建仓库<code>create repository</code></p><p><img src="1.png"></p><p>仓库名字最好是用户名+.github.io,设置为公开仓库，公选设置生成readme文件</p><p><img src="2.png"></p><h2 id="3-配置ssh-key"><a href="#3-配置ssh-key" class="headerlink" title="3.配置ssh key"></a>3.配置ssh key</h2><p>回到桌面右击鼠标选择G0it Bash Here</p><p>在命令行中输入：<code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code></p><p>后面提示一直按enter回车键就行</p><p>之后进入本地磁盘C:\Users\用户名字\ .ssh</p><p>打开.pub文件，将里面的内容复制</p><p>之后回到github网站页面，点击右上角头像，选择setting，之后再点击ssh and gpg keys,然后再new ssh key</p><p><img src="3.png"></p><p>之后标题任意，把复制的ssh key粘贴在key填写框中</p><p><img src="5.png"></p><p>然后点击创建add ssh key</p><p>回到git命令窗口，输入<code>ssh -T git@github.com</code>，出现下方提示就成功了</p><p><img src="6.png"></p><h2 id="4-本地部署"><a href="#4-本地部署" class="headerlink" title="4.本地部署"></a>4.本地部署</h2><p>先在本地磁盘上创建一个文件夹，用于存放博客数据，这里我选择创建的是D:\BlogkFile目录</p><p>然后在此目录下右击鼠标选择git bash here</p><p>在命令窗口输入：<code>hexo init</code> 进行初始化</p><p>​   <code>npx hexo instal</code>l 安装</p><p>​   <code>npx hexo g </code>生成</p><p>​                               <code>npx hexo s</code> 本地部署</p><p>最后命令窗口会有一个链接，打开就可以进入本地部署的hexo了</p><p><img src="7.png"></p><p><img src="8.png"></p><p><strong>ctrl+c 停止本地服务器</strong></p><h2 id="5-上线博客"><a href="#5-上线博客" class="headerlink" title="5.上线博客"></a>5.上线博客</h2><p>打开文件夹中的config文件</p><p><img src="9.png"></p><p>复制这段文字：</p><p>type: git<br>repository:<br>branch: main</p><p>将它粘贴在config文件下面，将原来底部的type：‘ ’替换掉</p><p><img src="10.png"></p><p>之后回到github网站，回到自己的仓库，点击code复制git链接</p><p><img src="11.png"></p><p>将链接粘贴到config文件中的repository：旁边</p><p><img src="12.png"></p><p>保存退出，然后在本地博客文件夹中git bash here，输入命令<code>npx hexo g</code>，<code>npx hexo g</code>上传</p><p><strong>$ npx hexo d</strong><br><strong>INFO Validating config</strong><br><strong>ERROR Deployer not found: git</strong><br><strong>如果出现这个问题，在bash界面输入npm install hexo-deployer-git –save后再输入npx hexo d即可解决</strong></p><p>注意第一次使用要填写git邮箱与用户名字</p><p>然后结束后会弹窗，登入即可</p><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>我们的博客标题还是默认的hexo，整个页面是初始默认的，接下来我们对其进行修改</p><p>用记事本打开我们blog文件夹中的_config.yml文件</p><p>将#Site下面按自己的需求填上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Site</span><br><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">keywords: 关键词</span><br><span class="line">author: 站主</span><br><span class="line">language: 语言（可以填写zh-CN）</span><br><span class="line">timezone: 时区（可以填写Asia/Shanghai）</span><br></pre></td></tr></table></figure><p>然后保存</p><h2 id="如何上传文章"><a href="#如何上传文章" class="headerlink" title="如何上传文章"></a>如何上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 文章标题</span><br></pre></td></tr></table></figure><p>文章是.md格式，在我们的Blog文件夹中的source&#x2F;_posts中</p><p>推荐用Typora软件来编辑.md格式的文件</p><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>写好以后，我们还是一样打开git bash生成、上传</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><p>至此，我们就成功搭建好基本的博客了，剩下的就是对博客的一些优化和美化了。</p><p>推荐主题：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a>，<a href="http://docs.anheyu.com/">anzhiyu</a></p><h2 id="相关问题解决"><a href="#相关问题解决" class="headerlink" title="相关问题解决"></a>相关问题解决</h2><h3 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h3><p>这个错误 <code>fatal: unable to access &#39;https://github.com/mingea/mingea.github.io.git/&#39;: OpenSSL SSL_read: Connection was reset, errno 10054</code> 是一个典型的 <strong>网络连接问题</strong>，通常是 GitHub 连接被重置导致的。</p><p><strong>步骤：</strong></p><ol><li><p><strong>生成 SSH 密钥</strong>（如果你还没有）：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>直接按回车使用默认路径和空密码。</p></li><li><p><strong>将公钥添加到 GitHub</strong>：</p><ul><li>复制公钥内容：<code>cat ~/.ssh/id_rsa.pub</code></li><li>登录 GitHub → Settings → SSH and GPG keys → New SSH key</li><li>粘贴公钥内容</li></ul></li><li><p><strong>修改部署配置</strong>：<br>将 <code>_config.yml</code> 中的 repository地址改为 SSH 格式：</p><p>yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:mingea/mingea.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p><strong>测试 SSH 连接</strong>：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果显示 “You’ve successfully authenticated”，说明配置成功。</p></li><li><p><strong>重新部署</strong>：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx hexo clean &amp;&amp; npx hexo g &amp;&amp; npx hexo d</span><br></pre></td></tr></table></figure></li></ol><h3 id="图片加载问题"><a href="#图片加载问题" class="headerlink" title="图片加载问题"></a>图片加载问题</h3><ul><li>进入你博客的根目录，然后下面顺序找到<code>index.js</code>:<br><code>node_modules</code> –&gt; <code>hexo-asset-image</code> –&gt; <code>index.js</code></li><li>用<a href="https://zhida.zhihu.com/search?content_id=208599834&content_type=Article&match_order=1&q=VS+Code&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NTk2MzAxMDIsInEiOiJWUyBDb2RlIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MjA4NTk5ODM0LCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.qFI2a32pQBViRBwWoK2sPR_ButdW9O7vrFdS459m-GM&zhida_source=entity">VS Code</a> 或者 记事本打开 <code>index.js</code></li><li>在第 58 行，可以找到这么一行代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br></pre></td></tr></table></figure><ul><li>把这一行代码改成下面这样</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, src);</span><br></pre></td></tr></table></figure><ul><li>保存文件</li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>进入博客的根目录</li><li><code>node_modules</code> –&gt; <code>hexo-asset-image</code> –&gt; 打开 <code>README.md</code>, 里面写了用法。我截了个图：</li></ul><p><img src="https://pic3.zhimg.com/v2-743a77f20e7c4ed5e7dcf3aec2383672_1440w.png" alt="img"></p><p>Usage of hexo-asset-image</p><p><strong>注意</strong></p><ul><li>要先把 <code>_config.yml</code>中的 <code>post_asset_folder: false</code> 改成 <code>post_asset_folder: true</code> (默认是false，如果你没有修改过，那请去修改)</li><li>圆括号里面只要写 图片名.后缀 就可以了，不要多加任何的东西。</li></ul><p>最后，<code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 三部曲，然后进入浏览器打开<code>localhost:4000</code> 就可以看到你想要的图片.</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
