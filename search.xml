<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>食分速递项目</title>
      <link href="/2025/01/03/%E9%A3%9F%E5%88%86%E9%80%9F%E9%80%92%E9%A1%B9%E7%9B%AE/"/>
      <url>/2025/01/03/%E9%A3%9F%E5%88%86%E9%80%9F%E9%80%92%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一 环境搭建"></a>一 环境搭建</h2><p><img src="4.png"></p><h3 id="1-前端环境搭建"><a href="#1-前端环境搭建" class="headerlink" title="1.前端环境搭建"></a>1.前端环境搭建</h3><p><strong>前端工程基于 nginx 运行</strong></p><h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><p>在nginx安装的文件夹内，双击 nginx.exe 即可启动 nginx 服务，访问端口号为 80</p><h4 id="什么是nginx？"><a href="#什么是nginx？" class="headerlink" title="什么是nginx？"></a>什么是nginx？</h4><p>nginx 反向代理，就是将前端发送的<strong>动态请求</strong>由 nginx 转发到<strong>后端服务器</strong></p><ul><li><strong>位置</strong>：运行在你的<strong>服务器</strong>上。</li><li><strong>职责</strong>：<strong>接收、调度、分发</strong>请求。它是请求到达服务器后遇到的第一个“门卫”和“调度员”。它不处理核心业务逻辑（比如计算订单金额），但它决定把这个请求交给谁去处理，或者直接自己处理（比如直接返回一个图片文件）。</li></ul><h4 id="nginx-反向代理的好处"><a href="#nginx-反向代理的好处" class="headerlink" title="nginx 反向代理的好处"></a>nginx 反向代理的好处</h4><p>•提高访问速度</p><p>•进行负载均衡</p><p>•保证后端服务安全</p><p>所谓<strong>负载均衡</strong>,就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器</p><img src="5.png" style="zoom: 50%;"><h4 id="nginx-反向代理的配置方式"><a href="#nginx-反向代理的配置方式" class="headerlink" title="nginx 反向代理的配置方式"></a>nginx 反向代理的配置方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location /api/ &#123;</span><br><span class="line">            proxy_pass   http:<span class="comment">//localhost:8080/admin/;  #反向代理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**listen 80;**监听80端口</p><p><strong>逐行详解</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br></pre></td></tr></table></figure><ul><li><strong>定义一个虚拟服务器</strong>：Nginx 可以同时托管多个网站（虚拟主机），每个 <code>server {}</code> 块就是一个网站的配置。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 80;</span><br></pre></td></tr></table></figure><ul><li><strong>监听端口</strong>：这个虚拟服务器会监听来自 <strong>80 端口</strong> 的 HTTP 请求（80 是 HTTP 协议的默认端口）。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server_name localhost;</span><br></pre></td></tr></table></figure><ul><li><strong>服务器名称</strong>：这个虚拟服务器对应的域名是 <code>localhost</code>。当你在浏览器里访问 <code>http://localhost</code> 时，就会由这个 server 块来处理。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api/ &#123;</span><br></pre></td></tr></table></figure><ul><li><strong>位置块</strong>：这是最核心的配置。它定义了一个 <strong>URL 路径匹配规则</strong>。所有以 <code>/api/</code> 开头的请求（例如 <code>http://localhost/api/employee/login</code>），都会进入这个 <code>location</code> 块内的逻辑。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_pass http://localhost:8080/admin/;</span><br></pre></td></tr></table></figure><ul><li><strong>反向代理指令</strong>：这是实现转发的关键命令。<ul><li>它告诉 Nginx，对于匹配到的请求，不要自己处理，而是将其 <strong>转发（代理）</strong> 到指定的地址。</li><li><code>http://localhost:8080/admin/</code> 是 <strong>目标地址</strong>。</li></ul></li></ul><img src="6.png" style="zoom:80%;"><h4 id="nginx-负载均衡的配置方式"><a href="#nginx-负载均衡的配置方式" class="headerlink" title="nginx 负载均衡的配置方式"></a>nginx 负载均衡的配置方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">server <span class="number">192.168</span><span class="number">.100</span><span class="number">.128</span>:<span class="number">8080</span>;</span><br><span class="line">server <span class="number">192.168</span><span class="number">.100</span><span class="number">.129</span>:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location /api/ &#123;</span><br><span class="line">            proxy_pass   http:<span class="comment">//webservers/admin/;  #负载均衡</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1. <code>upstream</code> 块 - 定义服务器池（后端集群）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream webservers &#123;</span><br><span class="line">    server 192.168.100.128:8080;</span><br><span class="line">    server 192.168.100.129:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>upstream webservers {}</code></strong>：定义一个名为 <code>webservers</code> 的上游服务器组（也叫集群或服务器池）。</li><li><strong><code>server 192.168.100.128:8080;</code></strong>：在池中添加第一台后端服务器，IP 是 <code>192.168.100.128</code>，端口是 <code>8080</code>。</li><li><strong><code>server 192.168.100.129:8080;</code></strong>：在池中添加第二台后端服务器，IP 是 <code>192.168.100.129</code>，端口是 <code>8080</code>。</li></ul><p><strong>Nginx 默认的负载均衡策略是轮询</strong>，也就是说，第一个请求发给 128，第二个请求发给 129，第三个又发给 128，以此类推。</p><p><strong>2. <code>location</code> 块 - 流量分发</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api/ &#123;</span><br><span class="line">    proxy_pass http://webservers/admin/;  #负载均衡</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关键变化在这里：<code>proxy_pass</code> 的目标不再是单一的服务器地址，而是指向了我们定义的 upstream 池 <code>http://webservers</code>。</li><li>这意味着，所有匹配到的请求都会被分发到 <code>webservers</code> 池中的服务器上。</li></ul><p><img src="7.png"></p><h3 id="2-后端环境搭建"><a href="#2-后端环境搭建" class="headerlink" title="2.后端环境搭建"></a>2.后端环境搭建</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>后端工程基于 maven 进行项目构建，并且进行分模块开发</p><p><img src="8.png"></p><p><img src="9.png"></p><p><strong>sky-common</strong> 子模块中存放的是一些公共类，可以供其他模块使用</p><p><strong>sky-pojo</strong> 子模块中存放的是一些 entity、DTO、VO</p><img src="10.png" style="zoom: 67%;"><p><strong>sky-server</strong> 子模块中存放的是 配置文件、配置类、拦截器、controller、service、mapper、启动类等</p><h4 id="使用Git进行版本控制"><a href="#使用Git进行版本控制" class="headerlink" title="使用Git进行版本控制"></a>使用Git进行版本控制</h4><p>.gitingore文件是git的相关文件，目的是忽略推送到服务器的文件或文件夹</p><p><img src="11.png"></p><p>还没有被git版本控制的项目可以在idea配置，具体操作是上方操作菜单点击VSC，点击创建git仓库，最后在弹出窗中选择项目</p><img src="12.png" style="zoom:50%;"><p>之后就可以测试提交，注意第一次提交会提交到本地仓库</p><p>推送就是要推送到远程仓库，第一次会提示你配置远程仓库信息</p><p><strong>核心概念总结</strong></p><table><thead><tr><th align="left">动作</th><th align="left">作用域</th><th align="left">描述</th><th align="left">影响</th><th align="left">类比</th></tr></thead><tbody><tr><td align="left"><strong><code>commit</code></strong></td><td align="left"><strong>本地</strong></td><td align="left">将<strong>暂存区</strong>的快照永久记录到<strong>本地仓库</strong>的历史中。</td><td align="left">只更新你自己电脑上的 Git 仓库。团队其他成员看不到你的这次提交。</td><td align="left"><strong>保存到本地硬盘</strong></td></tr><tr><td align="left"><strong><code>push</code></strong></td><td align="left"><strong>本地 → 远程</strong></td><td align="left">将<strong>本地仓库</strong>中的新提交记录上传到<strong>远程仓库</strong>（如 GitHub, Gitee）。</td><td align="left">更新共享的远程仓库，团队其他成员可以通过 <code>pull</code> 获取你的更新。</td><td align="left"><strong>上传到网盘&#x2F;服务器</strong></td></tr></tbody></table><p><strong>工作流程图示</strong></p><p>一个标准的 Git 协作流程如下：</p><p><strong>你的电脑</strong><br><code>工作区</code> –(<code>git add</code>)–&gt; <code>暂存区</code> –(<code>git commit</code>)–&gt; <code>本地仓库</code> –(<code>git push</code>)–&gt; <strong>远程仓库</strong></p><p><strong>同事的电脑拉远程仓库代码</strong><br><strong>远程仓库</strong> –(<code>git fetch</code>)–&gt; <strong>本地仓库</strong> –(<code>git checkout</code>)–&gt; <strong>工作区</strong></p><ul><li><strong>合并（Merge）</strong>：<strong>“邀请别人的成果加入我的版本”</strong><ul><li>操作：我站在原地不动，把别人完成的新内容<strong>拉过来</strong>，和我当前的内容<strong>融合</strong>在一起。如果内容有重叠（冲突），我需要手动调解。</li><li>结果：历史记录会留下一次“合并”的痕迹，标明两条线在这里汇合了。</li></ul></li><li><strong>变基（Rebase）</strong>：<strong>“把我的工作挪到最新的成果之上”</strong><ul><li>操作：我先把我的工作暂时<strong>放到一边</strong>，然后<strong>把别人的新成果作为新的基础</strong>，最后我再把我的工作<strong>重新实施</strong>在这个崭新的、最新的基础之上。</li><li>结果：历史记录看起来就像是我从一开始就是在最新的代码基础上进行工作的，一条直线，非常整洁。</li></ul></li></ul><p><strong>比喻</strong></p><p><strong>合并</strong>：你正在拼A部分，同事拼好了B部分。你直接把同事拼好的B部分拿过来，和你的A部分对接在一起。如果对接不上（冲突），你就需要调整一下接口。</p><p><strong>变基</strong>：你发现同事不仅拼好了B部分，还把你们共同的底座C也升级了。于是，你先把你的A部分拆下来，把升级后的新底座C换上去，然后再把你的A部分重新拼到新底座C上。</p><h3 id="3-swagger接口文档"><a href="#3-swagger接口文档" class="headerlink" title="3.swagger接口文档"></a>3.swagger接口文档</h3><h4 id="Knife4j使用方式"><a href="#Knife4j使用方式" class="headerlink" title="Knife4j使用方式"></a>Knife4j使用方式</h4><p><a href="https://doc.xiaominfo.com/">K</a><a href="https://doc.xiaominfo.com/">nife4j</a><a href="https://doc.xiaominfo.com/"> </a>是为Java MVC框架集成Swagger生成Api文档的增强解决方案</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>WebMvcConfiguration</strong>文件配置</p><p>1.在配置类中加入 knife4j 相关配置</p><p>2.设置静态资源映射，否则接口文档页面无法访问</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Api</td><td>用在类上，例如Controller，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在类上，例如entity、DTO、VO</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述属性信息</td></tr><tr><td>@ApiOperation</td><td>用在方法上，例如Controller的方法，说明方法的用途、作用</td></tr></tbody></table><h2 id="二-后台管理模块开发"><a href="#二-后台管理模块开发" class="headerlink" title="二 后台管理模块开发"></a>二 后台管理模块开发</h2><h3 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h3><h4 id="1-新增员工"><a href="#1-新增员工" class="headerlink" title="1.新增员工"></a>1.新增员工</h4><p><strong>业务代码</strong></p><p><strong>注意</strong>：当前端提交的数据和实体类中对应的属性差别较大时（也就是实体类中会有多余的属性），建议使用DTO来封装（DTO里的数据字段和前端提交的数据字段都能对应上）。</p><p>在EmployeeController中新建一个方法save，传入的参数是employeeDTO</p><ol><li>首先编写如下代码，是网页端读入的字段数据，在这里传入employeeService对象。有2点注意事项：①前端传入的数据是json格式，要用@RequestBody注解转换为对象。②为了方便调试加一个log.info，花括号{}的内容在后面会被替换为employeeDTO的值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span><span class="comment">//post方式请求</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;新增员工&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123; </span><br><span class="line">      log.info(<span class="string">&quot;新增员工：&#123;&#125;&quot;</span>,employeeDTO);</span><br><span class="line">      employeeService.save(employeeDTO);</span><br><span class="line">      <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在EmployeeService中编写如下代码，思路是：先创建一个emloyee实体类，然后把DTO的数据拷贝到实体类中，然后对剩下的属性进行赋值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(EmployeeDTO employeeDTO)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO,employee);<span class="comment">//对象属性拷贝</span></span><br><span class="line">    employee.setStatus(StatusConstant.ENABLE);</span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));</span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setCreateUser(<span class="number">10L</span>); <span class="comment">//TODO 后续需要改为当前登录用户的id</span></span><br><span class="line">    employee.setUpdateUser(<span class="number">10L</span>);</span><br><span class="line">    employeeMapper.insert(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有2个注意事项：①可以用BeanUtils工具类中的copyProperties方法来对对象进行拷贝，前提是对象的属性有一部分是相同的。②不应该直接用数字数字，否则会是硬编码，应该使用StatusConstant常量类。 </p><ol start="3"><li>在EmployeeMapper中编写SQL语句，来将数据插入数据库：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into employee(name,username,password,phone,sex,id_number,status,create_time,update_time,create_user,update_user)&quot;+</span></span><br><span class="line"><span class="meta">    &quot;values&quot;+</span></span><br><span class="line"><span class="meta">    &quot;(#(name),#(username),#(password),#(phone),#(sex),#(idNumber),#(status),#(createTime),#(updateTime),#(createUser),#(updateUser))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>为了使java属性字段对应数据库字段，这里需要开启Mybatis的驼峰命名，需要在配置文件application.yml文件中进行配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#mapper配置文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.sky.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#开启驼峰命名</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>问题一</strong></p><p>在开发阶段，前端界面可能没有开发好，所以不能进行前后端联调测试，只能用接口文档进行测试。</p><p>下面进行测试出现401，是因为有拦截器进行了拦截，原因是缺少token令牌：</p><p><img src="13.png"></p><p>所以我们先在员工登录页面获取一个令牌：</p><p><img src="14.png"></p><p>全局参数设置-输入参数名称+参数值，然后关闭页面：</p><p><img src="15.png"></p><p>然后带着参数值发送：</p><p><img src="16.png"></p><p>最后可以在数据库查看已经新增成功</p><p>问题二</p><p>录入的用户名已存在，抛出异常后没有处理，没处理的话，控制台会抛出错误P19。（因为在数据库里面设计的用户名字段是唯一）</p><p>用全局的异常处理器sky-server&#x2F;handler&#x2F;GlobalExceptionHandler，创建exceptionHandler方法，在方法里添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">        <span class="keyword">if</span>(message.contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = message.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> split[<span class="number">2</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> username + MessageConstant.ALREADY_EXISTS;</span><br><span class="line">            <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的是输出：xxx已经存在的提示。核心思想是：提取错误那段话的第3个词，然后拼接后输出。</p><p>效果如图：</p><p><img src="17.png"></p><p><strong>问题三</strong></p><p>新增员工时，创建人id和修改人id设置为了固定值P20。程序中将创建者和更新者的id写死为10：</p><p><img src="18.png"></p><p><strong>JWT认证机制</strong>：用户发起请求发送用户名和密码，后端进行校验，如果验证通过就生成JWT Token，将Token返回给客户端，客户端会保存Token，在后续请求的请求头中都会携带JWT Token，请求会被拦截器拦截到，会检查Token，如果通过就会展示数据，如果没有通过就会返回错误信息。</p><p><img src="19.png"></p><p>在拦截请求验证的时候可以获得JWT令牌</p><p>问题是：在解析出登录员工id后如何传递给Service的save方法？</p><p>答：通过ThreadLocal，它是Thread的局部变量，为每个线程提供单独一份的存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，在线程外则不能访问。</p><p>可以通过在controller、service和拦截器中输出线程的id来看是否单次请求是同一个线程，经实验验证是同一个线程。 </p><p><code>System.out.println(&quot;当前线程的id:&quot;+Thread.currentThread().getId());</code></p><p><img src="20.png"></p><p>在sky-common&#x2F;src&#x2F;main&#x2F;java&#x2F;context&#x2F;BaseContext下封装了ThreadLocal的操作。 </p><p>先在拦截器JwtTokenAdminInterceptor里将ID存到存储空间里（set），因为每次请求线程不变，所以存储空间的值不会被更改，因此可以在EmployeeServiceImpl类中取到该值（get），进而输出，很妙！</p><p><img src="21.png"></p><h4 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2.分页查询"></a>2.分页查询</h4><p>下面是PageResult和EmployeePageQueryDTO的实体类定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装分页查询结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total; <span class="comment">//总记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List records; <span class="comment">//当前页数据集合</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeePageQueryDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> page;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每页显示记录数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在EmployeeService接口中编写方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">PageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeServiceImpl中实现方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">PageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123; <span class="comment">//DTO已将页码和每页记录数传入，因此可以算出</span></span><br><span class="line">        <span class="comment">// select * from employee limit 0,10，通过Limit来控制</span></span><br><span class="line">    PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize()); <span class="comment">//页码和每页记录数传入</span></span><br><span class="line">        <span class="comment">//Page是固定的，Employee是每个用户的信息</span></span><br><span class="line">        Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//要将page对象处理为PageResult对象</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> page.getTotal();</span><br><span class="line">        List&lt;Employee&gt; result = page.getResult();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total,result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>PageHelper的startPage方法可以通过传入的参数自动设置Limit，传入的是页码和每页的记录数，好处是：字符串的拼接不用自己做。底层实现是：它会给ThreadLocal设置上述参数，然后在执行SQL语句时会自动被取出，然后拼接成Limit。</p><p>Page是PageHelper插件定义的一个泛型类，是一个固定的返回类型。</p><p>pagehelper可以简化分页代码的编写：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在EmployeeMapper中编写方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;Employee&gt; <span class="title function_">pageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在application.yml配置文件中扫描了EmployeeMapper.xml配置文件：</p><p><img src="23.png"></p><p>在EmployeeMapper.xml中编写SQL语句，limit不用我们手写，pagehelper会自动帮我们追加拼接，order by是排序条件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by create_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里是模糊查询，用concat将name与%进行拼接，%的意思是匹配任意字符串&#x2F;字符。</p><p>标签的id是mapper中的对应方法名。resultType是传入的参数类型。</p><p><strong>代码完善，解决时间显示问题</strong></p><p>方法一：在Employee实体类中的LocalDateTime属性上加上@JsonFormat注解，格式化时间。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure><p>方法二：拓展Spring MVC的消息转换器，统一对后端返回给前端的数据进行转换处理：（推荐）</p><p>在sky-server下的com&#x2F;sky&#x2F;config&#x2F;WebMvcConfiguration下创建：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//托转Spring MVC框架的消息转换器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">//先创建一个消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span></span><br><span class="line">        converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//消息转换器还没交给框架，需要把消息转换器加到容器里</span></span><br><span class="line">        converters.add(<span class="number">0</span>,converter); <span class="comment">//容器自带消息转换器，默认新加的排在末尾，0表示是首位，自己加的消息转换器排在首位</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在JacksonObjectMapper里面有关于日期时间的序列化和反序列化器。</p><h4 id="3-启禁账号"><a href="#3-启禁账号" class="headerlink" title="3.启禁账号"></a>3.启禁账号</h4><p>{status}是路径参数，1为启用，0为禁用。地址栏传参传入员工id。</p><p>操作：传入status和id，将某一id的status从0改为1或从1改为0。</p><p>在EmployeeController中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;启用禁用员工账号&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status,Long id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;启用禁用员工账号：&#123;&#125;,&#123;&#125;&quot;</span>,status,id);</span><br><span class="line">        employeeService.startOrStop(status,id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取的是路径参数，加注解@PathVariable，如果和路径参数不同名，就要加括号双引号指明取的是哪个路径参数@PathVariable(“status”) ；如果同名，就不用加。</p><p>在EmployeeService接口中编入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启用禁用员工账号</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeServiceImpl类中写入如下代码，注意下面的第2种书写方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//update employee set status = ? where id = ?</span></span><br><span class="line">       <span class="comment">/* Employee employee = new Employee();</span></span><br><span class="line"><span class="comment">        employee.setStatus(status);</span></span><br><span class="line"><span class="comment">        employee.setId(id); */</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> Employee.builder()</span><br><span class="line">                .status(status)</span><br><span class="line">                .id(id)</span><br><span class="line">                .build();</span><br><span class="line">        employeeMapper.update(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在EmployeeMapper中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeMapper.xml中写入如下代码，下面这个代码对全字段都可以进行修改，所以不仅仅适用于对status的修改：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;/select&gt;</span><br><span class="line">    &lt;update id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;Employee&quot;</span>&gt;</span><br><span class="line">        update employee</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt; name = #&#123;name&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;username != null&quot;</span>&gt; username = #&#123;username&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;password != null&quot;</span>&gt; password = #&#123;password&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;phone != null&quot;</span>&gt; phone = #&#123;phone&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;sex != null&quot;</span>&gt; sex = #&#123;sex&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;idNumber != null&quot;</span>&gt; id_Number = #&#123;idNumber&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateTime != null&quot;</span>&gt; update_Time = #&#123;updateTime&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateUser != null&quot;</span>&gt; update_User = #&#123;updateUser&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt; status = #&#123;status&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></table></figure><h4 id="4-编辑员工"><a href="#4-编辑员工" class="headerlink" title="4.编辑员工"></a>4.编辑员工</h4><p>①回显数据操作：用查询语句把Employee对象查出来，然后显示。</p><p>EmployeeController编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询员工信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeService接口编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询员工</span></span><br><span class="line">Employee <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>EmployeeServiceImpl实现类编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.getById(id);</span><br><span class="line">        employee.setPassword(<span class="string">&quot;****&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> employee;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>EmployeeMapper中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询员工信息</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Employee <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>②接收提交的数据：调用之前mapper的update方法进行更新。</p><p>EmployeeController编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;编辑员工信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123;</span><br><span class="line">     log.info(<span class="string">&quot;编辑员工信息：&#123;&#125;&quot;</span>,employeeDTO);</span><br><span class="line">     employeeService.update(employeeDTO);</span><br><span class="line">     <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeService接口编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编辑员工信息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span>;</span><br></pre></td></tr></table></figure><p>EmployeeServiceImpl实现类编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO,employee); <span class="comment">//属性拷贝</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line">    employeeMapper.update(employee); <span class="comment">//需要传入Employee参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeMapper中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><h4 id="5-字段填充"><a href="#5-字段填充" class="headerlink" title="5.字段填充"></a>5.字段填充</h4><p>在多个业务表中都有公共字段，如create_time、create_user（insert时用到）；update_time，update_user（insert和update时用到）这些。</p><p>插入数据的时候需要为这些字段赋值，会有大量重复的冗余set方法代码，后期如果表结构发生变化，代码需要跟着修改，此时就不方便修改（如果后期进行修改要重复一个个进行修改）。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th><th><strong>操作类型</strong></th></tr></thead><tbody><tr><td>1</td><td>create_time</td><td>创建时间</td><td>datetime</td><td>insert</td></tr><tr><td>2</td><td>create_user</td><td>创建人id</td><td>bigint</td><td>insert</td></tr><tr><td>3</td><td>update_time</td><td>修改时间</td><td>datetime</td><td>insert、update</td></tr><tr><td>4</td><td>update_user</td><td>修改人id</td><td>bigint</td><td>insert、update</td></tr></tbody></table><p>实现思路：自定义注解AutoFill，用于标识需要进行公共字段自动填充的方法。然后自定义切面类AutoFillAspect，统一拦截加入了AutoFill注解的方法，通过反射为公共字段赋值。在Mapper的方法上加入AutoFill注解。</p><p>技术点：枚举，注解，AOP，反射。</p><p>在com.sky下创建annotation包，创造一个AutoFill的Annotation注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义注解，用于标识某个方法需要进行功能字段自动填充处理</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line">    <span class="comment">//数据库操作类型：UPDATE INSERT</span></span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target注解指定加上什么上面，Retention注解指定什么时候用，</p><p>在com.sky下创建aspect包，创建类AutoFillAspect，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义切面，实现公共字段自动填充处理逻辑</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line">    <span class="comment">//切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//前置通知，在通知中进行公共字段的赋值</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFill</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行公共字段自动填充...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切入点：对哪些类的哪些方法进行拦截。@Pointcut里面写的是对哪些方法进行拦截，要满足2点：①必须是mapper下的所有类的方法，②还要有AutoFill这个注解。</p><p>通知：前置通知，后置通知，环绕通知，异常通知。</p><p>然后在sky-server下的mapper中的EmployeeMapper类里，insert上加入@AutoFill(value&#x3D; OperationType.INSERT)注解，update上加入@AutoFill(value&#x3D; OperationType.UPDATE)注解。</p><p>在sky-server的com.sky下的aspect的AutoFillAspect里的log.info(“开始进行公共字段自动填充…”);下添加如下代码：</p><p>1.获取到当前被拦截的方法上的数据库操作类型（比如是Insert还是Update，不同的类型需要给不同的参数赋值）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();<span class="comment">//通过连接点对象来获取签名，向下转型为MethodSignature</span></span><br><span class="line"><span class="type">AutoFill</span> <span class="variable">autoFill</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);<span class="comment">//获得方法上的注解对象</span></span><br><span class="line"><span class="type">OperationType</span> <span class="variable">operationType</span> <span class="operator">=</span> autoFill.value();<span class="comment">//获得数据库操作类型（Insert or Update）</span></span><br></pre></td></tr></table></figure><p>2.获取到当前被拦截的方法的参数–实体对象（比如传入的参数是员工还是菜品还是其它的）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] args = joinPoint.getArgs(); <span class="comment">//获得了方法所有的参数</span></span><br><span class="line"><span class="keyword">if</span>(args == <span class="literal">null</span> || args.length==<span class="number">0</span> )&#123; <span class="comment">//没有参数</span></span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> args[<span class="number">0</span>];<span class="comment">//现在约定实体放在第1个位置,传入实体可能不同所以用Object</span></span><br></pre></td></tr></table></figure><p>3.准备赋值的数据（给公共字段赋值的数据，比如时间就是系统时间，用户ID是从ThreadLocal获取）</p><p>4.根据当前不同的操作类型，为对应的属性通过反射来赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"><span class="keyword">if</span>(operationType == OperationType.INSERT)&#123;</span><br><span class="line">    <span class="comment">//为4个公共字段赋值</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setCreateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class); <span class="comment">//把方法名全部换成常量类，防止写错</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setCreateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">        <span class="comment">//4.根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class="line">        setCreateTime.invoke(entity,now);</span><br><span class="line">        setCreateUser.invoke(entity,currentId);</span><br><span class="line">        setUpdateTime.invoke(entity,now);</span><br><span class="line">        setUpdateUser.invoke(entity,currentId);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(operationType == OperationType.UPDATE)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//为2个公共字段赋值</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">        <span class="comment">//4.根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class="line">        setUpdateTime.invoke(entity, now);</span><br><span class="line">        setUpdateUser.invoke(entity, currentId);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后要在mapper层的CategoryMapper和EmployeeMapper中的Insert和Update方法上加上@AutoFill注解，注解内容用OperationType.INSERT或OperationType.Update。</p><p>最后把service层的那些手动赋值删除掉或者注释掉。</p><h3 id="菜品管理"><a href="#菜品管理" class="headerlink" title="菜品管理"></a>菜品管理</h3><h4 id="1-新增菜品"><a href="#1-新增菜品" class="headerlink" title="1.新增菜品"></a>1.新增菜品</h4><p>在controller下创建一个CommonController，写入如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/common&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;通用接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sky.upload.local&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadPath;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;文件上传&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;文件上传：&#123;&#125;&quot;</span>, file);</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;上传文件不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理相对路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> Paths.get(uploadPath).toAbsolutePath().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建目录</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(absolutePath);</span><br><span class="line">            <span class="keyword">if</span> (!directory.exists()) &#123;</span><br><span class="line">                directory.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成唯一文件名</span></span><br><span class="line">            <span class="comment">// 获取源文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 获取文件后缀</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            <span class="comment">// 生成文件名(当前时间戳+uuid+后缀)</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> +</span><br><span class="line">                    UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + extension;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> absolutePath + File.separator + fileName;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;文件上传成功，保存路径：&#123;&#125;&quot;</span>, filePath);</span><br><span class="line">            <span class="comment">// 返回完整路径</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;文件上传失败&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Result.error(MessageConstant.UPLOAD_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在sky-server的controller下创建DishController：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/dish&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;菜品相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增菜品：&#123;&#125;&quot;</span>,dishDTO);</span><br><span class="line">        dishService.saveWithFlavor(dishDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下创建DishService：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="comment">//新增菜品和对应的口味</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDTO dishDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service的impl下创建DishServiceImpl：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorMapper dishFlavorMapper;</span><br><span class="line">    <span class="comment">//新增菜品对应的口味</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDTO dishDTO)</span> &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        BeanUtils.copyProperties(dishDTO,dish);</span><br><span class="line">        <span class="comment">//想菜品表插入1条数据</span></span><br><span class="line">        dishMapper.insert(dish);</span><br><span class="line">        <span class="comment">//获取insert语句生成的主键值</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish.getId();</span><br><span class="line">        <span class="comment">//向口味表插入n条数据</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();</span><br><span class="line">        <span class="keyword">if</span>(flavors != <span class="literal">null</span> &amp;&amp; flavors.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            flavors.forEach(dishFlavor -&gt; &#123;</span><br><span class="line">                dishFlavor.setDishId(dishId);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//向口味表插入n条数据</span></span><br><span class="line">            dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个菜品有多个口味数据，向菜品表插入1条数据，向口味表插入n条数据。</strong></p><p><strong>因为涉及到多个表，所以添加@Transactional的注解（需要在启动类上添加@EnableTransactionManagement注解）</strong></p><p>在sky-server的mapper创建DishMapper类，写入insert方法的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据分类id查询菜品数量</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from dish where category_id = #&#123;categoryId&#125;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">countByCategoryId</span><span class="params">(Long categoryId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Dish dish)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下创建DishMapper.xml文件，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.DishMapper&quot;</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insert&quot;</span>&gt;</span><br><span class="line">        insert into <span class="title function_">dish</span><span class="params">(name,category_id,price,image,description,create_time,update_time,create_user,update_user,status)</span></span><br><span class="line">        values (#&#123;name&#125;,#&#123;categoryId&#125;,#&#123;price&#125;,#&#123;image&#125;,#&#123;description&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;,#&#123;status&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper创建DishFlavorMapper类，写入insert方法的代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorMapper</span> &#123;</span><br><span class="line">    <span class="meta">@AutoFill(value= OperationType.INSERT)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;DishFlavor&gt; flavors)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下创建DishFlavorMapper.xml文件，写入如下代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.DishFlavorMapper&quot;</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insertBatch&quot;</span>&gt;</span><br><span class="line">        insert into <span class="title function_">dish_flavor</span> <span class="params">(dish_id,name,value)</span> VALUES</span><br><span class="line">        &lt;foreach collection=<span class="string">&quot;flavors&quot;</span> item=<span class="string">&quot;df&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">            (#&#123;df.dishId&#125;,#&#123;df.name&#125;,#&#123;df.value&#125;)</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>在DishMapper和DishFlavorMapper中的insert方法上添加@AutoFill(value&#x3D; OperationType.INSERT)注解。</p><h4 id="2-分页查询-1"><a href="#2-分页查询-1" class="headerlink" title="2.分页查询"></a>2.分页查询</h4><p>在sky-server的controller中已有的DishController类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;菜品分页查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;菜品分页查询：&#123;&#125;&quot;</span>,dishPageQueryDTO);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> dishService.pageQuery(dishPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>&#123;</span><br><span class="line">    PageHelper.startPage(dishPageQueryDTO.getPage(),dishPageQueryDTO.getPageSize());</span><br><span class="line">    Page&lt;DishVO&gt; page = dishMapper.pageQuery(dishPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(),page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中已有的DishMapper类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;DishVO&gt; <span class="title function_">pageQuery</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下已有的DishMapper.xml中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;pageQuery&quot;</span> resultType=<span class="string">&quot;com.sky.vo.DishVO&quot;</span>&gt;</span><br><span class="line">    select d.* , c.name as categoryName from dish d left outer join category c on d.category_id = c.id</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;</span><br><span class="line">            and d.name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span><br><span class="line">            and d.category_id = #&#123;categoryId&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">            and d.status = #&#123;status&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-删除菜品"><a href="#3-删除菜品" class="headerlink" title="3.删除菜品"></a>3.删除菜品</h4><p>批量删除是在地址栏写入要删除菜品的集合。</p><p>在sky-server的controller中已有的DishController类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;菜品批量删除&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;菜品批量删除：&#123;&#125;&quot;</span>,ids);</span><br><span class="line">        dishService.deleteBatch(ids);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要加一个注解@RequestParam，可以将地址栏中多个数字参数提取出来然后变成List集合。 </p><p>在sky-server的service中已有的DishService类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    <span class="comment">//不能删除：存在起售中的菜品</span></span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span>(dish.getStatus()== StatusConstant.ENABLE)&#123; <span class="comment">//状态为1起售中</span></span><br><span class="line">            <span class="comment">//当前菜品处于起售中，不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不能删除：菜品被套餐关联</span></span><br><span class="line">    List&lt;Long&gt; setmealIds = setmealDishMapper.getSetmealIdsByDishIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(setmealIds != <span class="literal">null</span> &amp;&amp; setmealIds.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//当前菜品被套餐关联了，不能删除</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除菜品表中的菜品数据</span></span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        dishMapper.deleteById(id);</span><br><span class="line">        <span class="comment">//删除口味数据</span></span><br><span class="line">        dishFlavorMapper.deleteByDishId(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量删除用foreach循环来遍历，删除被套餐关联的SQL语句比较复杂。 </p><p>删除菜品表中的菜品数据这里，每次循环需要执行2次SQL，可能会出现性能问题。应该采用如下的SQL形式：delete from dish where id in (?,?,?)。</p><p>在sky-server的mapper中已有的DishMapper类中添加如下代码（负责删除菜品）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据主键删除菜品</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from dish where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中创建DishFlavorMapper类中添加如下代码（负责删除关联的口味数据）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据菜品id删除对应的口味数据</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from dish_flavor where dish_id = #&#123;dishId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByDishId</span><span class="params">(Long dishId)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中创建SetmealDishMapper类中添加如下代码（负责查看是否有关联的套餐）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据菜品id查询对应的套餐id</span></span><br><span class="line">    <span class="comment">//select setmeal_id from setmeal_dish where dish_id in (1,2,3,4)</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">getSetmealIdsByDishIds</span><span class="params">(List&lt;Long&gt; dishIds)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（上步SQL具体实现）在sky-server的resources的mapper中创建SetmealDishMapper类中添加如下代码（思路是去查询套餐表，看套餐菜品id是否和当前传入的id相同）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.SetmealDishMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getSetmealIdsByDishIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select setmeal_id from setmeal_dish where dish_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;dishIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;dishId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;dishId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里比较巧妙的是foreach循环，collection是集合，item是一个个项，separator是分割符号，open是开始符号，close是结束符号。每个元素用逗号分割，然后用大括号括起来。</p><h4 id="4-修改菜品"><a href="#4-修改菜品" class="headerlink" title="4.修改菜品"></a>4.修改菜品</h4><p>在sky-server的controller中已有的DishController类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;DishVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询菜品：&#123;&#125;&quot;</span>,id);</span><br><span class="line">    <span class="type">DishVO</span> <span class="variable">dishVO</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(dishVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品</span></span><br><span class="line">DishVO <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品和对应的口味数据</span></span><br><span class="line"><span class="keyword">public</span> DishVO <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询菜品数据</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">    <span class="comment">//根据菜品id查询口味数据</span></span><br><span class="line">    List&lt;DishFlavor&gt; dishFlavors = dishFlavorMapper.getByDishId(id);</span><br><span class="line">    <span class="comment">//将查询到的数据封装到VO</span></span><br><span class="line">    <span class="type">DishVO</span> <span class="variable">dishVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishVO</span>() ;</span><br><span class="line">    BeanUtils.copyProperties(dish,dishVO);</span><br><span class="line">    dishVO.setFlavors(dishFlavors);</span><br><span class="line">    <span class="keyword">return</span> dishVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中已有的dishFlavorMapper类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from dish_flavor where dish_id=#&#123;dishId&#125;&quot;)</span></span><br><span class="line">List&lt;DishFlavor&gt; <span class="title function_">getByDishId</span><span class="params">(Long dishId)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的controller中已有的DishController类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改菜品</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改菜品；&#123;&#125;&quot;</span>,dishDTO);</span><br><span class="line">    dishService.updateWithFlavor(dishDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id修改菜品基本信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDTO dishDTO)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id修改菜品基本信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDTO dishDTO)</span>&#123;</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">    BeanUtils.copyProperties(dishDTO,dish);</span><br><span class="line">    <span class="comment">//修改菜品表基本信息</span></span><br><span class="line">    dishMapper.update(dish);</span><br><span class="line">    <span class="comment">//删除原有的口味数据</span></span><br><span class="line">    dishFlavorMapper.deleteByDishId(dishDTO.getId());</span><br><span class="line">    <span class="comment">//重新插入口味数据</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();</span><br><span class="line">    <span class="keyword">if</span>(flavors != <span class="literal">null</span> &amp;&amp; flavors.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        flavors.forEach(dishFlavor -&gt;&#123;</span><br><span class="line">            dishFlavor.setDishId(dishDTO.getId());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>口味的修改比较麻烦，有可能是删除了再新增，有可能不删除，有可能没删除直接新增。</p><p>处理方法：直接把菜品原先关联的口味数据删掉，然后再按照当前传来的口味重新插入数据。</p><p>传入DTO不合适，因为DTO里有口味数据，而修改菜品不应该包含口味，所以应该只传入一个Dish数据。</p><p>  在sky-server的mapper中已有的dishFlavorMapper类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id动态修改菜品</span></span><br><span class="line"><span class="meta">@AutoFill(value=OperationType.UPDATE)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper中已有的dishFlavorMapper.xml类中添加代码如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update dish</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span>category_id = #&#123;categoryId&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;price != null&quot;</span>&gt;</span>price = #&#123;price&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span>image = #&#123;image&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null&quot;</span>&gt;</span>description = #&#123;description&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span>update_Time = #&#123;updateTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateUser != null&quot;</span>&gt;</span>update_User = #&#123;updateUser&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里用的是动态SQL。</p><h3 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h3><h4 id="1-新增套餐"><a href="#1-新增套餐" class="headerlink" title="1. 新增套餐"></a>1. 新增套餐</h4><p>1.2.1 DishController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span>&#123;</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(categoryId);</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.2 DishService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span>;</span><br></pre></td></tr></table></figure><p>1.2.3 DishServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> Dish.builder()</span><br><span class="line">        .categoryId(categoryId)</span><br><span class="line">        .status(StatusConstant.ENABLE)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> dishMapper.list(dish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.4 DishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态条件查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure><p>1.2.5 DishMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dish&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Dish&quot;</span>&gt;</span></span><br><span class="line">    select * from dish</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.2.6 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;套餐相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增套餐&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">        setmealService.saveWithDish(setmealDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.7 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDTO setmealDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.8 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐业务实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishMapper setmealDishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">        BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向套餐表插入数据</span></span><br><span class="line">        setmealMapper.insert(setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取生成的套餐id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmeal.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">        setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class="line">            setmealDish.setSetmealId(setmealId);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存套餐和菜品的关联关系</span></span><br><span class="line">        setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.9 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@AutoFill(OperationType.INSERT)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Setmeal setmeal)</span>;</span><br></pre></td></tr></table></figure><p>1.2.10 SetmealMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Setmeal&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into setmeal</span><br><span class="line">    (category_id, name, price, status, description, image, create_time, update_time, create_user, update_user)</span><br><span class="line">    values (#&#123;categoryId&#125;, #&#123;name&#125;, #&#123;price&#125;, #&#123;status&#125;, #&#123;description&#125;, #&#123;image&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;,</span><br><span class="line">    #&#123;createUser&#125;, #&#123;updateUser&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.2.11 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDishes</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;SetmealDish&gt; setmealDishes)</span>;</span><br></pre></td></tr></table></figure><p>1.2.12 SetmealDishMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    insert into setmeal_dish</span><br><span class="line">    (setmeal_id,dish_id,name,price,copies)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;setmealDishes&quot;</span> <span class="attr">item</span>=<span class="string">&quot;sd&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;sd.setmealId&#125;,#&#123;sd.dishId&#125;,#&#123;sd.name&#125;,#&#123;sd.price&#125;,#&#123;sd.copies&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-套餐分页查询"><a href="#2-套餐分页查询" class="headerlink" title="2. 套餐分页查询"></a>2. 套餐分页查询</h4><p>2.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;分页查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> setmealService.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PageResult <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>2.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> setmealPageQueryDTO.getPage();</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> setmealPageQueryDTO.getPageSize();</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">    Page&lt;SetmealVO&gt; page = setmealMapper.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.4 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Page&lt;SetmealVO&gt; <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>2.2.5 SetmealMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.vo.SetmealVO&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    s.*,c.name categoryName</span><br><span class="line">    from</span><br><span class="line">    setmeal s</span><br><span class="line">    left join</span><br><span class="line">    category c</span><br><span class="line">    on</span><br><span class="line">    s.category_id = c.id</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and s.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and s.status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and s.category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by s.create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h4><p>3.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;批量删除套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    setmealService.deleteBatch(ids);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p>3.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    ids.forEach(id -&gt; &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span>(StatusConstant.ENABLE == setmeal.getStatus())&#123;</span><br><span class="line">            <span class="comment">//起售中的套餐不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.SETMEAL_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ids.forEach(setmealId -&gt; &#123;</span><br><span class="line">        <span class="comment">//删除套餐表中的数据</span></span><br><span class="line">        setmealMapper.deleteById(setmealId);</span><br><span class="line">        <span class="comment">//删除套餐菜品关系表中的数据</span></span><br><span class="line">        setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.4 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Setmeal <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><p>3.2.5 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据套餐id删除套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h4 id="4-修改套餐"><a href="#4-修改套餐" class="headerlink" title="4. 修改套餐"></a>4. 修改套餐</h4><p>4.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐，用于修改页面回显数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SetmealVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> setmealService.getByIdWithDish(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    setmealService.update(setmealDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐和关联的菜品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SetmealVO <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SetmealDTO setmealDTO)</span>;</span><br></pre></td></tr></table></figure><p>4.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐和套餐菜品关系</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> SetmealVO <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDishMapper.getBySetmealId(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealVO</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmeal, setmealVO);</span><br><span class="line">    setmealVO.setSetmealDishes(setmealDishes);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> setmealVO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、修改套餐表，执行update</span></span><br><span class="line">    setmealMapper.update(setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmealDTO.getId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、删除套餐和菜品的关联关系，操作setmeal_dish表，执行delete</span></span><br><span class="line">    setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">    setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class="line">        setmealDish.setSetmealId(setmealId);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3、重新插入套餐和菜品的关联关系，操作setmeal_dish表，执行insert</span></span><br><span class="line">    setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2.4 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据套餐id查询套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Select(&quot;select * from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line">   List&lt;SetmealDish&gt; <span class="title function_">getBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h4 id="5-起售停售套餐"><a href="#5-起售停售套餐" class="headerlink" title="5. 起售停售套餐"></a>5. 起售停售套餐</h4><p>5.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;套餐起售停售&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class="line">    setmealService.startOrStop(status, id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售、停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span>;</span><br></pre></td></tr></table></figure><p>5.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售、停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//起售套餐时，判断套餐内是否有停售菜品，有停售菜品提示&quot;套餐内包含未启售菜品，无法启售&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(status == StatusConstant.ENABLE)&#123;</span><br><span class="line">        <span class="comment">//select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?</span></span><br><span class="line">        List&lt;Dish&gt; dishList = dishMapper.getBySetmealId(id);</span><br><span class="line">        <span class="keyword">if</span>(dishList != <span class="literal">null</span> &amp;&amp; dishList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            dishList.forEach(dish -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(StatusConstant.DISABLE == dish.getStatus())&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SetmealEnableFailedException</span>(MessageConstant.SETMEAL_ENABLE_FAILED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> Setmeal.builder()</span><br><span class="line">        .id(id)</span><br><span class="line">        .status(status)</span><br><span class="line">        .build();</span><br><span class="line">    setmealMapper.update(setmeal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.2.4 DishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据套餐id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">getBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h2 id="三-Redis使用"><a href="#三-Redis使用" class="headerlink" title="三 Redis使用"></a>三 Redis使用</h2><h3 id="营业状态"><a href="#营业状态" class="headerlink" title="营业状态"></a>营业状态</h3><p>设置营业状态；管理端查询营业状态，用户端查询营业状态（管理端和用户端查询路径不同）。</p><p>营业状态存储在Redis中，不用在Mysql中单独创建一张表。</p><p>在controller&#x2F;admin下创建ShopController这个是管理端的，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;adminShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/shop&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;店铺相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY=<span class="string">&quot;SHOP_STATUS&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">//设置店铺营业状态</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;设置店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setStatus</span><span class="params">( <span class="meta">@PathVariable</span> Integer status)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;设置店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span> ?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;SHOP_STATUS&quot;</span>,status);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取店铺的营业状态</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取到店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span>?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>在controller下创建user包，然后把amin的ShopController复制到这个下面，然后进行简单修改，只保留获取状态的。因为有2个类类名相同，会导致Bean冲突，所以我们要在@RestController中指定Bean的名称。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;userShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/shop&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;店铺相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY=<span class="string">&quot;SHOP_STATUS&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">//获取店铺的营业状态</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取到店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span>?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-客户端"><a href="#四-客户端" class="headerlink" title="四 客户端"></a>四 客户端</h2><h3 id="1-HttpClient"><a href="#1-HttpClient" class="headerlink" title="1 HttpClient"></a>1 HttpClient</h3><h4 id="1-1-HttpClient-介绍"><a href="#1-1-HttpClient-介绍" class="headerlink" title="1.1 (HttpClient)介绍"></a>1.1 (HttpClient)介绍</h4><p>介绍：在Java中通过编码的方式发送HTTP请求。</p><p>HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p><p>maven坐标：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-HttpClient-发GET请求"><a href="#1-2-HttpClient-发GET请求" class="headerlink" title="1.2 (HttpClient)发GET请求"></a>1.2 (HttpClient)发GET请求</h4><p>要保证当前项目已经提前启动好了。</p><p>在key-server&#x2F;src&#x2F;test&#x2F;java&#x2F;com&#x2F;sky&#x2F;test下面创建HttpClientTest类然后写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTest</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="comment">//创建请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/user/shop/status&quot;</span>);</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">//获取服务端返回的状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的状态码为：&quot;</span>+statusCode);</span><br><span class="line">        <span class="comment">//获取服务端返回的数据</span></span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的数据为：&quot;</span>+body);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-HttpClient-发POST请求"><a href="#1-3-HttpClient-发POST请求" class="headerlink" title="1.3 (HttpClient)发POST请求"></a>1.3 (HttpClient)发POST请求</h4><p>要保证当前项目已经提前启动好了。POST需要提前传入参数。</p><p>在上一节的HttpClientTest类中写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPOST</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建httpclient对象</span></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//创建请求对象</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    jsonObject.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    jsonObject.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonObject.toString());</span><br><span class="line">    <span class="comment">//指定请求编码方式</span></span><br><span class="line">    entity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//数据格式</span></span><br><span class="line">    entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    httpPost.setEntity(entity);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">    <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">    System.out.println(<span class="string">&quot;响应码为：&quot;</span>+statusCode);</span><br><span class="line">    <span class="type">HttpEntity</span> <span class="variable">entity1</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity1);</span><br><span class="line">    System.out.println(<span class="string">&quot;响应数据为：&quot;</span>+body);</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与Get不同的是，这里添加了登录的参数以及请求编码的方式和数据的格式，其它的基本都是相同的。</p><p>这个其实是调用了登录的API，最后会返回一个Token。</p><h3 id="2-缓存商品和购物车"><a href="#2-缓存商品和购物车" class="headerlink" title="2 缓存商品和购物车"></a>2 缓存商品和购物车</h3><h4 id="2-1-本章内容介绍"><a href="#2-1-本章内容介绍" class="headerlink" title="2.1 本章内容介绍"></a>2.1 本章内容介绍</h4><p>菜品和套餐存储在数据库中，如果短期内有大量的人查询会导致数据库压力过大，用户体验不佳。现在把商品数据缓存到Redis中。</p><p>加入购物车，查看购物车，可以看到购物车中的商品，可以清空购物车，还可以添加商品到购物车。</p><p>缓存菜品 -&gt; 缓存套餐 -&gt; 添加购物车 -&gt; 查看购物车 -&gt; 清空购物车，从购物车中减去某个商品。</p><h4 id="2-2-缓存菜品-设计分析"><a href="#2-2-缓存菜品-设计分析" class="headerlink" title="2.2 (缓存菜品)设计分析"></a>2.2 (缓存菜品)设计分析</h4><p>问题说明：小程序菜品数据是通过数据库获得，如果用户端访问量过大，数据库的压力会增加。</p><p>实现思路：通过Redis来缓存菜品数据，减少数据库查询操作。内存操作的性能比磁盘IO性能更高。</p><p>每个分类下的菜品保存一份缓存数据。</p><p>数据库中菜品数据有变更时要清理缓存数据。</p><h4 id="2-3-缓存菜品-代码开发"><a href="#2-3-缓存菜品-代码开发" class="headerlink" title="2.3 (缓存菜品)代码开发"></a>2.3 (缓存菜品)代码开发</h4><p>在sky-server下的controller&#x2F;user下的DishController类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;userDishController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/dish&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;C端-菜品浏览接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">// 根据分类id查询菜品</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">        <span class="comment">//构造redis中的key，规则：dish_分类id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + categoryId;</span><br><span class="line">        <span class="comment">//查询redis中是否存在菜品数据</span></span><br><span class="line">        List&lt;DishVO&gt; list = (List&lt;DishVO&gt;)redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;<span class="comment">//如果存在，直接返回，无须查询数据库</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        dish.setCategoryId(categoryId);</span><br><span class="line">        dish.setStatus(StatusConstant.ENABLE);<span class="comment">//查询起售中的菜品</span></span><br><span class="line">        <span class="comment">//如果不存在，查询数据库，将查询到的数据放入redis中</span></span><br><span class="line">        list = dishService.listWithFlavor(dish);</span><br><span class="line">        redisTemplate.opsForValue().set(key,list);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在小程序助手中编译，然后在不同的菜类间切换（比如蜀味烤鱼和蜀味牛蛙），效果是第一次IDEA的控制台会输出SQL语句，然后去看Redis会发现已经有了缓存。然后继续在前面已缓存的菜类间切换，会发现控制台不再输出SQL语句，说明走的是Redis缓存。</p><h4 id="2-4-缓存菜品-清理缓存"><a href="#2-4-缓存菜品-清理缓存" class="headerlink" title="2.4 (缓存菜品)清理缓存"></a>2.4 (缓存菜品)清理缓存</h4><p>不清理可能出现的问题：比如菜品的价格如果被修改，如果继续从Redis从取数据，会导致数据的不一致。</p><p>新增菜品、修改菜品、批量删除菜品、起售和停售菜品的时候需要清理缓存。</p><p>所以需要在controller下的admin中的DishController中修改代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理缓存数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanCache</span><span class="params">(String pattern)</span>&#123;</span><br><span class="line">    <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(pattern);</span><br><span class="line">    redisTemplate.delete(keys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在update、delete方法中调用完service的方法后：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cleanCache(<span class="string">&quot;dish_*&quot;</span>);</span><br></pre></td></tr></table></figure><p>在save方法中调用service的方法后：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDTO.getCategoryId();</span><br><span class="line">cleanCache(key);<span class="comment">//清理缓存数据</span></span><br></pre></td></tr></table></figure><h4 id="2-5-缓存菜品-功能测试"><a href="#2-5-缓存菜品-功能测试" class="headerlink" title="2.5 (缓存菜品)功能测试"></a>2.5 (缓存菜品)功能测试</h4><p>首先把所有的菜类都缓存到Redis中（在小程序助手里把所有菜类都点一遍），然后在电脑管理端的前端平台修改某一道菜，然后再看Redis的可视化面板，看看是不是所有的Redis都被清空。</p><h4 id="2-6-SpringCache介绍"><a href="#2-6-SpringCache介绍" class="headerlink" title="2.6 SpringCache介绍"></a>2.6 SpringCache介绍</h4><p>SpringCache是Spring提供的缓存框架。提供了基于注解的缓存功能。</p><p>SpringCache提供了一层抽象，底层可以切换不同的缓存实现（只需要导入不同的Jar包即可），如EHCache，Caffeine，Redis。</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能，通常加在启动类上</td></tr><tr><td>@Cacheable</td><td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><h4 id="2-7-SpringCache"><a href="#2-7-SpringCache" class="headerlink" title="2.7 SpringCache"></a>2.7 SpringCache</h4><p>依赖导入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-8-SpringCache入门"><a href="#2-8-SpringCache入门" class="headerlink" title="2.8 SpringCache入门"></a>2.8 SpringCache入门</h4><p>在启动类上加@EnableCaching</p><p>在controller层的UserController下的save方法上写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#user.id&quot;)</span> <span class="comment">//如果使用spring Cache缓存数据，key的生成：userCache::1。user是从参数取到的。</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#result.id&quot;) //result是从返回值return取到的</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#p0.id&quot;)</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#a0.id&quot;)</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#root.args[0].id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意key&#x3D;”#result.id”中的result取的是返回值返回的那个结果。 key&#x3D;”#user.id”的user取的是传入的参数。p0，a0，root.args[0]表示取的都是第1个参数。</p><p>在controller层的UserController下的getById方法上写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;userCache&quot;,key=&quot;#id&quot;)</span></span><br></pre></td></tr></table></figure><p>然后在方法体的第1行打上断点，点击小虫，然后到localhost:8888&#x2F;doc.html中对get方法进行测试，发送1，效果是：直接从Redis中返回数据，压根不会触发断点。</p><p>现在手动删除id为1的数据，然后重新在doc.html中发送数据，然后会执行断点，放心后控制台输出SQL语句，然后Redis缓存中也有数据。</p><p>在controller层的UserController下的deleteById和deleteAll方法上加入如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;userCache&quot;,key=&quot;#id&quot;)</span> <span class="comment">//key的形式 userCache::10</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;userMapper.deleteById(id);&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/delAll&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames=&quot;userCache&quot;,allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试的话可以在两个方法内的第1行打上断点，点击小虫，然后到localhost:8888&#x2F;doc.html中对delete和deleteAll方法进行测试，先通过getById方法增加几个数据，然后再逐一删除。</p><p>可以这么理解cacheNames里的参数就是指定key的名字，只会删除相应的key。</p><h4 id="2-9-缓存套餐-代码开发"><a href="#2-9-缓存套餐-代码开发" class="headerlink" title="2.9 (缓存套餐)代码开发"></a>2.9 (缓存套餐)代码开发</h4><p>首先要在sky-server包下导入下面两个坐标：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后要在sky-server包下的启动类SkyApplication类上加如下注解：</p><p><code>@EnableCaching</code></p><p>首先是在controller&#x2F;user包下的SetmealController类中的list方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;setmealCache&quot;,key=&quot;#categoryId&quot;)</span> <span class="comment">//key: setmealCache::100</span></span><br></pre></td></tr></table></figure><p>然后是在controller&#x2F;admin包下的SetmealController类中的save方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(cacheNames=&quot;setmealCache&quot;,key=&quot;#setmealDTO.categoryId&quot;)</span></span><br></pre></td></tr></table></figure><p>最后是在controller&#x2F;admin包下的SetmealController类中的update、delete、startOrStop方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;,allEntries = true)</span></span><br></pre></td></tr></table></figure><h4 id="2-10-添购物车"><a href="#2-10-添购物车" class="headerlink" title="2.10 (添购物车)"></a>2.10 (添购物车)</h4><p>在sky-server的controller的user中创建一个名为ShoppingCartController类，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/shoppingCart&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;C端购物车相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加购物车&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCartDTO shoppingCartDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;添加购物车，商品信息为：&#123;&#125;&quot;</span>,shoppingCartDTO);</span><br><span class="line">        shoppingCartService.addShoppingCart(shoppingCartDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在sky-server的service下创建ShoppingCartService类，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="comment">//添加购物车</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在sky-server的service的Impl下创建ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善sky-server的service的Impl下的ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);</span><br><span class="line">        <span class="comment">//userid暂时还不知道，从ThreadLocal取</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);</span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            cart.setNumber(cart.getNumber()+<span class="number">1</span>);</span><br><span class="line">            shoppingCartMapper.updateNumberById(cart);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper下的ShoppingCartMapper类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartMapper</span> &#123;</span><br><span class="line">    List&lt;ShoppingCart&gt; <span class="title function_">list</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br><span class="line">    <span class="comment">//根据id修改商品数量</span></span><br><span class="line">    <span class="meta">@Update(&quot;update shopping_cart set number = #&#123;number&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateNumberById</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下的ShoppingCartMapper.xml类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.ShoppingCartMapper&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;select id=<span class="string">&quot;list&quot;</span> resultType=<span class="string">&quot;com.sky.entity.ShoppingCart&quot;</span>&gt;</span><br><span class="line">        select * from shopping_cart</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;userId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">user_id</span> <span class="operator">=</span> #&#123;userId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;setmealId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">setmeal_id</span> <span class="operator">=</span> #&#123;setmealId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;dishId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">dish_id</span> <span class="operator">=</span> #&#123;dishId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;dishFlavor != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">dish_flavor</span> <span class="operator">=</span> #&#123;dishFlavor&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>完善sky-server的service的Impl下的ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);</span><br><span class="line">        <span class="comment">//userid暂时还不知道，从ThreadLocal取</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);</span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            cart.setNumber(cart.getNumber()+<span class="number">1</span>);</span><br><span class="line">            shoppingCartMapper.updateNumberById(cart);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">            <span class="comment">//判断本次添加到购物车的是菜品还是套餐,因为要查询不同表</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCartDTO.getDishId();</span><br><span class="line">            <span class="keyword">if</span>(dishId!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//本次添加到购物车的是菜品</span></span><br><span class="line">                <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(dishId);</span><br><span class="line">                shoppingCart.setName(dish.getName());</span><br><span class="line">                shoppingCart.setImage(dish.getImage());</span><br><span class="line">                shoppingCart.setAmount(dish.getPrice());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//本次添加到购物车的是套餐</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> shoppingCartDTO.getSetmealId();</span><br><span class="line">                <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(setmealId);</span><br><span class="line">                shoppingCart.setName(setmeal.getName());</span><br><span class="line">                shoppingCart.setImage(setmeal.getImage());</span><br><span class="line">                shoppingCart.setAmount(setmeal.getPrice());</span><br><span class="line">            &#125;</span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">            shoppingCartMapper.insert(shoppingCart);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在shoppingCartMapper中添加insert方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into shopping_cart(name,user_id,dish_id,setmeal_id,dish_flavor,number,amount,image,create_time)&quot; +</span></span><br><span class="line"><span class="meta">    &quot;value (#&#123;name&#125;,#&#123;userId&#125;,#&#123;dishId&#125;,#&#123;setmealId&#125;,#&#123;dishFlavor&#125;,#&#123;number&#125;,#&#123;amount&#125;,#&#123;image&#125;,#&#123;createTime&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br></pre></td></tr></table></figure><h4 id="2-11-查看购物车"><a href="#2-11-查看购物车" class="headerlink" title="2.11 查看购物车"></a>2.11 查看购物车</h4><p>在sky-server的controller下的ShoppingCartController类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查看购物车&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.showShoppingCart();</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下的ShoppingCartService类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ShoppingCart&gt; <span class="title function_">showShoppingCart</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl下的ShoppingCartServiceImpl类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ShoppingCart&gt; <span class="title function_">showShoppingCart</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> ShoppingCart.builder()</span><br><span class="line">                    .userId(userId)</span><br><span class="line">                    .build();</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);<span class="comment">//只需要传userid即可</span></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-清空购物车"><a href="#2-12-清空购物车" class="headerlink" title="2.12 清空购物车"></a>2.12 清空购物车</h4><p>在sky-server的controller下的ShoppingCartController类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;清空购物车&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">    shoppingCartService.clean();</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下的ShoppingCartService类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空购物车</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl下的ShoppingCartServiceImpl类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空购物车</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCartMapper.deleteByUserId(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper的ShoppingCartMapper类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from shopping_cart where user_id=#&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByUserId</span><span class="params">(Long userId)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>软件开发整体介绍</title>
      <link href="/2024/10/03/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/10/03/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-软件开发流程"><a href="#1-软件开发流程" class="headerlink" title="1.软件开发流程"></a>1.软件开发流程</h2><img src="1.png" style="zoom: 33%;"><h2 id="2-角色分工"><a href="#2-角色分工" class="headerlink" title="2.角色分工"></a>2.角色分工</h2><img src="2.png" style="zoom:50%;"><h2 id="3-软件环境"><a href="#3-软件环境" class="headerlink" title="3.软件环境"></a>3.软件环境</h2><p><img src="3.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo搭建个人博客</title>
      <link href="/2024/09/30/%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/09/30/%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境及工具准备"><a href="#1-环境及工具准备" class="headerlink" title="1.环境及工具准备"></a>1.环境及工具准备</h2><p>需要安装git和nodejs</p><p>安装完成后打开cmd控制台，输入命令<code>npm install hexo-cli -g</code>，安装Hexo</p><h2 id="2-仓库搭建"><a href="#2-仓库搭建" class="headerlink" title="2.仓库搭建"></a>2.仓库搭建</h2><p>进入github网站后，点击创建仓库<code>create repository</code></p><p><img src="1.png"></p><p>仓库名字最好是用户名+.github.io,设置为公开仓库，公选设置生成readme文件</p><p><img src="2.png"></p><h2 id="3-配置ssh-key"><a href="#3-配置ssh-key" class="headerlink" title="3.配置ssh key"></a>3.配置ssh key</h2><p>回到桌面右击鼠标选择G0it Bash Here</p><p>在命令行中输入：<code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code></p><p>后面提示一直按enter回车键就行</p><p>之后进入本地磁盘C:\Users\用户名字\ .ssh</p><p>打开.pub文件，将里面的内容复制</p><p>之后回到github网站页面，点击右上角头像，选择setting，之后再点击ssh and gpg keys,然后再new ssh key</p><p><img src="3.png"></p><p>之后标题任意，把复制的ssh key粘贴在key填写框中</p><p><img src="5.png"></p><p>然后点击创建add ssh key</p><p>回到git命令窗口，输入<code>ssh -T git@github.com</code>，出现下方提示就成功了</p><p><img src="6.png"></p><h2 id="4-本地部署"><a href="#4-本地部署" class="headerlink" title="4.本地部署"></a>4.本地部署</h2><p>先在本地磁盘上创建一个文件夹，用于存放博客数据，这里我选择创建的是D:\BlogkFile目录</p><p>然后在此目录下右击鼠标选择git bash here</p><p>在命令窗口输入：<code>hexo init</code> 进行初始化</p><p>​   <code>npx hexo instal</code>l 安装</p><p>​   <code>npx hexo g </code>生成</p><p>​                               <code>npx hexo s</code> 本地部署</p><p>最后命令窗口会有一个链接，打开就可以进入本地部署的hexo了</p><p><img src="7.png"></p><p><img src="8.png"></p><p><strong>ctrl+c 停止本地服务器</strong></p><h2 id="5-上线博客"><a href="#5-上线博客" class="headerlink" title="5.上线博客"></a>5.上线博客</h2><p>打开文件夹中的config文件</p><p><img src="9.png"></p><p>复制这段文字：</p><p>type: git<br>repository:<br>branch: main</p><p>将它粘贴在config文件下面，将原来底部的type：‘ ’替换掉</p><p><img src="10.png"></p><p>之后回到github网站，回到自己的仓库，点击code复制git链接</p><p><img src="11.png"></p><p>将链接粘贴到config文件中的repository：旁边</p><p><img src="12.png"></p><p>保存退出，然后在本地博客文件夹中git bash here，输入命令<code>npx hexo g</code>，<code>npx hexo g</code>上传</p><p><strong>$ npx hexo d</strong><br><strong>INFO Validating config</strong><br><strong>ERROR Deployer not found: git</strong><br><strong>如果出现这个问题，在bash界面输入npm install hexo-deployer-git –save后再输入npx hexo d即可解决</strong></p><p>注意第一次使用要填写git邮箱与用户名字</p><p>然后结束后会弹窗，登入即可</p><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>我们的博客标题还是默认的hexo，整个页面是初始默认的，接下来我们对其进行修改</p><p>用记事本打开我们blog文件夹中的_config.yml文件</p><p>将#Site下面按自己的需求填上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Site</span><br><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">keywords: 关键词</span><br><span class="line">author: 站主</span><br><span class="line">language: 语言（可以填写zh-CN）</span><br><span class="line">timezone: 时区（可以填写Asia/Shanghai）</span><br></pre></td></tr></table></figure><p>然后保存</p><h2 id="如何上传文章"><a href="#如何上传文章" class="headerlink" title="如何上传文章"></a>如何上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 文章标题</span><br></pre></td></tr></table></figure><p>文章是.md格式，在我们的Blog文件夹中的source&#x2F;_posts中</p><p>推荐用Typora软件来编辑.md格式的文件</p><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>写好以后，我们还是一样打开git bash生成、上传</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><p>至此，我们就成功搭建好基本的博客了，剩下的就是对博客的一些优化和美化了。</p><p>推荐主题：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a>，<a href="http://docs.anheyu.com/">anzhiyu</a></p><h2 id="相关问题解决"><a href="#相关问题解决" class="headerlink" title="相关问题解决"></a>相关问题解决</h2><h3 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h3><p>这个错误 <code>fatal: unable to access &#39;https://github.com/mingea/mingea.github.io.git/&#39;: OpenSSL SSL_read: Connection was reset, errno 10054</code> 是一个典型的 <strong>网络连接问题</strong>，通常是 GitHub 连接被重置导致的。</p><p><strong>步骤：</strong></p><ol><li><p><strong>生成 SSH 密钥</strong>（如果你还没有）：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>直接按回车使用默认路径和空密码。</p></li><li><p><strong>将公钥添加到 GitHub</strong>：</p><ul><li>复制公钥内容：<code>cat ~/.ssh/id_rsa.pub</code></li><li>登录 GitHub → Settings → SSH and GPG keys → New SSH key</li><li>粘贴公钥内容</li></ul></li><li><p><strong>修改部署配置</strong>：<br>将 <code>_config.yml</code> 中的 repository地址改为 SSH 格式：</p><p>yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:mingea/mingea.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p><strong>测试 SSH 连接</strong>：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果显示 “You’ve successfully authenticated”，说明配置成功。</p></li><li><p><strong>重新部署</strong>：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx hexo clean &amp;&amp; npx hexo g &amp;&amp; npx hexo d</span><br></pre></td></tr></table></figure></li></ol><h3 id="图片加载问题"><a href="#图片加载问题" class="headerlink" title="图片加载问题"></a>图片加载问题</h3><ul><li>进入你博客的根目录，然后下面顺序找到<code>index.js</code>:<br><code>node_modules</code> –&gt; <code>hexo-asset-image</code> –&gt; <code>index.js</code></li><li>用<a href="https://zhida.zhihu.com/search?content_id=208599834&content_type=Article&match_order=1&q=VS+Code&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NTk2MzAxMDIsInEiOiJWUyBDb2RlIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MjA4NTk5ODM0LCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.qFI2a32pQBViRBwWoK2sPR_ButdW9O7vrFdS459m-GM&zhida_source=entity">VS Code</a> 或者 记事本打开 <code>index.js</code></li><li>在第 58 行，可以找到这么一行代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br></pre></td></tr></table></figure><ul><li>把这一行代码改成下面这样</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, src);</span><br></pre></td></tr></table></figure><ul><li>保存文件</li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>进入博客的根目录</li><li><code>node_modules</code> –&gt; <code>hexo-asset-image</code> –&gt; 打开 <code>README.md</code>, 里面写了用法。我截了个图：</li></ul><p><img src="https://pic3.zhimg.com/v2-743a77f20e7c4ed5e7dcf3aec2383672_1440w.png" alt="img"></p><p>Usage of hexo-asset-image</p><p><strong>注意</strong></p><ul><li>要先把 <code>_config.yml</code>中的 <code>post_asset_folder: false</code> 改成 <code>post_asset_folder: true</code> (默认是false，如果你没有修改过，那请去修改)</li><li>圆括号里面只要写 图片名.后缀 就可以了，不要多加任何的东西。</li></ul><p>最后，<code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 三部曲，然后进入浏览器打开<code>localhost:4000</code> 就可以看到你想要的图片.</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
