<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Linux操作系统</title>
      <link href="/2024/09/13/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/09/13/Linux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章-Linux-入门"><a href="#第一章-Linux-入门" class="headerlink" title="第一章 Linux 入门"></a>第一章 Linux 入门</h1><h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟悉Linux是什么</p><p>2 熟悉Linux的优势</p><p>3 可以比较Linux和Windows</p><p>4 了解Linux的常见版本</p><h2 id="第一节-Linux是什么"><a href="#第一节-Linux是什么" class="headerlink" title="第一节 Linux是什么"></a>第一节 Linux是什么</h2><p><img src="Linux2_J-b9oqxOCM.png"></p><p>Linux内核最初只是由芬兰人林纳斯 <strong>·</strong> 托瓦兹（LinusTorvalds）在赫尔辛基大学上学时出于个人爱好而编写的。<br>Linux是一套免费使用和自由传播的类Unix操作系统，是一个基于POSIX和UNIX的多用户、多任务、支持多线<br>程和多CPU的操作系统。Linux能运行主要的UNIX工具软件、应用程序和网络协议。它支持 32 位和 64 位硬件。Linux继承了Unix以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。。</p><h2 id="第二节-Linux的优势"><a href="#第二节-Linux的优势" class="headerlink" title="第二节 Linux的优势"></a>第二节 Linux的优势</h2><p>Linux系统的优势主要体现在服务器端应用方面，在PC端还是Windows系统对用户操作体验和应用程序的支持<br>更好。具体体现是：</p><ul><li><p>性能强劲，安全稳定<br>Linux本来就是基于Unix概念而发展出来的操作系统，当然也继承了Unix稳定高效的特点。使用Linux系统的<br>主机连续工作 1 年以上不死机、不重启是非常常见的。所以很多电影、动画中的特效制作这样需要强大运算能力的工作都是运行在Linux系统之上。</p></li><li><p>可定制<br>如果你对Linux足够了解，完全可以使用Linux内核搭配需要的组件构成一个定制版系统，甚至你可以修改Linux源码进行深度定制免费或少许费用学习Linux可以免费使用Linux的各种发行版，在商业用途中往往也只是支付很少的费用即可</p></li><li><p>硬件配置要求低</p></li></ul><p>Linux内核只有几KB大小，仅运行内核的话需要的系统开销很小，以命令行方式操作Linux也一样。以图形化<br>界面方式运行Linux需要的资源也比Windows更少。</p><ul><li>嵌入移动设备<br>由于Linux只需要很少的资源就能够驱动所有硬件设备工作，所以非常适合嵌入到手机等移动设备中，例如现<br>在我们使用的Android系统就是以Linux为核心的。</li></ul><h2 id="第三节-Linux和Windows比较"><a href="#第三节-Linux和Windows比较" class="headerlink" title="第三节 Linux和Windows比较"></a>第三节 Linux和Windows比较</h2><p><img src="image-20230703202245876.png"></p><h2 id="第四节-Linux的常见版本"><a href="#第四节-Linux的常见版本" class="headerlink" title="第四节 Linux的常见版本"></a>第四节 Linux的常见版本</h2><blockquote><p>严格来讲，Linux这个词本身只表示Linux内核，但实际上人们已经习惯了用Linux来形容整个基于Linux内核。各不同版本Linux，都是基于相同的内核版本，只是用的内核版本可能有高有低，同时各厂家自己加了自己有特点的工具，还有某些文件位置不一样，不同版本的Linux相同度可以达90%</p></blockquote><p><img src="gunLinux_WoP18w7bfa.png"></p><blockquote><p>RedHat家族</p></blockquote><ul><li><p>Redhat企业版：  这个需要授权费，主要用在高要求的服务器商用系统</p></li><li><p>CentOS：CentOS全名为“社区企业操作系统”，CentOS社区将Red hat的网站上的所有源代码下载下来，进行重新编译。初学Linux通常会选择CentOS，这其实是RedHat收费后去掉收费功能而发布的一个免费的社区版</p></li><li><p>Fedara：被红帽公司定位为新技术的实验场地，许多新的技术都会在 FC 中检验</p></li><li><p>其他 ：Scientific Linux  、Oracle Linux</p></li></ul><blockquote><p>Debian 家族</p></blockquote><ul><li><p>Debian：运行起来极其稳定，这使得它非常适合用于服务器，Debian这款操作系统无疑并不适合新手用户，而是适合系统管理员和高级用户。</p></li><li><p>Ubuntu：Debian的一款衍生版，也是当今最受欢迎的免费操作系统,是一个以桌面应用为主的Linux操作系统</p></li><li><p>其他基于Debian的版本有：Linux Mint、Knoppix、MEPIS、sidux、CrunchBang Linux、Chromium OS、Google Chrome OS</p></li></ul><blockquote><p>SUSE家族</p></blockquote><ul><li><p>SUSE：是欧洲大陆最流行的LINUX起源于德国，于2003年末被Novell收购</p></li><li><p>SUSE Linux ：针对个人用户，可以免费下载</p></li><li><p>SUSE Linux Enterprise Server&#x20;</p></li><li><p>SUSE Linux Enterprise Desktop</p></li><li><p>SUSE Manager</p></li><li><p>SUSE Studio</p></li></ul><blockquote><p>Gentoo家族</p></blockquote><ul><li><p>Gentoo：是Linux世界最年轻的发行版本，正因为年轻，所以能吸取在她之前的所有发行版本的优点</p></li><li><p>Gentoo Linux</p></li><li><p>Sabayon Linux</p></li><li><p>Calculate Linux</p></li><li><p>Funtoo Linux</p></li></ul><h1 id="第二章-VMware的使用"><a href="#第二章-VMware的使用" class="headerlink" title="第二章 VMware的使用"></a>第二章 VMware的使用</h1><h2 id="学习目标-1"><a href="#学习目标-1" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟悉VMware软件的作用</p><p>2 可以熟练安装VMware软件</p><p>3 可以熟练使用VMware创建虚拟计算机</p><p>4 可以熟练为虚拟计算机安装Linux操作系统</p><p>5 能独立解决安装过程中的常见问题</p><h2 id="第一节-VMware的作用"><a href="#第一节-VMware的作用" class="headerlink" title="第一节 VMware的作用"></a>第一节 VMware的作用</h2><blockquote><p>VMware软件的作用</p></blockquote><p><img src="vmwarework2_KdxMHe3eV0.png"></p><ul><li><p>第一步，在Windows上安装VMware软件</p></li><li><p>第二步，使用VM软件创建虚拟的计算机</p></li><li><p>第三步，在虚拟的计算机上安装Linux操作系统</p></li></ul><h2 id="第二节-VMware的安装"><a href="#第二节-VMware的安装" class="headerlink" title="第二节 VMware的安装"></a>第二节 VMware的安装</h2><blockquote><p>安装前，先检查BIOS中是否开启了虚拟化支持</p></blockquote><ul><li>打开任务管理器，查看性能，CPU部分，虚拟化处于“已启用”状态</li></ul><p><img src="vm01_ds4712mYIF.png"></p><ul><li>如果没有开启，则需要进入BIOS系统，将 Virtualization Technology 改为Enalble，不同品牌的电脑进入BIOS的方式都不同，可以根据电脑品牌型号搜索对应的进入方式</li></ul><p><img src="vm02_YppnWpeXN1.png"></p><blockquote><p>第一步：下载VMware安装包(<a href="https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html" title="https:&#x2F;&#x2F;www.vmware.com&#x2F;cn&#x2F;products&#x2F;workstation-pro&#x2F;workstation-pro-evaluation.html">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</a>)，双击开始安装</p></blockquote><p><img src="vm1_yFneoH7HVD.png"></p><blockquote><p>第二步：点击下一步</p></blockquote><p><img src="vm2_ds0WSj0iqI.png"></p><p>第三步：同意协议，然后下一步</p><p><img src="vm3_mXlDgwlXFg.png"></p><blockquote><p>第四步：修改安装位置 勾选“添加到系统PATH”</p></blockquote><p><img src="vm4_xZNdpMkJz5.png"></p><blockquote><p>第五步: 不检查更新，不参与客户体验提升计划</p></blockquote><p><img src="vm5_NVXW0CXCms.png"></p><blockquote><p>第六步：勾选“桌面”和“开始菜单程序文件夹”</p></blockquote><p><img src="vm6_6_VyL7CoIS.png"></p><blockquote><p>第七步：开始安装</p></blockquote><p><img src="vm7_V5tSYT4LHD.png"></p><blockquote><p>第八步：安装完成</p></blockquote><p><img src="vm8_AMhLZ3WcHm.png"></p><blockquote><p>第九步：点击桌面图标启动程序</p></blockquote><p><img src="vm8b_rKulUL0IOp.png"></p><blockquote><p>第十步：购买软件后，获取许可证密钥，输入密钥即可正常使用</p></blockquote><p><img src="vm9_tFOK8LyFKx.png"></p><p><img src="vm10_6PwKNVDRE8.png"></p><h2 id="第三节-VMware-创建虚拟机"><a href="#第三节-VMware-创建虚拟机" class="headerlink" title="第三节 VMware 创建虚拟机"></a>第三节 VMware 创建虚拟机</h2><blockquote><p>第一步：选择创建新的虚拟计算机</p></blockquote><p><img src="1_E2b9FKparo.png"></p><blockquote><p>第二步：选择自定义</p></blockquote><p><img src="2_7M-T6QlYUV.png"></p><blockquote><p>第三步： 硬件兼容选择 Workstation **.x</p></blockquote><p><img src="3_XgoPSawGP1.png"></p><blockquote><p>第四步：选择稍后安装操作系统</p></blockquote><p><img src="4_sGDWtzjz1Q.png"></p><blockquote><p>第五步：预选将来要安装的操作系统和版本</p></blockquote><p><img src="5_0p-x59bDMK.png"></p><blockquote><p>第六步：自定义虚拟机名称和虚拟机的存储位置</p></blockquote><p><img src="6_96-sVPFqTT.png"></p><blockquote><p>第七步：设置虚拟计算机的CPU 数量，不要高于宿主机的实际</p></blockquote><p><img src="7_z_xgQhLdnL.png"></p><blockquote><p>第八步：设置虚拟计算机内存，2G即可</p></blockquote><p><img src="8_RwoBr48h0a.png"></p><blockquote><p>第九步：设置虚拟计算机初始网络连接方式，建议使用NAT模式</p></blockquote><p><img src="9_rQ4GQsGXqe.png"></p><blockquote><p>第十步：选择I&#x2F;O控制器类型，默认推荐即可</p></blockquote><p><img src="10_zi8pEWIwmJ.png"></p><blockquote><p>第十一步：选择磁盘类型，默认推荐即可</p></blockquote><p><img src="11_dkv7HM6FrC.png"></p><blockquote><p>第十二步：选择创建新的虚拟磁盘</p></blockquote><p><img src="12_-o_Mh0LR7Y.png"></p><blockquote><p>第十三步：设定虚拟磁盘大小，并拆分成多个文件</p></blockquote><p><img src="13_LmRByJgteZ.png"></p><blockquote><p>第十四步：检查虚拟磁盘文件名，默认即可</p></blockquote><p><img src="14_S9eHEk73LG.png"></p><blockquote><p>第十五步：检查虚拟计算机设置的信息，然后点击完成</p></blockquote><p><img src="15_mDLrLn8jvS.png"></p><blockquote><p>第十六步： 安装完成</p></blockquote><p><img src="16_flikMQ6Dao.png"></p><h2 id="第四节-VMware安装Linux"><a href="#第四节-VMware安装Linux" class="headerlink" title="第四节 VMware安装Linux"></a>第四节 VMware安装Linux</h2><blockquote><p>第一步：下载Linux的ISO镜像文件，这里选择的版本是Centos7 64位</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">网易镜像：</span><br><span class="line">http://mirrors.163.com/centos/6/isos/</span><br><span class="line">http://mirrors.163.com/centos/7/isos/x86_64/</span><br><span class="line">搜狐镜像：</span><br><span class="line">http://mirrors.sohu.com/centos/6/isos/ </span><br><span class="line">http://mirrors.sohu.com/centos/7/isos/x86_64/</span><br></pre></td></tr></table></figure><p>下载好的镜像文件存于一个比较稳妥的目录下</p><p><img src="01_TzPAIAEmXg.png"></p><blockquote><p>第二步：选中对应的虚拟机然后点击虚拟机选项，找到设置</p></blockquote><p><img src="1_i771qGMWfi.png"></p><blockquote><p>第二步：找到CD、DVD选项&gt;使用IOS 镜像文件&gt;浏览&gt;选择的IOS镜像文件</p></blockquote><p><img src="2_jQoHqUJqEN.png"></p><blockquote><p>第三步：开启虚拟机，开始对虚拟机特征进行设置</p></blockquote><p><img src="3_DNzfLIw7th.png"></p><blockquote><p>第四步：选择 Install Centos 7</p></blockquote><p><img src="4_SrKLpVDkwF.png"></p><blockquote><p>第五步：选择安装过程中使用的提示语言</p></blockquote><p><img src="5_BguN7wK7Ed.png"></p><blockquote><p>第六步：设置时区，时间和日期，与计算机日期一致即可</p></blockquote><p><img src="6_nBy-jU9Cp9.png"></p><p><img src="7_BdJFPrOtHn.png"></p><blockquote><p>第七步：软件选择GNOME，带有图形界面模式的Linux 然后点击完成</p><p><strong>当前为了学习安装带图形化界面，后续只需要“最小安装”即可</strong></p></blockquote><p><img src="8_ylE4efLa9d.png"></p><p><img src="9_03AwuuWV31.png"></p><blockquote><p>第八步：等待安装源和软件选择的支持检查</p></blockquote><p><img src="10_BYkT1YYJh8.png"></p><blockquote><p>第九步： 设置安装位置，核对信息，然后点击完成即可</p></blockquote><p><img src="11_w7DSrlZUl4.png"></p><p><img src="12_aZ5MUJgtZ-.png"></p><blockquote><p>第十步： 设置网络和主机名，开启以太网，注意主机名和当前主机IP信息</p></blockquote><p><img src="13_gWGWmqUbRJ.png"></p><p><img src="14_IWD0l5uzEp.png"></p><blockquote><p>第十一步： KDUMP崩溃存储机制，可以关闭</p></blockquote><p><img src="15_sa-7VfWc6u.png"></p><blockquote><p>第十二步：开始安装</p></blockquote><p><img src="16_3d_tmv1D4W.png"></p><blockquote><p>第十三步：设置超级管理员root用户的密码，配置完成，点击重启</p></blockquote><p><img src="17_zqCXRawiN1.png"></p><p><img src="18_8sTOYWF4T8.png"></p><blockquote><p>第十四步：重启后，选择第一项，开启虚拟机</p></blockquote><p><img src="19_hn7N5j5qle.png"></p><blockquote><p>第十五步：第一次进入虚拟机，需要接受许可</p></blockquote><p><img src="20_m_9aC_SRzF.png"></p><p><img src="21_nFEGHyfzx7.png"></p><blockquote><p>第十六步： 选择汉语，然后前进</p></blockquote><p><img src="22_m2FS25EVcw.png"></p><blockquote><p>第十七步：选择输入，汉语，然后前进</p></blockquote><p><img src="23_FGfq9HZ7pg.png"></p><blockquote><p>第十八步：位置服务，可以关闭，然后前进</p></blockquote><p><img src="24_f7evUbAwnJ.png"></p><blockquote><p>第十九步：选择时区，已经设置过，然后前进</p></blockquote><p><img src="25_7CA9gsZLk_.png"></p><blockquote><p>第二十步：在线账号创建，选择跳过</p></blockquote><p><img src="26_ow74w6Gxn1.png"></p><blockquote><p>第二十一步：创建用于第一次登陆系统的普通用户账号，这里绝对不可以使用root作为用户名</p></blockquote><p><img src="27_zoe6S1Hg1B.png"></p><blockquote><p>第二十二步： 设置普通账户密码</p></blockquote><p><img src="28_rg1JOBOEbU.png"></p><blockquote><p>第二十三步：进入系统后，点击关机按钮，找到用户，选择注销</p></blockquote><p><img src="29_iO9pRTz2gX.png"></p><p><img src="30_09Qd8hQeKq.png"></p><blockquote><p>第二十四步：点击未列出，输入超级管理员的账号密码，以超级管理员身份登录，前面的用户设置重复一遍后，即可进入系统</p></blockquote><p><img src="31_frNA-zGZZv.png"></p><p><img src="32_d_WRDqmK_U.png"></p><p><img src="33_nqXZCJuzA5.png"></p><blockquote><p>第二十五步：如果需要关机，一定要先将虚拟机关机或者挂起后，再关闭VMware，然后关闭windows</p></blockquote><p><img src="34_y4OQm9Hm7P.png"></p><p>要想让鼠标从VMware的 虚拟中脱离出来，需要按快捷键 ctrl+alt</p><h2 id="第五节-VMware常见问题"><a href="#第五节-VMware常见问题" class="headerlink" title="第五节 VMware常见问题"></a>第五节 VMware常见问题</h2><h3 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h3><p>启动VM报0xc0000005，这是与vindows Hyper-V服务冲突造成的</p><p><img src="01_o6r5DAKdE_.png"></p><p>&#x20;         1 关闭以下服务</p><p><img src="02_xE5ZUpgFx1.png"></p><p>&#x20;         2 以管理员方式运行以下命令</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bcdedit /set hypervisorlaunchtype off</span><br></pre></td></tr></table></figure><p>&#x20;         3 重启电脑</p><h3 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h3><p>启动VMware蓝屏问题</p><p>&#x20;         1 打开控制面板，点击卸载程序</p><p><img src="l1_TRu49JFdqM.png"></p><p>&#x20;        2 点击启用或者关闭Windows功能</p><p><img src="l2_HAmhEeDBO8.png"></p><p>&#x20;       3 勾选如下两个选项</p><p><img src="06_IZKWqQBAmN.png"></p><h3 id="问题3"><a href="#问题3" class="headerlink" title="问题3"></a>问题3</h3><ul><li><p>如果采用问题2方式，运行一段时间后还是蓝屏，到官网下载最新版本安装</p></li><li><p>如果还是不行，可以考虑使用其他虚拟化软件，比如 VirtualBox</p></li><li><p>如果换软件还是出现问题，考虑重新安装Windows操作系统</p></li></ul><h1 id="第三章-Linux的目录结构"><a href="#第三章-Linux的目录结构" class="headerlink" title="第三章 Linux的目录结构"></a>第三章 Linux的目录结构</h1><h2 id="学习目标-2"><a href="#学习目标-2" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟悉Linux目录的组织习惯</p><p>2 熟悉一些Linux的常见目录及作用</p><h2 id="第一节-Linux中的常见目录"><a href="#第一节-Linux中的常见目录" class="headerlink" title="第一节 Linux中的常见目录"></a>第一节 Linux中的常见目录</h2><blockquote><p>Linux常见的目录结构，不同版本的Linux目录结构可能略有不同</p></blockquote><p><img src="m3_3xSqMZd5DF.png"></p><blockquote><p>Centos7的文件目录结构</p></blockquote><p><img src="m1_SOazlwnZeT.png"></p><blockquote><p>Linux根目录下的常见目录及作用</p></blockquote><p>1. &#x2F;bin：★(&#x2F;usr&#x2F;bin,&#x2F;usr&#x2F;local&#x2F;bin)</p><p>是Binary的缩写, 这个目录存放着最经常使用的命令,Linux默认的环境变量已经包含该路径,所以可以直接使用该路径下的指令如 cd指令&#x20;</p><p>可以通过echo $PATH查看系统环境变量来看是否包含了该目录</p><p>2. &#x2F;sbin：(&#x2F;usr&#x2F;sbin, &#x2F;usr&#x2F;local&#x2F;sbin)</p><p>s就是Super User的意思，这里存放的是系统管理员使用的系统管理程序。</p><p>以上目录，任何命令在任意目录下都可执行命令</p><p>3. &#x2F;home：★</p><p>存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名的。</p><p>4. &#x2F;root：★</p><p>该目录为系统管理员，也称作超级权限者的用户主目录。</p><p>5. &#x2F;lib：</p><p>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p>6. &#x2F;lost+found：</p><p>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p>7. &#x2F;etc：★</p><p>所有的系统管理所需要的配置文件和子目录。my.cnf</p><p>8. &#x2F;usr：★&#x20;</p><p>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</p><p>9. &#x2F;boot：★</p><p>这里存放的是启动Linux时使用的一些核心文件，包括一些连接文件以及镜像文件，自己的安装别放这里&#x20;</p><p>10. &#x2F;proc：</p><p>这个目录是一个虚拟的目录，它是系统内存的映射，我们可以通过直接访问这个目录来获取系统信息。</p><p>11. &#x2F;srv：</p><p>service缩写，该目录存放一些服务启动之后需要提取的数据。</p><p>12.    &#x2F;sys：&#x20;</p><p>这是linux2.6内核的一个很大的变化。该目录下安装了2.6内核中新出现的一个文件系统 sysfs 。（内核）</p><p>13.    &#x2F;tmp：</p><p>这个目录是用来存放一些临时文件的。</p><p>14.    &#x2F;dev：★</p><p>Device(设备)的缩写,类似windows的设备管理器，把所有的硬件用文件的形式存储。&#x20;</p><p>15.    &#x2F;media：★</p><p>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。CentOS6 就在&#x2F;media下,CentOS7换目录了&#x2F;</p><p><img src="m3_dsz1PMmPxe.png"></p><p>16.    &#x2F;mnt：★</p><p>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将光驱挂载在&#x2F;mnt&#x2F;上，然后进入该目录就可以查看光驱里的内容了。</p><p>17.    &#x2F;opt：★</p><p>这是给主机额外安装软件所摆放的目录。</p><p>比如你安装JDK、Tomcat则就可以放到这个目录下。默认是空的。</p><p>18.    &#x2F;usr&#x2F;local: ★</p><p>这是另一个给主机额外安装软件所摆放的目录.一般是通过编译源码方式安装的程序。</p><p>19.    &#x2F;var：★</p><p>这个目录中存放着在不断扩充着的东西，我们习惯将那些经常被修改的目录放在这个目录下。包括各种日志文件。</p><h1 id="第四章-VI和VIM编辑器"><a href="#第四章-VI和VIM编辑器" class="headerlink" title="第四章 VI和VIM编辑器"></a>第四章 VI和VIM编辑器</h1><h2 id="学习目标-3"><a href="#学习目标-3" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 了解什么 是VI和VIM 编辑器</p><p>2 熟练VIM编辑器一般模式的常见操作</p><p>3 熟练VIM编辑器编辑模式的的进入和推出方式</p><p>4 熟练VIM编辑器命令模式的常见命令</p><h2 id="第一节-什么是VI和VIM编辑器"><a href="#第一节-什么是VI和VIM编辑器" class="headerlink" title="第一节 什么是VI和VIM编辑器"></a>第一节 什么是VI和VIM编辑器</h2><blockquote><p>vi是Unix和类Unix操作系统中出现的通用的文本编辑器。vim是从vi发展出来的一个性能更强大的文本编辑器,可以主动的以字体颜色辨别语法的正确性,方便程序设计,vim和vi编辑器完全兼容。使用：vi xxx文件 或者vim xxx文件,简单来说,就是用来编辑文件的一个工具,类似于我们再Windows上的一些文本编辑工具,只不过,这里是命令行形式的,不是图形用户界面形式的.接下来我们就准备一个文件,使用VIM对文件进行修改</p></blockquote><blockquote><p>复制一个系统的配置文件到Root目录下，用以练习vim命令</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@192 ~]# cp /etc/smartmontools/smartd.conf /root</span><br><span class="line">[root@192 ~]# cd /root/</span><br></pre></td></tr></table></figure><blockquote><p>Linux系统上没有文件后缀名这一概念</p><p>可以通过vim这个命令创建一个文本文件，并使用vim编辑器打开。</p><p>vim helloworld.mp3</p></blockquote><p><img src="vim_OjF1J7zRyb.png"></p><h2 id="第二节-VIM的一般模式"><a href="#第二节-VIM的一般模式" class="headerlink" title="第二节 VIM的一般模式"></a>第二节 VIM的一般模式</h2><blockquote><p>默认模式,在这个模式中， 你可以使用『上下左右』按键来移动光标，你可以使用『删除字符』或『删除整行』来处理档案内容， 也可以使用『复制、贴上』来处理你的文件数据。</p></blockquote><blockquote><p>1.删除和复制操作</p></blockquote><p><img src="vim1_bdwb6OOJgA.png"></p><blockquote><p>2.光标移动操作</p></blockquote><p><img src="image-20230703211138655.png" alt="image-20230703211138655"></p><h2 id="第三节-VIM的编辑模式"><a href="#第三节-VIM的编辑模式" class="headerlink" title="第三节 VIM的编辑模式"></a>第三节 VIM的编辑模式</h2><blockquote><p>在一般模式中可以进行删除、复制、贴上等等的动作，但是却无法编辑文件内容的！要等到你按下『i, I, o, O, a, A, r, R』等任何一个字母之后才会进入编辑模式。注意了！通常在 Linux 中，按下这些按键时，在画面的左下方会出现『INSERT 或 REPLACE 』的字样，此时才可以进行编辑。而如果要回到一般模式时， 则必须要按下『Esc』这个按键即可退出编辑模式。</p></blockquote><p><img src="image-20230703205456739.png" alt="image-20230703205456739"></p><h2 id="第四节-VIM的命令模式"><a href="#第四节-VIM的命令模式" class="headerlink" title="第四节 VIM的命令模式"></a>第四节 VIM的命令模式</h2><blockquote><p>可以进行存盘、退出、显示行号、搜索、批量替换等操作。要在一般模式下输入” &#x2F; “或 <strong>“ : “</strong> 或者”?”可进入命令模式,当命令执行前按esc或者命令执行完毕,自动回到一般模式</p></blockquote><p><img src="image-20230703205250698.png" alt="image-20230703205250698"></p><ul><li><strong>模式间的切换</strong></li></ul><p><img src="image-20230703205329736.png" alt="image-20230703205329736"></p><blockquote><p>如果非正常退出,如使用ctrl+z退出,再次编辑会提示交换文件”. <em>.swp”,文件存在,并给出相应的处理方式选项,如果不删除交换文件,每次编辑都会提示,这时可以删除交换文件,通过命令: rm -f ‘</em>.swp’ 即可</p></blockquote><p><img src="vim7_F_WwN43YIy.png"></p><p><img src="vim6_05QzvG_PUU.png"></p><h1 id="第五章-虚拟机网络配置"><a href="#第五章-虚拟机网络配置" class="headerlink" title="第五章 虚拟机网络配置"></a>第五章 虚拟机网络配置</h1><h2 id="学习目标-4"><a href="#学习目标-4" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟练查看虚拟机网络配置信息</p><p>2 熟悉WMware的联网模式及特点</p><p>3 熟练在NAT模式下,将虚拟机IP设置为固定IP</p><p>4 熟练查看虚拟机主机名及配置主机名IP映射关系</p><p>5 熟练掌握Linux服务管理类命令</p><h2 id="第一节-查看网络信息"><a href="#第一节-查看网络信息" class="headerlink" title="第一节 查看网络信息"></a>第一节 查看网络信息</h2><blockquote><p>通过ifconfig命令查看目前的网络信息</p></blockquote><p><img src="net1_53pThC3h1n.png"></p><blockquote><p>通过ping命令测试和某个IP之间是否相通</p></blockquote><p><img src="net2_mO_rSYbMOw.png"></p><blockquote><p>在VMware中查看当前虚拟机的联网模式</p></blockquote><p><img src="net3_C_HHLC_v-2.png"></p><p><img src="net4_O_QsIjxaIO.png"></p><ul><li><p>模式1  仅主机模式特点</p><ul><li><p>特点&#x20;</p><ul><li>虚拟机只能和宿主机之间实现通信</li></ul></li><li><p>缺点</p><ul><li>只有宿主机和虚拟机之前能通信,虚拟机联网需要做更多的配置</li></ul></li></ul></li></ul><p><img src="hostonly_ZTuNCvNWgj.png"></p><ul><li><p>模式2 桥接模式特点</p><ul><li><p>特点</p><ul><li><p>宿主机和虚拟机,都是由局域网路由(DHCP)进行IP的分配</p></li><li><p>宿主机和本地的虚拟机之间可以进行通信</p></li><li><p>局域网内其他机器也可以与虚拟机进行通信</p></li><li><p>简单</p></li></ul></li><li><p>缺点</p><ul><li>虚拟机会占用大量的IP,局域网内如果机器太多,或者虚拟机太多,那么会出现大量的IP冲突</li></ul></li></ul></li></ul><p><img src="net5_Gfhkydmb8v.png"></p><p><img src="brige_ILdCFGOXkh.png"></p><ul><li><p>模式3 NAT模式特点</p><ul><li><p>特点</p><ul><li><p>宿主机和其他机器的IP由局域网路由进行IP的分配,虚拟机的IP通过VMnet8虚拟交换机进行分配</p></li><li><p>宿主机和本地的虚拟机之间可以进行通信</p></li><li><p>不会占用宿主机所在路由IP,不会造成IP冲突</p></li></ul></li><li><p>缺点</p><ul><li>局域网内的机器无法与其他机器上的虚拟机进行通信</li></ul></li></ul></li></ul><p><img src="net6_pKBpw4EaYi.png"></p><p><img src="nat_-7T60iClZa.png"></p><ul><li><p>关于模式的选择</p><ul><li><p>什么时候选择NAT模式?</p><ul><li><p>在教室内,因为大量同学使用同一个路由,避免大量的IP冲突</p></li><li><p>我们在学习阶段,主要满足我们自己的计算机(宿主机)和本地虚拟机之间的通信以及虚拟机的联网</p></li></ul></li><li><p>什么时候选择桥接模式?</p><ul><li>自己独立的路由,想在局域网内实现虚拟机和其他计算机之间的通信</li></ul></li><li><p>未来如何选择</p><ul><li><p>未来这些问题会由运维人员来处理</p></li><li><p>未来我们使用的服务器不会在本地,使用远程服务器,自然也不需要我们来处理这种问题</p></li></ul></li></ul></li></ul><h2 id="第二节-修改网络配置信息"><a href="#第二节-修改网络配置信息" class="headerlink" title="第二节 修改网络配置信息"></a>第二节 修改网络配置信息</h2><blockquote><p>第一步:  打开VMware,打开虚拟网络编辑器</p></blockquote><p><img src="net1_gxb9-dG0MC.png"></p><blockquote><p>第二步: 选择NAT模式,对网段进行调整</p></blockquote><p><img src="net2_4NnR6vyZME.png"></p><blockquote><p>第三步: 设置NAT模式的网关</p></blockquote><p><img src="net3_M-9NEwOlMt.png"></p><p><img src="net4_J-BLTYb35N.png"></p><blockquote><p>第四步: 检查是否有漏选的选项</p></blockquote><p><img src="net5_YEQZK3IT95.png"></p><blockquote><p>第五步: 修改虚拟机自己的网络模式选用模式为NAT</p></blockquote><p><img src="net3_C_HHLC_v-2.png"></p><p><img src="net4_O_QsIjxaIO.png"></p><blockquote><p>第六步: 修改虚拟机ens33网卡的网络配置信息</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure><ul><li>ens33网络配置默认信息如下</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TYPE=&quot;Ethernet&quot; #网络类型（通常是Ethemet，工业以太网）</span><br><span class="line">PROXY_METHOD=&quot;none&quot;</span><br><span class="line">BROWSER_ONLY=&quot;no&quot;</span><br><span class="line">BOOTPROTO=&quot;dhcp&quot;  #dhcp 为动态IP</span><br><span class="line">DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV4_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6INIT=&quot;yes&quot;</span><br><span class="line">IPV6_AUTOCONF=&quot;yes&quot;</span><br><span class="line">IPV6_DEFROUTE=&quot;yes&quot;</span><br><span class="line">IPV6_FAILURE_FATAL=&quot;no&quot;</span><br><span class="line">IPV6_ADDR_GEN_MODE=&quot;stable-privacy&quot;</span><br><span class="line">NAME=&quot;ens33&quot;</span><br><span class="line">UUID=&quot;e8582df9-96c3-4ddc-9fc6-19282dd5e019&quot;</span><br><span class="line">DEVICE=&quot;ens33&quot;</span><br><span class="line">ONBOOT=&quot;yes&quot; #系统启动的时候网络接口是否有效（yes/no）</span><br></pre></td></tr></table></figure><ul><li>以下选项,有则修改,无则增加</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">BOOTPROTO=&quot;static&quot; #静态网址 (已有)</span><br><span class="line">ONBOOT=&quot;yes&quot; #开机启用 (已有)</span><br><span class="line">IPADDR=192.168.6.100 #IP地址 (增加)</span><br><span class="line">GATEWAY=192.168.6.2 #网关(增加)</span><br><span class="line">DNS1=192.168.6.2 #DNS域名解析(增加) 114.114.114.114 / 8.8.8.8</span><br></pre></td></tr></table></figure><blockquote><p>第七步: 重启网络服务</p></blockquote><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>如果报错,则reboot重启虚拟机</li></ul><blockquote><p>第八步: 如果此时宿主机和虚拟机之前ping不通,可以配置windows的 VMnet8虚拟网卡</p></blockquote><p><img src="net6_nOBjmzJThC.png"></p><p><img src="net7_bhO5VSVI2-.png"></p><ul><li><p>DNS配置：</p><ul><li><p>与网关一样，可以上网</p></li><li><p>8.8.8.8 测试可能无法上网</p></li><li><p>114.114.114.114 测试可以上网</p></li></ul></li></ul><blockquote><p>第九步: 如果网络服务还是不能启动,可能域NetWorkManager服务冲突,关闭该服务即可</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">查看服务systemctl status NetworkManager.service</span><br><span class="line">停止服务 systemctl stop NetworkManager</span><br><span class="line">查看自启动 systemctl is-enabled NetworkManager</span><br><span class="line">关闭自启动systemctl disable NetworkManager</span><br><span class="line"></span><br><span class="line">status , stop , start , enable , disable</span><br></pre></td></tr></table></figure><h2 id="第三节-查看和修改主机名"><a href="#第三节-查看和修改主机名" class="headerlink" title="第三节 查看和修改主机名"></a>第三节 查看和修改主机名</h2><blockquote><p>查看主机名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hostname</span><br></pre></td></tr></table></figure><p><img src="host1_OZ4lLa_E9J.png"></p><blockquote><p>修改主机名</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hostname</span><br></pre></td></tr></table></figure><p><img src="host2_Q86xQVAsEM.png"></p><p><img src="host3_WifIhIwrBI.png"></p><blockquote><p>修改主机名和IP地址的映射关系</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/hosts</span><br></pre></td></tr></table></figure><p><img src="host4_MHtYBcrwTo.png"></p><ul><li>保存退出后重启计算机</li></ul><blockquote><p>修改宿主机的主机名和IP地址映射关系</p></blockquote><ul><li>windows上如果想通过centos100识别192.168.6.100 ,也需要秀修改hosts文件</li></ul><p><img src="host5_eyZlqVWTcZ.png"></p><ul><li>添加一行 192.168.6.100 centos100</li></ul><h2 id="第四节-服务管理类命令"><a href="#第四节-服务管理类命令" class="headerlink" title="第四节 服务管理类命令"></a>第四节 服务管理类命令</h2><blockquote><p>临时开关服务命令</p></blockquote><ul><li><p>语法</p><ul><li><p>centos6</p><ul><li><p>service 服务名 start 开启服务</p></li><li><p>service 服务名 stop 关闭服务</p></li><li><p>service 服务名 restart 重启服务</p></li><li><p>service 服务名 status 查看服务状态</p></li></ul></li><li><p>centos7</p><ul><li><p>systemctl start 服务名 开启服务</p></li><li><p>systemctl stop 服务名 关闭服务</p></li><li><p>systemctl restart 服务名 重启服务</p></li><li><p>systemctl status 服务名 查看服务</p></li><li><p>systemctl –type service 查看正在运行的服务</p></li></ul></li></ul></li><li><p>实操</p><ul><li>1 查看网络服务状态</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl status network.service</span><br></pre></td></tr></table></figure><ul><li>2 关闭服务</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl stop network.service</span><br></pre></td></tr></table></figure><ul><li>3 启动服务</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl start network.service</span><br></pre></td></tr></table></figure><ul><li>4 重启服务</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl restart network.service</span><br></pre></td></tr></table></figure><ul><li>查看所有服务</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl --type service</span><br></pre></td></tr></table></figure><p>.service后缀可以省略不写</p></li></ul><blockquote><p>永久开关服务命令</p></blockquote><ul><li><p>语法</p><ul><li><p>centos6</p><ul><li><p>chkconfig   查看所有服务自启配置</p></li><li><p>chkconfig 服务名 off  关闭服务自启</p></li><li><p>chkconfig 服务名 on   开启服务自启</p></li><li><p>chkconfig 服务名 –list  查看服务开机启动状态</p></li></ul></li><li><p>centos7</p><ul><li><p>systemctl enable 服务名          打开自启</p></li><li><p>systemctl disable 服务名         关闭自启</p></li><li><p>systemctl is-enabled 服务名     查看服务是否自启</p></li><li><p>systemctl list-unit-files      查看所有服务自启配置</p></li></ul></li></ul></li><li><p>实操</p><ul><li>1 关闭防火墙自动启动</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl status firewalld  查看防火墙</span><br><span class="line">systemctl disable firewalld  关闭防火墙自启</span><br></pre></td></tr></table></figure><ul><li>2 开启防火墙自启</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl enable firewalld</span><br></pre></td></tr></table></figure><ul><li>3 查看防火墙是否自启</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">systemctl is-enabled firewalld</span><br></pre></td></tr></table></figure></li></ul><p>Linux系统有7种运行级别(runlevel)：常用的是级别3和5(CentOS7中只有两个级别了：3和5)</p><p>运行级别0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动</p><p>运行级别1：单用户工作状态，root权限，用于系统维护，禁止远程登陆</p><p>运行级别2：多用户状态(没有NFS)，不支持网络</p><p>运行级别3：完全的多用户状态(有NFS)，登陆后进入控制台命令行模式</p><p>运行级别4：系统未使用，保留</p><p>运行级别5：X11控制台，登陆后进入图形GUI模式</p><p>运行级别6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><p><img src="service1_LHqVTosFFJ.png"></p><h1 id="第六章-虚拟机管理操作"><a href="#第六章-虚拟机管理操作" class="headerlink" title="第六章 虚拟机管理操作"></a>第六章 虚拟机管理操作</h1><h2 id="学习目标-5"><a href="#学习目标-5" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟练掌握虚拟机快照的使用和管理</p><p>2 熟练掌握通过克隆方式创建虚拟机</p><h2 id="第一节-VMware为虚拟机拍摄快照"><a href="#第一节-VMware为虚拟机拍摄快照" class="headerlink" title="第一节 VMware为虚拟机拍摄快照"></a>第一节 VMware为虚拟机拍摄快照</h2><blockquote><p>通过快照可快速保存虚拟机当前的状态,后续可以使用快照,将虚拟机还原到某个快照的状态. 如某个软件安装失败,可以通过快照快速还原回指定的某个状态</p></blockquote><ul><li>选择指定的虚拟机拍摄快照</li></ul><p><img src="k1_esNXOEn2-b.png"></p><ul><li>输入快照名称,添加快照描述</li></ul><p><img src="k2_29Oy4a95DH.png"></p><ul><li>通过快照恢复虚拟机状态</li></ul><p><img src="k3_KAH9nQlPmu.png"></p><ul><li>管理和废弃快照</li></ul><p><img src="k4_Qb7xVEWTo_.png"></p><p><img src="k5_OPYXZIQ-M_.png"></p><h2 id="第二节-VMware为虚拟机执行克隆"><a href="#第二节-VMware为虚拟机执行克隆" class="headerlink" title="第二节 VMware为虚拟机执行克隆"></a>第二节 VMware为虚拟机执行克隆</h2><blockquote><p>第一步: 关闭要克隆的虚拟机</p></blockquote><blockquote><p>第二步: 选中虚拟机,右击&gt;管理&gt;克隆</p></blockquote><p><img src="k1__k41GzzHa8.png"></p><blockquote><p>第三步: 可以选择虚拟当前状态和某个快照状态进行克隆</p></blockquote><p><img src="k2_lfYabhEe7r.png"></p><blockquote><p>第四步: 创建完整克隆</p></blockquote><p><img src="k3_6jMbfsPvys.png"></p><blockquote><p>第五步: 注意修改克隆之后的虚拟机的名称和存放路径</p></blockquote><p><img src="k4_lEFFzssV8e.png"></p><blockquote><p>第六步: 克隆完成,关闭即可</p></blockquote><p><img src="k5__Rn6tT7u2A.png"></p><blockquote><p>第七步: 修改克隆出来的虚拟机的主机名和IP配置,然后重启</p></blockquote><h1 id="第七章-远程工具的使用"><a href="#第七章-远程工具的使用" class="headerlink" title="第七章 远程工具的使用"></a>第七章 远程工具的使用</h1><h2 id="学习目标-6"><a href="#学习目标-6" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟练安装和使用 WindTerm</p><h2 id="第一节-WindTerm的安装和使用"><a href="#第一节-WindTerm的安装和使用" class="headerlink" title="第一节 WindTerm的安装和使用"></a>第一节 WindTerm的安装和使用</h2><blockquote><p>Linux一般作为服务器使用,服务器一般都放在机房,不可能是你身边的Linux服务器,这时候我们需要一些工具来连接远程的Linux服务器来进行操作,WindTerm就是一种远程连接工具,其他Windows上常见的远程登录客户端有 SecureCRT, Xshell,SSHSecure Shell,等</p></blockquote><blockquote><p>Linux系统中是通过SSH服务 实现的远程登录功能,默认ssh服务的端口号是22</p></blockquote><h3 id="1-1-下载WindTerm"><a href="#1-1-下载WindTerm" class="headerlink" title="1.1 下载WindTerm"></a>1.1 下载WindTerm</h3><p>WindTerm 在GitHub的开源地址 ：<a href="https://github.com/kingToolbox/WindTerm">https://github.com/kingToolbox/WindTerm</a><br> WindTerm 发布版本下载地址 ：<a href="https://github.com/kingToolbox/WindTerm/releases">https://github.com/kingToolbox/WindTerm/releases</a><br> WindTerm官网功能介绍：<a href="https://kingtoolbox.github.io/">https://kingtoolbox.github.io/</a></p><p><strong>（1）点击 发布版本下载地址，跳转到发布版本页面，找到当前最新版本下载</strong></p><p><img src="image-20230626163815805.png" alt="image-20230626163815805"></p><p><strong>（2）下载windows版本</strong></p><p><img src="image-20230626163927774.png" alt="image-20230626163927774"></p><h3 id="1-2-安装WindTerm"><a href="#1-2-安装WindTerm" class="headerlink" title="1.2 安装WindTerm"></a>1.2 安装WindTerm</h3><ul><li>每个安装包都带有<code>Portable</code>字样，表示<code>免安装</code>，该压缩包解压后即可使用。把下载后的压缩包放到电脑里的某个目录，解压后，双击<code>WindTerm.exe</code>就可以运行了。</li></ul><p><img src="image-20230626165052676.png" alt="image-20230626165052676"></p><h3 id="1-3-使用WindTerm"><a href="#1-3-使用WindTerm" class="headerlink" title="1.3 使用WindTerm"></a>1.3 使用WindTerm</h3><p>（1）双击WindTerm.exe</p><p>第一次启动程序，会需要选择一个目录存储配置等个人资料，这个根据个人喜好选择即可。</p><p><img src="image-20230626165250392.png" alt="image-20230626165250392"></p><p>（2）进入软件页面后</p><p><img src="image-20230626165415599.png" alt="image-20230626165415599"></p><p>（3）新建会话</p><p><img src="image-20230626165558433.png" alt="image-20230626165558433"></p><p>输入用户名：</p><p><img src="image-20230626170025229.png" alt="image-20230626170025229"></p><p>输入密码：</p><p><img src="image-20230626170118190.png" alt="image-20230626170118190"></p><p>连接效果：</p><p><img src="image-20230626170205586.png" alt="image-20230626170205586"></p><p>（4）上传文件</p><p>进入文件管理器</p><p><img src="image-20230626170700912.png" alt="image-20230626170700912"></p><p>选择要上传的文件进行上传</p><p><img src="image-20230626170802772.png" alt="image-20230626170802772"></p><p><img src="image-20230626170741327.png" alt="image-20230626170741327"></p><h1 id="第八章-常见Linux命令"><a href="#第八章-常见Linux命令" class="headerlink" title="第八章 常见Linux命令"></a>第八章 常见Linux命令</h1><h2 id="学习目标-7"><a href="#学习目标-7" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟练文件目录类命令</p><p>2 熟悉用户管理命令</p><p>3 熟悉组管理命令</p><p>4 熟练文件权限命令</p><p>5 熟悉搜索查找类命令</p><p>6 熟练压缩和解压缩命令</p><p>7 熟练进程线程类命令</p><p>8 了解磁盘分区类命令</p><h2 id="第一节-文件目录类命令"><a href="#第一节-文件目录类命令" class="headerlink" title="第一节 文件目录类命令"></a>第一节 文件目录类命令</h2><h3 id="（1）pwd打印当前目录的绝对路径"><a href="#（1）pwd打印当前目录的绝对路径" class="headerlink" title="（1）pwd打印当前目录的绝对路径"></a>（1）pwd打印当前目录的绝对路径</h3><p>(print working directory ) </p><ul><li><p>基本语法</p><ul><li>pwd    （功能描述：显示当前工作目录的绝对路径）</li></ul></li><li><p>案例实操</p><ul><li>显示当前工作目录的绝对路径</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# pwd</span><br><span class="line">/root</span><br></pre></td></tr></table></figure></li></ul><h3 id="（2）ls-list-列出目录内容"><a href="#（2）ls-list-列出目录内容" class="headerlink" title="（2）ls(list) 列出目录内容"></a>（2）ls(list) 列出目录内容</h3><ul><li><p>基本语法</p><ul><li>ls [选项] [目录或是文件]</li></ul></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>全部的文件，连同隐藏档( 开头为 . 的文件) 一起列出来(常用)</td></tr><tr><td>-l</td><td>长数据串列出，包含文件的属性与权限等等数据；(常用)</td></tr></tbody></table></li><li><p>显示说明</p><p>每行列出的信息依次是： 文件类型与权限 链接数 文件属主 文件属组 文件大小用byte来表示 建立或最近修改的时间 名字&#x20;</p></li><li><p>实操案例</p><ul><li>查看当前目录的所有内容信息</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wzb@hadoop101 ~]$ ls -al</span><br><span class="line">总用量 44</span><br><span class="line">drwx------. 5 wzb wzb 4096 5月  27 15:15 .</span><br><span class="line">drwxr-xr-x. 3 root    root    4096 5月  27 14:03 ..</span><br><span class="line">drwxrwxrwx. 2 root    root    4096 5月  27 14:14 hello</span><br><span class="line">-rwxrw-r--. 1 wzb wzb   34 5月  27 14:20 test.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="（3）cd-Change-Directory-切换路径"><a href="#（3）cd-Change-Directory-切换路径" class="headerlink" title="（3）cd(Change Directory)切换路径"></a>（3）cd(Change Directory)切换路径</h3><ul><li><p>基本语法</p><ul><li>cd [参数]</li></ul></li><li><p>参数说明</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>cd 绝对路径</td><td><strong>切换路径</strong></td></tr><tr><td>cd相对路径</td><td><strong>切换路径</strong></td></tr><tr><td>cd ~或者cd</td><td>回到自己的家目录</td></tr><tr><td>cd -</td><td>回到上一次所在目录</td></tr><tr><td>cd ..</td><td>回到当前目录的上一级目录</td></tr><tr><td>cd -P</td><td>跳转到实际物理路径，而非快捷方式路径</td></tr><tr><td>cd &#x2F;</td><td>回到系统根目录</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>使用绝对路径切换到root目录</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd /root/</span><br></pre></td></tr></table></figure><ul><li>使用相对路径切换到“公共的”目录</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd 公共的/</span><br></pre></td></tr></table></figure><ul><li>表示回到自己的家目录，亦即是 &#x2F;root 这个目录</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 公共的]# cd ~</span><br></pre></td></tr></table></figure><ul><li>cd- 回到上一次所在目录</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cd -</span><br></pre></td></tr></table></figure><ul><li>表示回到当前目录的上一级目录，亦即是 “&#x2F;root&#x2F;公共的”的上一级目录的意思；</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 公共的]# cd ..</span><br></pre></td></tr></table></figure></li></ul><h3 id="（4）mkdir-Make-directory-建立目录"><a href="#（4）mkdir-Make-directory-建立目录" class="headerlink" title="（4）mkdir(Make directory) 建立目录"></a>（4）mkdir(Make directory) 建立目录</h3><ul><li><p>基本语法</p><ul><li>mkdir [选项] 要创建的目录</li></ul></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-p</td><td>创建多层目录</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>创建一个目录</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mkdir xiyou</span><br><span class="line"></span><br><span class="line">[root@hadoop101 ~]# mkdir xiyou/mingjie</span><br></pre></td></tr></table></figure><ul><li>创建一个多级目录</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mkdir -p xiyou/dssz/meihouwang</span><br></pre></td></tr></table></figure></li></ul><h3 id="（5）rmdir-Remove-directory-删除目录"><a href="#（5）rmdir-Remove-directory-删除目录" class="headerlink" title="（5）rmdir(Remove directory) 删除目录"></a>（5）rmdir(Remove directory) 删除目录</h3><ul><li><p>基本语法</p><ul><li>rmdir 要删除的<strong>空目录</strong></li></ul></li><li><p>实操案例</p><ul><li>删除一个空的文件夹</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# rmdir xiyou/dssz/meihouwang</span><br></pre></td></tr></table></figure></li></ul><h3 id="（6）touch-创建空文件"><a href="#（6）touch-创建空文件" class="headerlink" title="（6）touch 创建空文件"></a>（6）touch 创建空文件</h3><ul><li><p>基本语法</p><ul><li>touch 文件名称</li></ul></li><li><p>实操案例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# touch xiyou/dssz/sunwukong.txt</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><p>vim也可以创建文件,vim wzb.txt 进入编辑模式,然后输入内容保存退出即可,但是如果不输出内容直接空文件下退出,则不会创建文件</p></li></ul><h3 id="（7）cp-复制文件或目录"><a href="#（7）cp-复制文件或目录" class="headerlink" title="（7）cp 复制文件或目录"></a>（7）cp 复制文件或目录</h3><ul><li><p>基本语法</p><ul><li>cp [选项] source dest             （功能描述：复制source文件到dest）</li></ul></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归复制整个文件夹</td></tr></tbody></table></li><li><p>参数说明</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>source</td><td>源文件</td></tr><tr><td>dest</td><td>目标文件</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>复制文件</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cp xiyou/dssz/suwukong.txt xiyou/mingjie/</span><br></pre></td></tr></table></figure><ul><li>递归复制整个文件夹</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cp -r a/b/ ./</span><br></pre></td></tr></table></figure></li></ul><h3 id="（8）rm移除文件或者目录"><a href="#（8）rm移除文件或者目录" class="headerlink" title="（8）rm移除文件或者目录"></a>（8）rm移除文件或者目录</h3><ul><li><p>基本语法</p><ul><li>rm [选项] deleteFile</li></ul></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>递归删除目录所有内容</td></tr><tr><td>-f</td><td>强制删除,不提示用户进行确认</td></tr><tr><td>-v</td><td>显示指令的详细执行过程</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>删除目录中的内容</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# rm xiyou/mingjie/sunwukong.txt</span><br></pre></td></tr></table></figure><ul><li>递归删除目录中所有内容</li></ul><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# rm -rf  dssz/</span><br></pre></td></tr></table></figure></li></ul><h3 id="（9）mv移动文件与目录或重命名"><a href="#（9）mv移动文件与目录或重命名" class="headerlink" title="（9）mv移动文件与目录或重命名"></a>（9）mv移动文件与目录或重命名</h3><ul><li><p>基本语法</p><ul><li>重命名&#x20;</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv oldNameFile newNameFile</span><br></pre></td></tr></table></figure><ul><li>移动文件&#x20;</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mv /temp/movefile /targetFolder</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>重命名</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mv xiyou/dssz/suwukong.txt xiyou/dssz/houge.txt</span><br></pre></td></tr></table></figure><ul><li>移动文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mv xiyou/dssz/houge.txt ./</span><br></pre></td></tr></table></figure></li></ul><h3 id="（10）cat查看文件内容"><a href="#（10）cat查看文件内容" class="headerlink" title="（10）cat查看文件内容"></a>（10）cat查看文件内容</h3><ul><li><p>基本语法</p><ul><li>cat  [选项] 文件     查看文件内容,从第一行开始显示</li></ul></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能描述</th></tr></thead><tbody><tr><td>- n</td><td>显示所有行的行号,包括空行</td></tr></tbody></table></li><li><p>经验技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一般查看比较小的文件,一屏幕能显示全的</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>查看文件内容并显示行号</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wzb@hadoop101 ~]$ cat -n houge.txt </span><br></pre></td></tr></table></figure></li></ul><h3 id="（11）more-文件分屏查看器"><a href="#（11）more-文件分屏查看器" class="headerlink" title="（11）more 文件分屏查看器"></a>（11）more 文件分屏查看器</h3><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more 要查看的文件</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">more指令是一个基于VI编辑器的文本过滤器，它以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键，详见操作说明。</span><br></pre></td></tr></table></figure></li><li><p>操作说明</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键 (space)</td><td>代表向下翻一页；</td></tr><tr><td>Enter</td><td>代表向下翻『一行』；</td></tr><tr><td>q</td><td>代表立刻离开 more ，不再显示该文件内容。</td></tr><tr><td>Ctrl+F</td><td>向下滚动一屏</td></tr><tr><td>Ctrl+B</td><td>返回上一屏</td></tr><tr><td>&#x3D;</td><td>输出当前行的行号</td></tr><tr><td>:f</td><td>输出文件名和当前行的行号</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）采用more查看文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# more smartd.conf</span><br></pre></td></tr></table></figure></li></ul><h3 id="（12）less-分屏显示文件内容"><a href="#（12）less-分屏显示文件内容" class="headerlink" title="（12）less 分屏显示文件内容"></a>（12）less 分屏显示文件内容</h3><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less指令用来分屏查看文件内容，它的功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。 </span><br><span class="line"></span><br><span class="line">less 要查看的文件</span><br></pre></td></tr></table></figure></li><li><p>操作说明</p><table><thead><tr><th>操作</th><th>功能说明</th></tr></thead><tbody><tr><td>空白键</td><td>向下翻动一页；</td></tr><tr><td>[pagedown]</td><td>向下翻动一页</td></tr><tr><td>[pageup]</td><td>向上翻动一页；</td></tr><tr><td>&#x2F;字串</td><td>向下搜寻『字串』的功能；n：向下查找；N：向上查找；</td></tr><tr><td>?字串</td><td>向上搜寻『字串』的功能；n：向上查找；N：向下查找；</td></tr><tr><td>q</td><td>离开 less 这个程序；</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）采用less查看文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# less smartd.conf</span><br></pre></td></tr></table></figure></li></ul><h3 id="（13）head显示文件头部内容"><a href="#（13）head显示文件头部内容" class="headerlink" title="（13）head显示文件头部内容"></a>（13）head显示文件头部内容</h3><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">head用于显示文件的开头部分内容，默认情况下head指令显示文件的前10行内容。</span><br><span class="line"></span><br><span class="line">head 文件      （功能描述：查看文件头10行内容）</span><br><span class="line">head -n 5 文件   （功能描述：查看文件头5行内容，5可以是任意行数）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n &lt;行数&gt;</td><td>指定显示头部内容的行数</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）查看文件的头2行</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# head -n 2 smartd.conf</span><br></pre></td></tr></table></figure></li></ul><h3 id="（14）tail-输出文件尾部内容"><a href="#（14）tail-输出文件尾部内容" class="headerlink" title="（14）tail 输出文件尾部内容"></a>（14）tail 输出文件尾部内容</h3><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tail用于输出文件中尾部的内容，默认情况下tail指令显示文件的后10行内容。</span><br><span class="line">（1）tail 文件          （功能描述：查看文件后10行内容）</span><br><span class="line">（2）tail -n 5 文件     （功能描述：查看文件后5行内容，5可以是任意行数）</span><br><span class="line">（3）tail -F 文件      （功能描述：实时追踪该文档的所有更新）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n&lt;行数&gt;</td><td>输出文件尾部n行内容</td></tr><tr><td>-F</td><td>显示文件最新追加的内容，监视文件变化</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）查看文件头1行内容</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tail -n 1 smartd.conf </span><br></pre></td></tr></table></figure><ul><li>（2）实时追踪该档的所有更新</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tail -F houge.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="（15）echo-打印信息"><a href="#（15）echo-打印信息" class="headerlink" title="（15）echo 打印信息"></a>（15）echo 打印信息</h3><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo输出内容到控制台  System.out.println();</span><br><span class="line"></span><br><span class="line">echo [选项] [输出内容]</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>支持反斜线控制的字符转换</td></tr></tbody></table><table><thead><tr><th>控制字符</th><th>作用</th></tr></thead><tbody><tr><td>\\</td><td>输出\本身</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\t</td><td>制表符，也就是Tab键</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>(1) 打印文字信息</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wzb@hadoop101 ~]$ echo &quot;hello\tworld&quot;</span><br><span class="line">hello\tworld</span><br><span class="line">[wzb@hadoop101 ~]$ echo -e &quot;hello\tworld&quot;</span><br><span class="line">hello   world</span><br></pre></td></tr></table></figure><ul><li>(2) 打印环境变量</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wzb@hadoop101 ~]$ echo $PATH</span><br></pre></td></tr></table></figure></li></ul><h3 id="（16）-覆盖和-追加"><a href="#（16）-覆盖和-追加" class="headerlink" title="（16）&gt; 覆盖和&gt;&gt;追加"></a>（16）&gt; 覆盖和&gt;&gt;追加</h3><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）ll &gt;文件       （功能描述：列表的内容写入文件a.txt中（**覆盖写**））</span><br><span class="line">（2）ll &gt;&gt;文件      （功能描述：列表的内容**追加**到文件aa.txt的末尾）</span><br><span class="line">（3）cat 文件1 &gt; 文件2 （功能描述：将文件1的内容覆盖到文件2）</span><br><span class="line">（4）echo “内容” &gt;&gt; 文件</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）将ls查看信息写入到文件中</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ls -l&gt;houge.txt</span><br></pre></td></tr></table></figure><ul><li>（2）将ls查看信息追加到文件中</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ls -l&gt;&gt;houge.txt</span><br></pre></td></tr></table></figure><ul><li>（3）采用echo将hello单词追加到文件中</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# echo hello&gt;&gt;houge.txt</span><br></pre></td></tr></table></figure></li></ul><h3 id="（17）ln创建链接和软连接"><a href="#（17）ln创建链接和软连接" class="headerlink" title="（17）ln创建链接和软连接"></a>（17）ln创建链接和软连接</h3><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">链接表示目标资源的另外的访问方式,表示一种路径</span><br><span class="line">软链接也称为符号链接，类似于windows里的快捷方式，有自己的数据块，主要存放了链接其他文件的路径。</span><br><span class="line">ln [-s] [原文件或目录] [链接名]       （功能描述：给原文件创建一个链接）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-s</td><td>创建的链接为 软连接</td></tr></tbody></table></li><li><p>经验技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">删除软链接： rm -rf 软链接名，而不是rm -rf 软链接名/</span><br><span class="line">查询：通过ll就可以查看，列表属性第1位是l，尾部会有位置指向。</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）创建软连接</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# mv houge.txt xiyou/dssz/</span><br><span class="line">[root@hadoop101 ~]# ln -s xiyou/dssz/houge.txt houzi</span><br><span class="line">[root@hadoop101 ~]# ll</span><br><span class="line">lrwxrwxrwx. 1 root  root   20 6月 17 12:56 houzi -&gt; xiyou/dssz/houge.txt</span><br></pre></td></tr></table></figure><ul><li>（2）删除软连接</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# rm -rf houzi</span><br></pre></td></tr></table></figure><ul><li>（3）进入软连接实际物理路径</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ln -s xiyou/dssz/ ./dssz</span><br><span class="line">[root@hadoop101 ~]# cd -P dssz/</span><br></pre></td></tr></table></figure></li></ul><h3 id="（18）history查看历史命令"><a href="#（18）history查看历史命令" class="headerlink" title="（18）history查看历史命令"></a>（18）history查看历史命令</h3><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">history                    （功能描述：查看已经执行过历史命令）</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）查看已经执行过的历史命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 test1]# history</span><br></pre></td></tr></table></figure><ul><li>(2)   &#x2F;root&#x2F;.bash_history文件中也是历史命令</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">less /root/.bash_history</span><br></pre></td></tr></table></figure></li></ul><h2 id="第二节-用户管理命令"><a href="#第二节-用户管理命令" class="headerlink" title="第二节 用户管理命令"></a>第二节 用户管理命令</h2><blockquote><p>useradd添加新用户</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">useradd 用户名                （功能描述：添加新用户）</span><br><span class="line">​useradd -g 组名 用户名          （功能描述：添加新用户到某个组）</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）添加一个用户</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# useradd tangseng</span><br><span class="line">[root@hadoop101 ~]#ll /home/</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>passwd设置用户密码</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">passwd 用户名   （功能描述：设置用户密码）</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）设置用户的密码</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# passwd tangseng</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>id查看用户是否存在</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id 用户名</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）查看用户是否存在</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#id tangseng</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>cat &#x2F;etc&#x2F;passwd 查看创建的所有用户</p></blockquote><ul><li><p>实操案例</p><ul><li>(1) 查看创建的所有用户</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cat /etc/passwd</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>su(switch user )切换用户</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">su 用户名称      （功能描述：切换用户，只能获得用户的执行权限，不能获得环境变量）</span><br><span class="line">su - 用户名称    （功能描述：切换到用户并获得该用户的环境变量及执行权限）</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）切换用户</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#su tangseng</span><br><span class="line">[root@hadoop101 ~]#echo $PATH</span><br><span class="line">/usr/lib64/qt-3.3/bin:/usr/local/sbin:/usr/local/bin:/sbin:/bin:/usr/sbin:/usr/bin:/root/bin</span><br><span class="line">[root@hadoop101 ~]#exit</span><br><span class="line">[root@hadoop101 ~]#su - tangseng</span><br><span class="line">[root@hadoop101 ~]#echo $PATH</span><br><span class="line">/usr/lib64/qt-3.3/bin:/usr/local/bin:/bin:/usr/bin:/usr/local/sbin:/usr/sbin:/sbin:/home/tangseng/bin</span><br></pre></td></tr></table></figure><ul><li>&#x20;(2) exit 回退到上一个用户 &#x20;</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#exit</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>userdel删除用户</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）userdel 用户名          （功能描述：删除用户但保存用户主目录）</span><br><span class="line">​（2）userdel -r 用户名       （功能描述：用户和用户主目录，都删除）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>删除用户的同时，删除与用户相关的所有文件。</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）删除用户但保存用户主目录</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#userdel tangseng</span><br><span class="line">[root@hadoop101 ~]#ll /home/</span><br></pre></td></tr></table></figure><ul><li>（2）删除用户和用户主目录，都删除</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#useradd zhubajie</span><br><span class="line">[root@hadoop101 ~]#ll /home/</span><br><span class="line">[root@hadoop101 ~]#userdel -r zhubajie</span><br><span class="line">[root@hadoop101 ~]#ll /home/</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>who 查看登录用户信息</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）whoami           （功能描述：显示自身用户名称）</span><br><span class="line">​（2）who am i         （功能描述：显示登录用户的用户名）</span><br></pre></td></tr></table></figure></li><li><p>案例实操</p><ul><li>（1）显示自身用户名称</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]# whoami</span><br></pre></td></tr></table></figure><ul><li>（2）显示登录用户的用户名</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]# who am i</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>sudo 设置普通用户具有root权限</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo 命令</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>(1) 添加wzb用户，并对其设置密码</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#useradd wzb</span><br><span class="line">[root@hadoop101 ~]#passwd wzb</span><br></pre></td></tr></table></figure><ul><li>(2)修改配置文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#vi /etc/sudoers</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改 /etc/sudoers 文件，找到下面一行(91行)，在root下面添加一行，如下</span><br><span class="line"></span><br><span class="line">\## Allow root to run any commands anywhere</span><br><span class="line">root  ALL=(ALL)   ALL</span><br><span class="line">wzb  ALL=(ALL)   ALL</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">或者配置成采用sudo命令时，不需要输入密码</span><br><span class="line"></span><br><span class="line">\## Allow root to run any commands anywhere</span><br><span class="line">root   ALL=(ALL)   ALL</span><br><span class="line">wzb  ALL=(ALL)   NOPASSWD:ALL</span><br><span class="line"></span><br><span class="line">修改完毕，现在可以用wzb帐号登录，然后用命令 sudo ，即可获得root权限进行操作。</span><br></pre></td></tr></table></figure><ul><li>(3)用普通用户在&#x2F;opt目录下创建一个文件夹</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[wzb@hadoop101 opt]$ sudo mkdir module</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>usermod修改用户</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">usermod -g 用户组 用户名</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-g</td><td>修改用户的初始登录组，给定的组必须存在</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）将用户加入到用户组</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]#usermod -g root zhubajie</span><br></pre></td></tr></table></figure></li></ul><h2 id="第三节-组管理类命令"><a href="#第三节-组管理类命令" class="headerlink" title="第三节 组管理类命令"></a>第三节 组管理类命令</h2><p>每个用户都有一个用户组，系统可以对一个用户组中的所有用户进行集中管理。不同Linux 系统对用户组的规定有所不同，如Linux下的用户属于与它同名的用户组，这个用户组在创建用户时同时创建。用户组的管理涉及用户组的添加、删除和修改。组的增加、删除和修改实际上就是对&#x2F;etc&#x2F;group文件的更新。</p><blockquote><p>groupadd新增组</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupadd 组名</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）添加一个xitianqujing组</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]#groupadd xitianqujing</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>groupdel删除组</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）删除xitianqujing组</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]# groupdel xitianqujing</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>查看创建了那些组</p></blockquote><ul><li><p>实操案例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 wzb]# cat  /etc/group</span><br></pre></td></tr></table></figure></li></ul><h2 id="第四节-文件权限类命令"><a href="#第四节-文件权限类命令" class="headerlink" title="第四节 文件权限类命令"></a>第四节 文件权限类命令</h2><blockquote><p>文件属性信息解读</p></blockquote><ul><li><p>文件类型和权限的表示</p><p><img src="q1_JV7PU5ghrq.png"></p><ul><li><p>（1） 0首位表示类型 在Linux中第一个字符代表这个文件是目录、文件或链接文件等等</p><table><thead><tr><th>符号</th><th>对应文件类型</th></tr></thead><tbody><tr><td>-</td><td>代表文件</td></tr><tr><td>d</td><td>d 代表目录</td></tr><tr><td>l</td><td>链接文档(link file)；</td></tr></tbody></table></li><li><p>（2）第1-3位确定属主（该文件的所有者）拥有该文件的权限。U →User  </p></li><li><p>（3）第4-6位确定属组（所有者的同组用户）拥有该文件的权限，G→Group</p></li><li><p>（4）第7-9位确定其他用户拥有该文件的权限 ,   O →Other</p></li></ul></li><li><p>rwx作用到目录和文件的不同含义</p><ul><li>作用到文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ r ]代表可读(read): 可以读取，查看</span><br><span class="line">​[ w ]代表可写(write): 可以修改，但是不能删除该文件，对该文件所在的目录有写权限，才能删除.</span><br><span class="line">​[ x ]代表可执行(execute):可以被系统执行</span><br></pre></td></tr></table></figure><ul><li>作用到目录</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[ r ]代表可读(read): 可以读取，ls查看目录内容</span><br><span class="line">​[ w ]代表可写(write): 可以修改，目录内创建+删除+重命名目录</span><br><span class="line">[ x ]代表可执行(execute):可以进入该目录</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>(1)查看文件权限信息</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ll</span><br><span class="line">总用量 104</span><br><span class="line">-rw-------. 1 root root 1248 1月  8 17:36 anaconda-ks.cfg</span><br><span class="line">drwxr-xr-x. 2 root root 4096 1月 12 14:02 dssz</span><br><span class="line">lrwxrwxrwx. 1 root root  20 1月 12 14:32 houzi -&gt; xiyou/dssz/houge.tx</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>(2)文件属性介绍</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -l</span><br></pre></td></tr></table></figure><p><img src="q2_z9ymiP19Gd.png"></p><p>** 如果查看到是文件：链接数指的是硬链接个数**<br>** 如果查看的是文件夹：链接数指的是子文件夹个数 **​</p></li></ul><blockquote><p>chmod改变文件权限</p></blockquote><ul><li><p>基本语法</p><p><img src="q3_O5aKWKg3-u.png"></p><ul><li>第一种方式变更权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [&#123;ugoa&#125;&#123;+-=&#125;&#123;rwx&#125;] 文件或目录</span><br></pre></td></tr></table></figure><ul><li>第二种方式变更权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod [mode=421 ] [文件或目录]</span><br></pre></td></tr></table></figure></li><li><p>经验技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">u:所有者 g:所有组 o:其他人 a:所有人(u、g、o的总和)</span><br><span class="line">​r=4 w=2 x=1         </span><br><span class="line">rwx=4+2+1=7</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）修改文件使其所属主用户具有执行权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# cp xiyou/dssz/houge.txt ./</span><br><span class="line">[root@hadoop101 ~]# chmod u+x houge.txt</span><br></pre></td></tr></table></figure><ul><li>（2）修改文件使其所属组用户具有执行权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chmod g+x houge.txt</span><br></pre></td></tr></table></figure><ul><li>（3）修改文件所属主用户执行权限,并使其他用户具有执行权限</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chmod u-x,o+x houge.txt</span><br></pre></td></tr></table></figure><ul><li>（4）采用数字的方式，设置文件所有者、所属组、其他用户都具有可读可写可执行权限。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chmod 777 houge.txt</span><br></pre></td></tr></table></figure><ul><li>（5）修改整个文件夹里面的所有文件的所有者、所属组、其他用户都具有可读写执行权限。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chmod -R 777 xiyou/</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>chown 改变所有者</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chown [选项] [最终用户] [文件或目录]     （功能描述：改变文件或者目录的所有者）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-R</td><td>递归操作</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）修改文件所有者</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chown wzb houge.txt </span><br><span class="line">[root@hadoop101 ~]# ls -al</span><br><span class="line">-rwxrwxrwx. 1 wzb root 551 5月 23 13:02 houge.txt</span><br></pre></td></tr></table></figure><ul><li>（2）递归改变文件所有者和所有组</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 xiyou]# ll</span><br><span class="line">drwxrwxrwx. 2 root root 4096 9月  3 21:20 xiyou</span><br><span class="line">[root@hadoop101 xiyou]# chown -R wzb:wzb xiyou/</span><br><span class="line">[root@hadoop101 xiyou]# ll</span><br><span class="line">drwxrwxrwx. 2 wzb wzb 4096 9月  3 21:20 xiyou</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>chgrp改变所属组</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chgrp [最终用户组] [文件或目录]   （功能描述：改变文件或者目录的所属组）</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）修改文件的所属组</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# chgrp root houge.txt</span><br><span class="line">[root@hadoop101 ~]# ls -al</span><br><span class="line">-rwxrwxrwx. 1 wzb root 551 5月 23 13:02 houge.txt</span><br></pre></td></tr></table></figure></li></ul><h2 id="第五节-搜索查找类命令"><a href="#第五节-搜索查找类命令" class="headerlink" title="第五节 搜索查找类命令"></a>第五节 搜索查找类命令</h2><blockquote><p>find 查找文件或者目录</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find指令将从指定目录向下递归地遍历其各个子目录，将满足条件的文件显示在终端。</span><br><span class="line">find [搜索范围] [选项]</span><br></pre></td></tr></table></figure></li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line">*   选项说明</span><br><span class="line"></span><br><span class="line">    | 选项          | 功能               |</span><br><span class="line">    | ----------- | ---------------- |</span><br><span class="line">    | -name&lt;查询方式&gt; | 按照指定的文件名查找模式查找文件 |</span><br><span class="line">    | -user&lt;用户名&gt;  | 查找属于指定用户名所有文件    |</span><br><span class="line">    | -size&lt;文件大小&gt; | 按照指定的文件大小查找文件。   |</span><br><span class="line"></span><br><span class="line">*   实操案例</span><br><span class="line"></span><br><span class="line">    *   （1）按文件名：根据名称查找/目录下的filename.txt文件。</span><br><span class="line"></span><br><span class="line">    ```纯文本</span><br><span class="line">    [root@hadoop101 ~]# find xiyou/ -name “*.txt”</span><br></pre></td></tr></table></figure><pre><code>*   （2）按拥有者：查找/opt目录下，用户名称为-user的文件<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# find opt/ -user wzb</span><br></pre></td></tr></table></figure>*   （3）按文件大小：在/home目录下查找大于200m的文件（+n 大于 -n小于  n等于）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]find /home -size +204800 </span><br></pre></td></tr></table></figure></code></pre><blockquote><p>grep 过滤查找及“|”管道符</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理</span><br><span class="line">grep 选项 查找内容 源文件    select * from  emp where ename like &#x27;%a%&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-n</td><td>显示匹配及行号</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）查找某文件在第几行</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ls | grep -n test</span><br></pre></td></tr></table></figure></li></ul><h2 id="第六节-压缩和解压缩命令"><a href="#第六节-压缩和解压缩命令" class="headerlink" title="第六节 压缩和解压缩命令"></a>第六节 压缩和解压缩命令</h2><blockquote><p>gzip&#x2F;gunzip 压缩</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gzip 文件       （功能描述：压缩文件，只能将文件压缩为*.gz文件）</span><br><span class="line">gunzip 文件.gz  （功能描述：解压缩文件命令）</span><br></pre></td></tr></table></figure></li><li><p>经验技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）只能压缩文件,不能压缩目录</span><br><span class="line">（2）不保留原来的文件</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）gzip压缩</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# ls</span><br><span class="line">houge.txt</span><br><span class="line">[root@hadoop101 ~]# gzip houge.txt</span><br><span class="line">[root@hadoop101 ~]# ls</span><br><span class="line">houge.txt.gz</span><br></pre></td></tr></table></figure><ul><li>（2）gunzip解压缩文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# gunzip houge.txt.gz </span><br><span class="line">[root@hadoop101 ~]# ls</span><br><span class="line">houge.txt</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>zip&#x2F;unzip压缩</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip [选项] XXX.zip 将要压缩的内容     （功能描述：压缩文件和目录的命令）</span><br><span class="line">​unzip [选项] XXX.zip                （功能描述：解压缩文件）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>zip选项</th><th>功能</th></tr></thead><tbody><tr><td>-r</td><td>压缩目录</td></tr></tbody></table><table><thead><tr><th>unzip选项</th><th>功能</th></tr></thead><tbody><tr><td>-d&lt;目录&gt;</td><td>指定解压后文件的存放目录</td></tr></tbody></table></li><li><p>经验技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zip 压缩命令在window/linux都通用，**可以压缩目录且保留源文件**。</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）压缩 1.txt 和2.txt，压缩后的名称为mypackage.zip&#x20;</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]# touch bailongma.txt</span><br><span class="line">[root@hadoop101 ~]# zip houma.zip houge.txt bailongma.txt </span><br><span class="line"> adding: houge.txt (stored 0%)</span><br><span class="line"> adding: bailongma.txt (stored 0%)</span><br><span class="line">[root@hadoop101 opt]# ls</span><br><span class="line">houge.txt bailongma.txt  houma.zip </span><br></pre></td></tr></table></figure><ul><li>（2）解压 mypackage.zip</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# unzip houma.zip </span><br><span class="line"> Archive: houma.zip</span><br><span class="line"> extracting: houge.txt        </span><br><span class="line"> extracting: bailongma.txt    </span><br><span class="line">[root@hadoop101 ~]# ls</span><br><span class="line">houge.txt bailongma.txt  houma.zip</span><br></pre></td></tr></table></figure><ul><li>（3）解压mypackage.zip到指定目录-d</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# unzip houma.zip -d /opt</span><br><span class="line">[root@hadoop101 ~]# ls /opt/</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>tar打包</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar [选项] XXX.tar.gz 将要打包进去的内容  （功能描述：打包目录，压缩后的文件格式.tar.gz）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-z</td><td>打包同时压缩</td></tr><tr><td>-c</td><td>产生.tar打包文件</td></tr><tr><td>-v</td><td>显示详细信息</td></tr><tr><td>-f</td><td>指定压缩后的文件名</td></tr><tr><td>-x</td><td>解包.tar文件</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）压缩多个文件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 opt]# tar -zcvf houma.tar.gz houge.txt bailongma.txt </span><br><span class="line">houge.txt</span><br><span class="line">bailongma.txt</span><br><span class="line">[root@hadoop101 opt]# ls</span><br><span class="line">houma.tar.gz houge.txt bailongma.txt </span><br></pre></td></tr></table></figure><ul><li>（2）压缩目录</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zcvf xiyou.tar.gz xiyou/</span><br><span class="line">xiyou/</span><br><span class="line">xiyou/mingjie/</span><br><span class="line">xiyou/dssz/</span><br><span class="line">xiyou/dssz/houge.txt</span><br></pre></td></tr></table></figure><ul><li>（3）解压到当前目录</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zxvf houma.tar.gz</span><br></pre></td></tr></table></figure><ul><li>（4）解压到指定目录</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# tar -zxvf xiyou.tar.gz -C /opt</span><br><span class="line">[root@hadoop101 ~]# ll /opt/</span><br></pre></td></tr></table></figure></li></ul><h2 id="第七节-进程线程类命令"><a href="#第七节-进程线程类命令" class="headerlink" title="第七节 进程线程类命令"></a>第七节 进程线程类命令</h2><p>进程是正在执行的一个程序或命令，每一个进程都是一个运行的实体，都有自己的地址空间，并占用一定的系统资源。</p><blockquote><p>ps (process status 进程状态)查看当前系统进程状态</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -aux | grep xxx     （功能描述：查看系统中所有进程）</span><br><span class="line">​ps -ef  | grep xxx     （功能描述：可以查看子父进程之间的关系）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>选择所有进程</td></tr><tr><td>-u</td><td>显示所有用户的所有进程</td></tr><tr><td>-x</td><td>显示没有终端的进程</td></tr></tbody></table></li><li><p>功能说明</p><ul><li>（1）ps -aux显示信息说明</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">USER：该进程是由哪个用户产生的</span><br><span class="line">PID：进程的ID号</span><br><span class="line">​%CPU：该进程占用CPU资源的百分比，占用越高，进程越耗费资源；</span><br><span class="line">​%MEM：该进程占用物理内存的百分比，占用越高，进程越耗费资源；</span><br><span class="line">​VSZ：该进程占用虚拟内存的大小，单位KB；</span><br><span class="line">​RSS：该进程占用实际物理内存的大小，单位KB；</span><br><span class="line">​TTY：该进程是在哪个终端中运行的。其中tty1-tty7代表本地控制台终端，tty1-tty6是本地的字符界面终端，    tty7是图形终端。pts/0-255代表虚拟终端。</span><br><span class="line">​STAT：进程状态。常见的状态有：R：运行、S：睡眠、T：停止状态、s：包含子进程、+：位于后台</span><br><span class="line">​START：该进程的启动时间</span><br><span class="line">​TIME：该进程占用CPU的运算时间，注意不是系统时间</span><br><span class="line">​COMMAND：产生此进程的命令名</span><br></pre></td></tr></table></figure><ul><li>（2）ps -ef显示信息说明</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UID：用户ID </span><br><span class="line">​PID：进程ID </span><br><span class="line">​PPID：父进程ID </span><br><span class="line">​C：CPU用于计算执行优先级的因子。数值越大，表明进程是CPU密集型运算，执行优先级会降低；数值越小，表明进程是I/O密集型运算，执行优先级会提高 </span><br><span class="line">​STIME：进程启动的时间 </span><br><span class="line">​TTY：完整的终端名称 </span><br><span class="line">​TIME：CPU时间 </span><br><span class="line">​CMD：启动进程所用的命令和参数</span><br></pre></td></tr></table></figure></li><li><p>经验技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果想查看进程的**CPU**占用率和内存占用率，可以使用aux;</span><br><span class="line">​如果想查看**进程的父进程ID**可以使用ef;</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 datas]# ps -aux</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="p1_x5SIiOoWQK.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 datas]# ps -ef</span><br></pre></td></tr></table></figure><p><img src="p2_fJeIsqV1l_.png"></p></li></ul><blockquote><p>kill终止进程</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> kill [选项] 进程号 （功能描述：通过进程号杀死进程）</span><br><span class="line">​ killall 进程名称   （功能描述：通过进程名称杀死进程，也支持通配符） </span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-9</td><td>表示强迫进程立即停止</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）杀死浏览器进程</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 桌面]# kill -9 5102</span><br></pre></td></tr></table></figure><ul><li>（2）通过进程名称杀死进程</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 桌面]# killall firefox</span><br></pre></td></tr></table></figure></li></ul><h2 id="第八节-磁盘分区类命令"><a href="#第八节-磁盘分区类命令" class="headerlink" title="第八节 磁盘分区类命令"></a>第八节 磁盘分区类命令</h2><blockquote><p>&#x20;df (disk free 空余硬盘)查看磁盘空间使用情况&#x20;</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">df 选项 （功能描述：列出文件系统的整体磁盘使用量，检查文件系统的磁盘空间占用情况）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>-h</td><td>以人们较易阅读的 GBytes, MBytes, KBytes 等格式自行显示；</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）查看磁盘使用情况</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]# df -h</span><br><span class="line">Filesystem   Size Used Avail Use% Mounted on</span><br><span class="line">/dev/sda2    15G 3.5G  11G 26% /</span><br><span class="line">tmpfs      939M 224K 939M  1% /dev/shm</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>fdisk 查看分区</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fdisk -l         （功能描述：查看磁盘分区详情）</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-l</td><td>显示所有硬盘的分区列表</td></tr></tbody></table></li><li><p>经验技巧</p><ul><li>该命令必须在root用户下才能使用</li></ul></li><li><p>功能说明</p><ul><li>（1）Linux分区</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Device：分区序列</span><br><span class="line">​Boot：引导</span><br><span class="line">​Start：从X磁柱开始</span><br><span class="line">​End：到Y磁柱结束</span><br><span class="line">​Blocks：容量</span><br><span class="line">​Id：分区类型ID</span><br><span class="line">​System：分区类型</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）查看系统分区情况</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 /]# fdisk -l</span><br><span class="line">Disk /dev/sda: 21.5 GB, 21474836480 bytes</span><br><span class="line">255 heads, 63 sectors/track, 2610 cylinders</span><br><span class="line">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disk identifier: 0x0005e654</span><br><span class="line"></span><br><span class="line">  Device Boot   Start     End   Blocks  Id System</span><br><span class="line">/dev/sda1  *      1     26   204800  83 Linux</span><br><span class="line">Partition 1 does not end on cylinder boundary.</span><br><span class="line">/dev/sda2       26    1332  10485760  83 Linux</span><br><span class="line">/dev/sda3      1332    1593   2097152  82 Linux swap / Solaris</span><br></pre></td></tr></table></figure></li></ul><h1 id="第九章-软件包管理"><a href="#第九章-软件包管理" class="headerlink" title="第九章 软件包管理"></a>第九章 软件包管理</h1><h2 id="学习目标-8"><a href="#学习目标-8" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟练使用RPM查询、安装、卸载软件</p><p>2 熟练使用YUM安装程序</p><h2 id="第一节-RPM"><a href="#第一节-RPM" class="headerlink" title="第一节 RPM"></a>第一节 RPM</h2><p>1 什么是RPM</p><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">RPM（RedHat Package Manager），RedHat软件包管理工具，类似windows里面的setup.exe.是Linux这系列操作系统里面的打包安装工具，它虽然是RedHat的标志，但理念是通用的。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2 RPM包的名称格式</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Apache-1.3.23-11.i386.rpm</span><br><span class="line">​    -  “apache” 软件名称</span><br><span class="line">​    -  “1.3.23-11”软件的版本号，主版本和次版本</span><br><span class="line">​    -  “i386”是软件所运行的硬件平台，Intel 32位微处理器的统称</span><br><span class="line">​    -  “rpm”文件扩展名，代表RPM包</span><br></pre></td></tr></table></figure><blockquote><p>RPM查询命令</p></blockquote><ul><li><p>基础语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa       （功能描述：查询所安装的所有rpm软件包）</span><br><span class="line">rpm -ql  服务名 (功能描述:查看安装位置)</span><br></pre></td></tr></table></figure></li><li><p>经验技巧</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">由于软件包比较多，一般都会采取过滤。rpm -qa | grep rpm软件包</span><br></pre></td></tr></table></figure></li><li><p>实操案例</p><ul><li>（1）查询firefox软件安装情况</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 Packages]# rpm -qa |grep firefox </span><br><span class="line">firefox-45.0.1-1.el6.centos.x86_64</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>RPM卸载命令</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">（1）rpm -e   软件包</span><br><span class="line">（2）rpm -e --nodeps 软件包</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-e</td><td>卸载软件包</td></tr><tr><td>–nodeps</td><td>卸载软件时，不检查依赖。这样的话，那些使用该软件包的软件在此之后可能就不能正常工作了。</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）卸载firefox软件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 Packages]# rpm -e firefox</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>RPM安装命令</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -ivh RPM  包全名</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-i</td><td>-i&#x3D;install，安装</td></tr><tr><td>-v</td><td>-v&#x3D;verbose，显示详细信息</td></tr><tr><td>-h</td><td>-h&#x3D;hash，进度条</td></tr><tr><td>–nodeps</td><td>–nodeps，不检测依赖进度</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）安装firefox软件</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 Packages]# pwd</span><br><span class="line">/media/CentOS_6.8_Final/Packages</span><br><span class="line">[root@hadoop101 Packages]# rpm -ivh firefox-45.0.1-1.el6.centos.x86_64.rpm </span><br><span class="line">warning: firefox-45.0.1-1.el6.centos.x86_64.rpm: Header V3 RSA/SHA1 Signature, key ID c105b9de: NOKEY</span><br><span class="line">Preparing...        ########################################### [100%]</span><br><span class="line">  1:firefox        ########################################### [100%]</span><br></pre></td></tr></table></figure></li></ul><h2 id="第二节YUM"><a href="#第二节YUM" class="headerlink" title="第二节YUM"></a>第二节YUM</h2><p>1 什么是YUM</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">YUM（全称为 Yellow dog Updater, Modified）是一个在Fedora和RedHat以及CentOS中的Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包，无须繁琐地一次次下载、安装。该功能类似手机中的应用商店,通过网络下载程序包安装即可.功能类似在JAVA中使用MAVEN工具从远程仓库中下载依赖一样,可以自动处理依赖关系.YUM</span><br></pre></td></tr></table></figure><p><img src="y1_acv-SC0ehK.png"></p><blockquote><p>yum安装程序命令</p></blockquote><ul><li><p>基本语法</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yum [选项] [参数]</span><br></pre></td></tr></table></figure></li><li><p>选项说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-y</td><td>对所有提问都回答“yes”</td></tr></tbody></table></li><li><p>参数说明</p><table><thead><tr><th>参数</th><th>功能</th></tr></thead><tbody><tr><td>install</td><td>安装rpm软件包</td></tr><tr><td>update</td><td>更新rpm软件包</td></tr><tr><td>check-update</td><td>检查是否有可用的更新rpm软件包</td></tr><tr><td>remove</td><td>删除指定的rpm软件包</td></tr><tr><td>list</td><td>显示软件包信息</td></tr><tr><td>clean</td><td>清理yum过期的缓存</td></tr><tr><td>deplist</td><td>显示yum软件包的所有依赖关系</td></tr></tbody></table></li><li><p>实操案例</p><ul><li>（1）通过yum获取火狐浏览器软件包名称</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#yum list | grep firefox</span><br></pre></td></tr></table></figure><ul><li>（2）采用yum方式安装firefox</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@hadoop101 ~]#yum -y install firefox.x86_64</span><br></pre></td></tr></table></figure></li></ul><h1 id="第十章-服务环境搭建"><a href="#第十章-服务环境搭建" class="headerlink" title="第十章 服务环境搭建"></a>第十章 服务环境搭建</h1><h2 id="学习目标-9"><a href="#学习目标-9" class="headerlink" title="学习目标"></a>学习目标</h2><p>1 熟练在服务器上安装JDK</p><p>2 熟练在服务器上安装Tomcat</p><p>3 熟练在服务器上安装MySQL</p><h2 id="第一节-安装JDK"><a href="#第一节-安装JDK" class="headerlink" title="第一节 安装JDK"></a>第一节 安装JDK</h2><blockquote><p>第一步 查询系统中自带的JDK</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -qa | grep jdk</span><br></pre></td></tr></table></figure><blockquote><p>第二步 卸载系统中自带的JDK</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rpm -e --nodeps jdk的rpm软件包的名字</span><br><span class="line"></span><br><span class="line">rpm -e --nodeps java-1.8.0  摁tab键</span><br><span class="line">rpm -e --nodeps java-1.8.0  摁tab键</span><br><span class="line">rpm -e --nodeps java-1.7    摁tab键</span><br><span class="line">rpm -e --nodeps java-1.7    摁tab键</span><br></pre></td></tr></table></figure><blockquote><p>第三步 将jdk.tar.gz上传到&#x2F;opt目录下</p></blockquote><blockquote><p>第四步 解压jdk压缩包</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -zxvf jdk压缩包名称</span><br></pre></td></tr></table></figure><blockquote><p>第五步 在&#x2F;etc&#x2F;profile.d目录下创建my_env.sh文件(系统不建议直接修改&#x2F;etc&#x2F;profile)</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /etc/profile.d</span><br><span class="line">touch my_env.sh</span><br></pre></td></tr></table></figure><blockquote><p>第六步 在my_env.sh文件中配置JAVA_HOME环境变量</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#JAVA_HOME  </span><br><span class="line">JAVA_HOME=/opt/jdk-17.0.7  </span><br><span class="line">PATH=$PATH:$JAVA_HOME/bin  </span><br><span class="line">export PATH JAVA_HOME </span><br></pre></td></tr></table></figure><blockquote><p>第七步 执行source &#x2F;etc&#x2F;profile.d&#x2F;my_env.sh使环境变量立即生效，如果不生效就重启</p></blockquote><h2 id="第二节-安装Tomcat"><a href="#第二节-安装Tomcat" class="headerlink" title="第二节 安装Tomcat"></a>第二节 安装Tomcat</h2><blockquote><p>第一步  将tomcat的压缩包上传到&#x2F;opt目录下</p></blockquote><blockquote><p>第二步  解压缩tomcat的压缩包</p></blockquote><blockquote><p>第三步 进入tomcat的bin目录执行.&#x2F;startup.sh启动tomcat服务器</p></blockquote><blockquote><p>第四步 可以配置tomcat的环境变量，这样就可以在任意目录下执行startup.sh启动tomcat了</p></blockquote><p><img src="env_pYThB1h5JU.png"></p><blockquote><p>win上远程访问tomcat访问不了，因为防火墙拦截了8080端口。</p><p>解决方法：① 停用防火墙 ② 设置防火墙端口号白名单</p><p>设置白名单：</p></blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#查询端口是否开放</span><br><span class="line">firewall-cmd --query-port=8080/tcp</span><br><span class="line"></span><br><span class="line">#开放8800端口</span><br><span class="line">firewall-cmd --permanent --add-port=8080/tcp</span><br><span class="line"></span><br><span class="line">#重启防火墙(修改配置后要重启防火墙)</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="第三节-安装-MySQL"><a href="#第三节-安装-MySQL" class="headerlink" title="第三节 安装 MySQL"></a>第三节 安装 MySQL</h2><h2 id="1、采用普通方式安装MySQL"><a href="#1、采用普通方式安装MySQL" class="headerlink" title="1、采用普通方式安装MySQL"></a>1、采用普通方式安装MySQL</h2><h2 id="2、下载MySQL"><a href="#2、下载MySQL" class="headerlink" title="2、下载MySQL"></a>2、下载MySQL</h2><h3 id="2-1、官网"><a href="#2-1、官网" class="headerlink" title="2.1、官网"></a>2.1、官网</h3><p><a href="https://www.mysql.com/">https://www.mysql.com</a></p><h3 id="2-2、下载页面"><a href="#2-2、下载页面" class="headerlink" title="2.2、下载页面"></a>2.2、下载页面</h3><p><a href="https://dev.mysql.com/downloads/mysql/">https://dev.mysql.com/downloads/mysql/</a></p><p><strong>下载MySQL 8.0.xx</strong></p><p>这里没有CentOS7系统的版本，所以选择与之对应的<code>Red Hat Enterprise Linux 7</code></p><p>点击<code>Download</code>下载<code>RPM Bundle</code>全量包，包括了所有组件：</p><p><img src="image-20220622234113260.png" alt="image-20220622234113260"></p><h3 id="2-3、安装包"><a href="#2-3、安装包" class="headerlink" title="2.3、安装包"></a>2.3、安装包</h3><p><code>mysql-8.0.29-1.el7.x86_64.rpm-bundle.tar</code></p><h2 id="3、检查安装环境"><a href="#3、检查安装环境" class="headerlink" title="3、检查安装环境"></a>3、检查安装环境</h2><h3 id="3-1、卸载系统自带的mariaDB"><a href="#3-1、卸载系统自带的mariaDB" class="headerlink" title="3.1、卸载系统自带的mariaDB"></a>3.1、卸载系统自带的mariaDB</h3><p><img src="image-20220623184558116.png" alt="image-20220623184558116"></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">CentOS7中默认安装了mariaDB</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">检查是否安装，-i 表示忽略大小写，如果显示完整的rpm的名字，则表示已安装</span></span><br><span class="line">rpm -qa|grep -i mariaDB</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载， --nodeps 表示排除依赖，否则如果别的软件依赖mysql，则无法删除</span></span><br><span class="line">rpm -e --nodeps mariadb-libs</span><br></pre></td></tr></table></figure><p><img src="image-20220623185404618.png" alt="image-20220623185404618"></p><h3 id="3-2、卸载已安装的MySQL"><a href="#3-2、卸载已安装的MySQL" class="headerlink" title="3.2、卸载已安装的MySQL"></a>3.2、卸载已安装的MySQL</h3><p><strong>需要的时候参考</strong></p><h4 id="3-2-1、卸载MySQL5-7"><a href="#3-2-1、卸载MySQL5-7" class="headerlink" title="3.2.1、卸载MySQL5.7"></a>3.2.1、卸载MySQL5.7</h4><p><code>1.停止MySQL服务</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure><p><code>2.查看当前MySQL安装状况</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p><img src="image-20220701130629827.png" alt="image-20220701130629827"></p><p><code>3.卸载已安装程序</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载上述命令查询出的所有已安装程序</span></span><br><span class="line">rpm -e --nodeps mysql57-community-release</span><br><span class="line">rpm -e --nodeps mysql-community-server</span><br><span class="line">rpm -e --nodeps mysql-community-common</span><br><span class="line">rpm -e --nodeps mysql-community-libs</span><br><span class="line">rpm -e --nodeps mysql-community-client</span><br></pre></td></tr></table></figure><p><code>4.删除残留文件</code></p><p>查找相关文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><p><img src="image-20220701132959927.png" alt="image-20220701132959927"></p><p>删除上述命令查找出的相关文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /var/lib/mysql</span><br><span class="line">rm -rf /usr/share/mysql</span><br><span class="line">rm -rf /etc/selinux/targeted/active/modules/100/mysql</span><br><span class="line">rm -rf /etc/selinux/targeted/tmp/modules/100/mysql</span><br></pre></td></tr></table></figure><p><img src="image-20220701133422028.png" alt="image-20220701133422028"></p><p><code>5.删除配置文件和日志</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f /etc/my.cnf*</span><br><span class="line">rm -f /var/log/mysqld.log</span><br></pre></td></tr></table></figure><h4 id="3-2-2、卸载MySQL8"><a href="#3-2-2、卸载MySQL8" class="headerlink" title="3.2.2、卸载MySQL8"></a>3.2.2、卸载MySQL8</h4><p><code>1.停止MySQL服务</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop mysqld</span><br></pre></td></tr></table></figure><p><code>2.查看当前MySQL安装状况</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p><img src="image-20220701123512986.png" alt="image-20220701123512986"></p><p><code>3.卸载已安装程序</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">卸载上述命令查询出的所有已安装程序</span></span><br><span class="line">rpm -e --nodeps mysql-community-common</span><br><span class="line">rpm -e --nodeps mysql-community-server</span><br><span class="line">rpm -e --nodeps mysql-community-libs</span><br><span class="line">rpm -e --nodeps mysql-community-icu-data-files</span><br><span class="line">rpm -e --nodeps mysql-community-client</span><br><span class="line">rpm -e --nodeps mysql-community-client-plugins</span><br></pre></td></tr></table></figure><p><code>4.删除残留文件</code></p><p>查找相关文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">find / -name mysql</span><br></pre></td></tr></table></figure><p><img src="image-20220701133611979.png" alt="image-20220701133611979"></p><p>删除上述命令查找出的相关文件</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /etc/selinux/targeted/active/modules/100/mysql</span><br><span class="line">rm -rf /etc/selinux/targeted/tmp/modules/100/mysql</span><br><span class="line">rm -rf /usr/lib64/mysql</span><br><span class="line">rm -rf /var/lib/mysql</span><br></pre></td></tr></table></figure><p><code>5.删除配置文件和日志</code></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -f /etc/my.cnf* #如果有的话</span><br><span class="line">rm -f /var/log/mysqld.log</span><br></pre></td></tr></table></figure><h3 id="3-3、检查必要依赖"><a href="#3-3、检查必要依赖" class="headerlink" title="3.3、检查必要依赖"></a>3.3、检查必要依赖</h3><p>查询是否安装了如下依赖</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep libaio</span><br><span class="line">rpm -qa|grep net-tools</span><br><span class="line">rpm -qa|grep perl</span><br></pre></td></tr></table></figure><p>如果存在，则如下所示：</p><p><img src="image-20220625171900320.png" alt="image-20220625171900320"></p><p>如果不存在，则需要安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install libaio -y</span><br><span class="line">yum install net-tools -y</span><br><span class="line">yum install perl -y</span><br></pre></td></tr></table></figure><p>注：-y 表示在安装工程中的提示默认为yes</p><h3 id="3-4、检查-tmp临时目录权限"><a href="#3-4、检查-tmp临时目录权限" class="headerlink" title="3.4、检查&#x2F;tmp临时目录权限"></a>3.4、检查&#x2F;tmp临时目录权限</h3><p>由于MySQL安装过程中，会通过MySQL用户在&#x2F;tmp目录下新建tmp_db文件，所以请给&#x2F;tmp较大的权限。</p><p>权限检查：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ll -a /</span><br></pre></td></tr></table></figure><p><img src="image-20220623191237433.png" alt="image-20220623191237433"></p><p>如果权限不是777则授权为777：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod -R 777 /tmp</span><br></pre></td></tr></table></figure><h2 id="4、安装"><a href="#4、安装" class="headerlink" title="4、安装"></a>4、安装</h2><h3 id="4-1、解压"><a href="#4-1、解压" class="headerlink" title="4.1、解压"></a>4.1、解压</h3><p>将安装程序上传至到&#x2F;opt目录下，并解压：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /opt</span><br><span class="line">tar xvf mysql-8.0.29-1.el7.x86_64.rpm-bundle.tar</span><br></pre></td></tr></table></figure><h3 id="4-2、安装"><a href="#4-2、安装" class="headerlink" title="4.2、安装"></a>4.2、安装</h3><p>在安装文件目录下执行以下命令**（必须按照顺序执行）：**</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -ivh mysql-community-common-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-plugins-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-libs-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-icu-data-files-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-client-8.0.30-1.el7.x86_64.rpm</span><br><span class="line">rpm -ivh mysql-community-server-8.0.30-1.el7.x86_64.rpm</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-i, --install    安装软件包</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-v, --verbose    提供更多的详细信息输出</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-h, --<span class="built_in">hash</span>       软件包安装的时候列出哈希标记 (和 -v 一起使用效果更好)，展示进度条</span></span><br></pre></td></tr></table></figure><h3 id="4-3、查看是否安装成功"><a href="#4-3、查看是否安装成功" class="headerlink" title="4.3、查看是否安装成功"></a>4.3、查看是否安装成功</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rpm -qa|grep -i mysql</span><br></pre></td></tr></table></figure><p><img src="image-20220623193013077.png" alt="image-20220623193013077"></p><h3 id="4-4、查看版本"><a href="#4-4、查看版本" class="headerlink" title="4.4、查看版本"></a>4.4、查看版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysqladmin --version</span><br></pre></td></tr></table></figure><p><img src="image-20220623193115733.png" alt="image-20220623193115733"></p><h3 id="4-5、安装后的目录结构"><a href="#4-5、安装后的目录结构" class="headerlink" title="4.5、安装后的目录结构"></a>4.5、安装后的目录结构</h3><table><thead><tr><th>路径</th><th>解释</th></tr></thead><tbody><tr><td>&#x2F;usr&#x2F;bin</td><td>相关命令目录，mysqladmin等</td></tr><tr><td><code>/var/lib/mysql/</code></td><td>MySQL数据库文件的存放路径</td></tr><tr><td>&#x2F;usr&#x2F;lib64&#x2F;mysql&#x2F;plugin</td><td>MySQL</td></tr><tr><td><code>/var/log/mysqld.log</code></td><td>MySQL日志路径</td></tr><tr><td>&#x2F;var&#x2F;run&#x2F;mysqld&#x2F;mysqld.pid</td><td>进程pid文件</td></tr><tr><td>&#x2F;var&#x2F;lib&#x2F;mysql&#x2F;mysql.sock</td><td>本地连接时用的套接字文件</td></tr><tr><td>&#x2F;etc&#x2F;systemd&#x2F;system&#x2F;multi-user.target.wants&#x2F;mysqld.service</td><td>服务启停相关脚本</td></tr><tr><td><code>/etc/my.cnf</code>、&#x2F;usr&#x2F;share&#x2F;mysql-8.0</td><td>MySQL配置文件</td></tr></tbody></table><h2 id="5、启动"><a href="#5、启动" class="headerlink" title="5、启动"></a>5、启动</h2><h3 id="5-1、服务的初始化"><a href="#5-1、服务的初始化" class="headerlink" title="5.1、服务的初始化"></a>5.1、服务的初始化</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">初始化数据目录并生成初始密码</span></span><br><span class="line">mysqld --initialize --user=mysql</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看数据目录</span></span><br><span class="line">ls /var/lib/mysql/</span><br></pre></td></tr></table></figure><p><img src="image-20220623205527519.png" alt="image-20220623205527519"></p><h3 id="5-2、服务的启动和停止"><a href="#5-2、服务的启动和停止" class="headerlink" title="5.2、服务的启动和停止"></a>5.2、服务的启动和停止</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">启动，安装完MySQL第一次启动服务时，也会同时执行服务的初始化，因此也可以省略5.1</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果省略了步骤5.1，并且启动失败，则说明之前安装的MySQL没有卸载干净，数据目录/var/lib/mysql/没有删除</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">请删除数据目录后再重新启动</span></span><br><span class="line">systemctl start mysqld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭</span></span><br><span class="line">systemctl stop mysqld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启</span></span><br><span class="line">systemctl restart mysqld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看服务状态</span></span><br><span class="line">systemctl status mysqld</span><br></pre></td></tr></table></figure><p><img src="image-20220623235230971.png" alt="image-20220623235230971"></p><h3 id="5-3、查看进程"><a href="#5-3、查看进程" class="headerlink" title="5.3、查看进程"></a>5.3、查看进程</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">进程存在则说明MySQL启动成功</span></span><br><span class="line">ps -ef|grep -i mysql</span><br></pre></td></tr></table></figure><p><img src="image-20220623235756510.png" alt="image-20220623235756510"></p><h3 id="5-4、设置开机启动"><a href="#5-4、设置开机启动" class="headerlink" title="5.4、设置开机启动"></a>5.4、设置开机启动</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看服务是否自动启动（是：enabled | 否：disabled）</span></span><br><span class="line">systemctl list-unit-files|grep mysqld.service </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">设置开机启动：如不是enabled可以运行如下命令设置自启动</span></span><br><span class="line">systemctl enable mysqld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新加载服务配置</span></span><br><span class="line">systemctl daemon-reload </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">如果希望不进行自启动，运行如下命令设置</span></span><br><span class="line">systemctl disable mysqld</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重新加载服务配置</span></span><br><span class="line">systemctl daemon-reload </span><br></pre></td></tr></table></figure><h2 id="6、配置密码"><a href="#6、配置密码" class="headerlink" title="6、配置密码"></a>6、配置密码</h2><h3 id="6-1、查找初始密码"><a href="#6-1、查找初始密码" class="headerlink" title="6.1、查找初始密码"></a>6.1、查找初始密码</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">mysql安装完成之后，在/var/log/mysqld.log文件中给root生成了一个默认密码。通过下面的方式找到root默认密码，然后登录mysql。</span></span><br><span class="line">grep &#x27;temporary password&#x27; /var/log/mysqld.log</span><br><span class="line">或者使用  more /var/log/mysqld.log</span><br></pre></td></tr></table></figure><p><img src="image-20220625112051654.png" alt="image-20220625112051654"></p><h3 id="6-2、登录MySQL客户端"><a href="#6-2、登录MySQL客户端" class="headerlink" title="6.2、登录MySQL客户端"></a>6.2、登录MySQL客户端</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">然后输入上面找到的默认密码</span></span><br></pre></td></tr></table></figure><p><img src="image-20220625114724832.png" alt="image-20220625114724832"></p><h3 id="6-3、修改密码"><a href="#6-3、修改密码" class="headerlink" title="6.3、修改密码"></a>6.3、修改密码</h3><p>因为初始密码只是一个临时密码，默认只可以登录，无法做其他操作，因此我们需要重置密码</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br><span class="line"><span class="comment">-- 或者</span></span><br><span class="line"><span class="keyword">SET</span> password <span class="keyword">FOR</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span><span class="operator">=</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p><img src="image-20220625185128228.png" alt="image-20220625185128228"></p><h3 id="6-4、忘记root密码"><a href="#6-4、忘记root密码" class="headerlink" title="6.4、忘记root密码"></a>6.4、忘记root密码</h3><p><strong>需要的时候参考</strong></p><p>在&#x2F;etc&#x2F;my.cnf 文件[mysqld]中加上：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">skip_grant_tables</span>=<span class="string">1</span></span><br></pre></td></tr></table></figure><p>重新启动mysql服务使配置生效：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mysqld</span><br></pre></td></tr></table></figure><p>就可以无需密码登录MySQL客户端</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot</span><br></pre></td></tr></table></figure><p>接下来可以执行修改密码的语句重置密码</p><h2 id="7、相关问题"><a href="#7、相关问题" class="headerlink" title="7、相关问题"></a>7、相关问题</h2><h3 id="（1）远程连接问题"><a href="#（1）远程连接问题" class="headerlink" title="（1）远程连接问题"></a>（1）远程连接问题</h3><p>在用SQLyog或Navicat中配置远程连接MySQL数据库时遇到如下报错信息，这是由于MySQL默认不支持远</p><p>程连接。</p><p><img src="image-20220625191443737.png" alt="image-20220625191443737"></p><p>查看系统数据库MySQL中的user表：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE mysql;</span><br><span class="line"><span class="keyword">SELECT</span> Host,<span class="keyword">User</span> <span class="keyword">FROM</span> <span class="keyword">user</span>;</span><br></pre></td></tr></table></figure><p><img src="image-20220625231126326.png" alt="image-20220625231126326"></p><p>可以看到root用户的当前主机配置信息为localhost。<strong>修改Host为通配符%</strong></p><p>Host列指定了允许用户登录所使用的IP：</p><ul><li><p><code>Host=localhost</code>，表示只能通过本机客户端去访问。</p></li><li><p><code>Host=%</code> ，表示所有IP都有连接权限。</p></li></ul><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">UPDATE</span> <span class="keyword">user</span> <span class="keyword">SET</span> Host <span class="operator">=</span> <span class="string">&#x27;%&#x27;</span> <span class="keyword">WHERE</span> <span class="keyword">User</span> <span class="operator">=</span><span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES; <span class="comment">-- Host修改完成后记得执行FLUSH PRIVILEGES使配置立即生效：</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：在生产环境下不能为了省事将host设置为%，这样做会存在安全问题，可以设置为生产环境IP。</p></blockquote><h3 id="（2）使用SQLyog连接"><a href="#（2）使用SQLyog连接" class="headerlink" title="（2）使用SQLyog连接"></a>（2）使用SQLyog连接</h3><p><img src="image-20230613221609053.png" alt="image-20230613221609053"></p><p>出现这个原因是MySQL 8 之前的版本中加密规则是mysql_native_password，而在MySQL 8之后，加密规则是caching_sha2_password。</p><p>解决方案有两种，一种是升级SQLyog和Navicat（因此，新版SQLyog不会出现此问题），另一种是把MySQL用户登录密码加密规则还原成mysql_native_password。</p><p>**解决方法：**Linux下 mysql -uroot -p 登录你的 MySQL 数据库，然后 执行这条SQL：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">USER</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;%&#x27;</span> IDENTIFIED <span class="keyword">WITH</span> mysql_native_password <span class="keyword">BY</span> <span class="string">&#x27;123456&#x27;</span>;</span><br></pre></td></tr></table></figure><p>然后再重新配置SQLyog的连接，重新填写密码，则可连接成功了。 </p>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>食分速递项目</title>
      <link href="/2024/08/03/%E9%A3%9F%E5%88%86%E9%80%9F%E9%80%92%E9%A1%B9%E7%9B%AE/"/>
      <url>/2024/08/03/%E9%A3%9F%E5%88%86%E9%80%9F%E9%80%92%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一 环境搭建"></a>一 环境搭建</h2><p><img src="4.png"></p><h3 id="1-前端环境搭建"><a href="#1-前端环境搭建" class="headerlink" title="1.前端环境搭建"></a>1.前端环境搭建</h3><p><strong>前端工程基于 nginx 运行</strong></p><h4 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h4><p>在nginx安装的文件夹内，双击 nginx.exe 即可启动 nginx 服务，访问端口号为 80</p><h4 id="什么是nginx？"><a href="#什么是nginx？" class="headerlink" title="什么是nginx？"></a>什么是nginx？</h4><p>nginx 反向代理，就是将前端发送的<strong>动态请求</strong>由 nginx 转发到<strong>后端服务器</strong></p><ul><li><strong>位置</strong>：运行在你的<strong>服务器</strong>上。</li><li><strong>职责</strong>：<strong>接收、调度、分发</strong>请求。它是请求到达服务器后遇到的第一个“门卫”和“调度员”。它不处理核心业务逻辑（比如计算订单金额），但它决定把这个请求交给谁去处理，或者直接自己处理（比如直接返回一个图片文件）。</li></ul><h4 id="nginx-反向代理的好处"><a href="#nginx-反向代理的好处" class="headerlink" title="nginx 反向代理的好处"></a>nginx 反向代理的好处</h4><p>•提高访问速度</p><p>•进行负载均衡</p><p>•保证后端服务安全</p><p>所谓<strong>负载均衡</strong>,就是把大量的请求按照我们指定的方式均衡的分配给集群中的每台服务器</p><img src="5.png" style="zoom: 50%;"><h4 id="nginx-反向代理的配置方式"><a href="#nginx-反向代理的配置方式" class="headerlink" title="nginx 反向代理的配置方式"></a>nginx 反向代理的配置方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location /api/ &#123;</span><br><span class="line">            proxy_pass   http:<span class="comment">//localhost:8080/admin/;  #反向代理</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>**listen 80;**监听80端口</p><p><strong>逐行详解</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br></pre></td></tr></table></figure><ul><li><strong>定义一个虚拟服务器</strong>：Nginx 可以同时托管多个网站（虚拟主机），每个 <code>server {}</code> 块就是一个网站的配置。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">listen 80;</span><br></pre></td></tr></table></figure><ul><li><strong>监听端口</strong>：这个虚拟服务器会监听来自 <strong>80 端口</strong> 的 HTTP 请求（80 是 HTTP 协议的默认端口）。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server_name localhost;</span><br></pre></td></tr></table></figure><ul><li><strong>服务器名称</strong>：这个虚拟服务器对应的域名是 <code>localhost</code>。当你在浏览器里访问 <code>http://localhost</code> 时，就会由这个 server 块来处理。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api/ &#123;</span><br></pre></td></tr></table></figure><ul><li><strong>位置块</strong>：这是最核心的配置。它定义了一个 <strong>URL 路径匹配规则</strong>。所有以 <code>/api/</code> 开头的请求（例如 <code>http://localhost/api/employee/login</code>），都会进入这个 <code>location</code> 块内的逻辑。</li></ul><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">proxy_pass http://localhost:8080/admin/;</span><br></pre></td></tr></table></figure><ul><li><strong>反向代理指令</strong>：这是实现转发的关键命令。<ul><li>它告诉 Nginx，对于匹配到的请求，不要自己处理，而是将其 <strong>转发（代理）</strong> 到指定的地址。</li><li><code>http://localhost:8080/admin/</code> 是 <strong>目标地址</strong>。</li></ul></li></ul><img src="6.png" style="zoom:80%;"><h4 id="nginx-负载均衡的配置方式"><a href="#nginx-负载均衡的配置方式" class="headerlink" title="nginx 负载均衡的配置方式"></a>nginx 负载均衡的配置方式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">upstream webservers&#123;</span><br><span class="line">server <span class="number">192.168</span><span class="number">.100</span><span class="number">.128</span>:<span class="number">8080</span>;</span><br><span class="line">server <span class="number">192.168</span><span class="number">.100</span><span class="number">.129</span>:<span class="number">8080</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server&#123;</span><br><span class="line">listen <span class="number">80</span>;</span><br><span class="line">server_name localhost;</span><br><span class="line"></span><br><span class="line">location /api/ &#123;</span><br><span class="line">            proxy_pass   http:<span class="comment">//webservers/admin/;  #负载均衡</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1. <code>upstream</code> 块 - 定义服务器池（后端集群）</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream webservers &#123;</span><br><span class="line">    server 192.168.100.128:8080;</span><br><span class="line">    server 192.168.100.129:8080;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong><code>upstream webservers {}</code></strong>：定义一个名为 <code>webservers</code> 的上游服务器组（也叫集群或服务器池）。</li><li><strong><code>server 192.168.100.128:8080;</code></strong>：在池中添加第一台后端服务器，IP 是 <code>192.168.100.128</code>，端口是 <code>8080</code>。</li><li><strong><code>server 192.168.100.129:8080;</code></strong>：在池中添加第二台后端服务器，IP 是 <code>192.168.100.129</code>，端口是 <code>8080</code>。</li></ul><p><strong>Nginx 默认的负载均衡策略是轮询</strong>，也就是说，第一个请求发给 128，第二个请求发给 129，第三个又发给 128，以此类推。</p><p><strong>2. <code>location</code> 块 - 流量分发</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location /api/ &#123;</span><br><span class="line">    proxy_pass http://webservers/admin/;  #负载均衡</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>关键变化在这里：<code>proxy_pass</code> 的目标不再是单一的服务器地址，而是指向了我们定义的 upstream 池 <code>http://webservers</code>。</li><li>这意味着，所有匹配到的请求都会被分发到 <code>webservers</code> 池中的服务器上。</li></ul><p><img src="7.png"></p><h3 id="2-后端环境搭建"><a href="#2-后端环境搭建" class="headerlink" title="2.后端环境搭建"></a>2.后端环境搭建</h3><h4 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h4><p>后端工程基于 maven 进行项目构建，并且进行分模块开发</p><p><img src="8.png"></p><p><img src="9.png"></p><p><strong>sky-common</strong> 子模块中存放的是一些公共类，可以供其他模块使用</p><p><strong>sky-pojo</strong> 子模块中存放的是一些 entity、DTO、VO</p><img src="10.png" style="zoom: 67%;"><p><strong>sky-server</strong> 子模块中存放的是 配置文件、配置类、拦截器、controller、service、mapper、启动类等</p><h4 id="使用Git进行版本控制"><a href="#使用Git进行版本控制" class="headerlink" title="使用Git进行版本控制"></a>使用Git进行版本控制</h4><p>.gitingore文件是git的相关文件，目的是忽略推送到服务器的文件或文件夹</p><p><img src="11.png"></p><p>还没有被git版本控制的项目可以在idea配置，具体操作是上方操作菜单点击VSC，点击创建git仓库，最后在弹出窗中选择项目</p><img src="12.png" style="zoom:50%;"><p>之后就可以测试提交，注意第一次提交会提交到本地仓库</p><p>推送就是要推送到远程仓库，第一次会提示你配置远程仓库信息</p><p><strong>核心概念总结</strong></p><table><thead><tr><th align="left">动作</th><th align="left">作用域</th><th align="left">描述</th><th align="left">影响</th><th align="left">类比</th></tr></thead><tbody><tr><td align="left"><strong><code>commit</code></strong></td><td align="left"><strong>本地</strong></td><td align="left">将<strong>暂存区</strong>的快照永久记录到<strong>本地仓库</strong>的历史中。</td><td align="left">只更新你自己电脑上的 Git 仓库。团队其他成员看不到你的这次提交。</td><td align="left"><strong>保存到本地硬盘</strong></td></tr><tr><td align="left"><strong><code>push</code></strong></td><td align="left"><strong>本地 → 远程</strong></td><td align="left">将<strong>本地仓库</strong>中的新提交记录上传到<strong>远程仓库</strong>（如 GitHub, Gitee）。</td><td align="left">更新共享的远程仓库，团队其他成员可以通过 <code>pull</code> 获取你的更新。</td><td align="left"><strong>上传到网盘&#x2F;服务器</strong></td></tr></tbody></table><p><strong>工作流程图示</strong></p><p>一个标准的 Git 协作流程如下：</p><p><strong>你的电脑</strong><br><code>工作区</code> –(<code>git add</code>)–&gt; <code>暂存区</code> –(<code>git commit</code>)–&gt; <code>本地仓库</code> –(<code>git push</code>)–&gt; <strong>远程仓库</strong></p><p><strong>同事的电脑拉远程仓库代码</strong><br><strong>远程仓库</strong> –(<code>git fetch</code>)–&gt; <strong>本地仓库</strong> –(<code>git checkout</code>)–&gt; <strong>工作区</strong></p><ul><li><strong>合并（Merge）</strong>：<strong>“邀请别人的成果加入我的版本”</strong><ul><li>操作：我站在原地不动，把别人完成的新内容<strong>拉过来</strong>，和我当前的内容<strong>融合</strong>在一起。如果内容有重叠（冲突），我需要手动调解。</li><li>结果：历史记录会留下一次“合并”的痕迹，标明两条线在这里汇合了。</li></ul></li><li><strong>变基（Rebase）</strong>：<strong>“把我的工作挪到最新的成果之上”</strong><ul><li>操作：我先把我的工作暂时<strong>放到一边</strong>，然后<strong>把别人的新成果作为新的基础</strong>，最后我再把我的工作<strong>重新实施</strong>在这个崭新的、最新的基础之上。</li><li>结果：历史记录看起来就像是我从一开始就是在最新的代码基础上进行工作的，一条直线，非常整洁。</li></ul></li></ul><p><strong>比喻</strong></p><p><strong>合并</strong>：你正在拼A部分，同事拼好了B部分。你直接把同事拼好的B部分拿过来，和你的A部分对接在一起。如果对接不上（冲突），你就需要调整一下接口。</p><p><strong>变基</strong>：你发现同事不仅拼好了B部分，还把你们共同的底座C也升级了。于是，你先把你的A部分拆下来，把升级后的新底座C换上去，然后再把你的A部分重新拼到新底座C上。</p><h3 id="3-swagger接口文档"><a href="#3-swagger接口文档" class="headerlink" title="3.swagger接口文档"></a>3.swagger接口文档</h3><h4 id="Knife4j使用方式"><a href="#Knife4j使用方式" class="headerlink" title="Knife4j使用方式"></a>Knife4j使用方式</h4><p><a href="https://doc.xiaominfo.com/">K</a><a href="https://doc.xiaominfo.com/">nife4j</a><a href="https://doc.xiaominfo.com/"> </a>是为Java MVC框架集成Swagger生成Api文档的增强解决方案</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>WebMvcConfiguration</strong>文件配置</p><p>1.在配置类中加入 knife4j 相关配置</p><p>2.设置静态资源映射，否则接口文档页面无法访问</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置类，注册web层相关组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JwtTokenAdminInterceptor jwtTokenAdminInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注册自定义拦截器</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始注册自定义拦截器...&quot;</span>);</span><br><span class="line">        registry.addInterceptor(jwtTokenAdminInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/admin/**&quot;</span>)</span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/admin/employee/login&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过knife4j生成接口文档</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ApiInfo</span> <span class="variable">apiInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">                .title(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .version(<span class="string">&quot;2.0&quot;</span>)</span><br><span class="line">                .description(<span class="string">&quot;苍穹外卖项目接口文档&quot;</span>)</span><br><span class="line">                .build();</span><br><span class="line">        <span class="type">Docket</span> <span class="variable">docket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                .apiInfo(apiInfo)</span><br><span class="line">                .select()</span><br><span class="line">                .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.sky.controller&quot;</span>))</span><br><span class="line">                .paths(PathSelectors.any())</span><br><span class="line">                .build();</span><br><span class="line">        <span class="keyword">return</span> docket;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/doc.html&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h4><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@Api</td><td>用在类上，例如Controller，表示对类的说明</td></tr><tr><td>@ApiModel</td><td>用在类上，例如entity、DTO、VO</td></tr><tr><td>@ApiModelProperty</td><td>用在属性上，描述属性信息</td></tr><tr><td>@ApiOperation</td><td>用在方法上，例如Controller的方法，说明方法的用途、作用</td></tr></tbody></table><h2 id="二-后台管理模块开发"><a href="#二-后台管理模块开发" class="headerlink" title="二 后台管理模块开发"></a>二 后台管理模块开发</h2><h3 id="员工管理"><a href="#员工管理" class="headerlink" title="员工管理"></a>员工管理</h3><h4 id="1-新增员工"><a href="#1-新增员工" class="headerlink" title="1.新增员工"></a>1.新增员工</h4><p><strong>业务代码</strong></p><p><strong>注意</strong>：当前端提交的数据和实体类中对应的属性差别较大时（也就是实体类中会有多余的属性），建议使用DTO来封装（DTO里的数据字段和前端提交的数据字段都能对应上）。</p><p>在EmployeeController中新建一个方法save，传入的参数是employeeDTO</p><ol><li>首先编写如下代码，是网页端读入的字段数据，在这里传入employeeService对象。有2点注意事项：①前端传入的数据是json格式，要用@RequestBody注解转换为对象。②为了方便调试加一个log.info，花括号{}的内容在后面会被替换为employeeDTO的值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span><span class="comment">//post方式请求</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;新增员工&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123; </span><br><span class="line">      log.info(<span class="string">&quot;新增员工：&#123;&#125;&quot;</span>,employeeDTO);</span><br><span class="line">      employeeService.save(employeeDTO);</span><br><span class="line">      <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>在EmployeeService中编写如下代码，思路是：先创建一个emloyee实体类，然后把DTO的数据拷贝到实体类中，然后对剩下的属性进行赋值。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(EmployeeDTO employeeDTO)</span>&#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO,employee);<span class="comment">//对象属性拷贝</span></span><br><span class="line">    employee.setStatus(StatusConstant.ENABLE);</span><br><span class="line">    employee.setPassword(DigestUtils.md5DigestAsHex(PasswordConstant.DEFAULT_PASSWORD.getBytes()));</span><br><span class="line">    employee.setCreateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setCreateUser(<span class="number">10L</span>); <span class="comment">//TODO 后续需要改为当前登录用户的id</span></span><br><span class="line">    employee.setUpdateUser(<span class="number">10L</span>);</span><br><span class="line">    employeeMapper.insert(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有2个注意事项：①可以用BeanUtils工具类中的copyProperties方法来对对象进行拷贝，前提是对象的属性有一部分是相同的。②不应该直接用数字数字，否则会是硬编码，应该使用StatusConstant常量类。 </p><ol start="3"><li>在EmployeeMapper中编写SQL语句，来将数据插入数据库：</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into employee(name,username,password,phone,sex,id_number,status,create_time,update_time,create_user,update_user)&quot;+</span></span><br><span class="line"><span class="meta">    &quot;values&quot;+</span></span><br><span class="line"><span class="meta">    &quot;(#(name),#(username),#(password),#(phone),#(sex),#(idNumber),#(status),#(createTime),#(updateTime),#(createUser),#(updateUser))&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>为了使java属性字段对应数据库字段，这里需要开启Mybatis的驼峰命名，需要在配置文件application.yml文件中进行配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment">#mapper配置文件</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.sky.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment">#开启驼峰命名</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>问题一</strong></p><p>在开发阶段，前端界面可能没有开发好，所以不能进行前后端联调测试，只能用接口文档进行测试。</p><p>下面进行测试出现401，是因为有拦截器进行了拦截，原因是缺少token令牌：</p><p><img src="13.png"></p><p>所以我们先在员工登录页面获取一个令牌：</p><p><img src="14.png"></p><p>全局参数设置-输入参数名称+参数值，然后关闭页面：</p><p><img src="15.png"></p><p>然后带着参数值发送：</p><p><img src="16.png"></p><p>最后可以在数据库查看已经新增成功</p><p>问题二</p><p>录入的用户名已存在，抛出异常后没有处理，没处理的话，控制台会抛出错误P19。（因为在数据库里面设计的用户名字段是唯一）</p><p>用全局的异常处理器sky-server&#x2F;handler&#x2F;GlobalExceptionHandler，创建exceptionHandler方法，在方法里添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ExceptionHandler</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">exceptionHandler</span><span class="params">(SQLIntegrityConstraintViolationException ex)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> ex.getMessage();</span><br><span class="line">        <span class="keyword">if</span>(message.contains(<span class="string">&quot;Duplicate entry&quot;</span>))&#123;</span><br><span class="line">            String[] split = message.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> split[<span class="number">2</span>];</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> username + MessageConstant.ALREADY_EXISTS;</span><br><span class="line">            <span class="keyword">return</span> Result.error(msg);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(MessageConstant.UNKNOWN_ERROR);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的是输出：xxx已经存在的提示。核心思想是：提取错误那段话的第3个词，然后拼接后输出。</p><p>效果如图：</p><p><img src="17.png"></p><p><strong>问题三</strong></p><p>新增员工时，创建人id和修改人id设置为了固定值P20。程序中将创建者和更新者的id写死为10：</p><p><img src="18.png"></p><p><strong>JWT认证机制</strong>：用户发起请求发送用户名和密码，后端进行校验，如果验证通过就生成JWT Token，将Token返回给客户端，客户端会保存Token，在后续请求的请求头中都会携带JWT Token，请求会被拦截器拦截到，会检查Token，如果通过就会展示数据，如果没有通过就会返回错误信息。</p><p><img src="19.png"></p><p>在拦截请求验证的时候可以获得JWT令牌</p><p>问题是：在解析出登录员工id后如何传递给Service的save方法？</p><p>答：通过ThreadLocal，它是Thread的局部变量，为每个线程提供单独一份的存储空间，具有线程隔离的效果，只有在线程内才能获取到对应的值，在线程外则不能访问。</p><p>可以通过在controller、service和拦截器中输出线程的id来看是否单次请求是同一个线程，经实验验证是同一个线程。 </p><p><code>System.out.println(&quot;当前线程的id:&quot;+Thread.currentThread().getId());</code></p><p><img src="20.png"></p><p>在sky-common&#x2F;src&#x2F;main&#x2F;java&#x2F;context&#x2F;BaseContext下封装了ThreadLocal的操作。 </p><p>先在拦截器JwtTokenAdminInterceptor里将ID存到存储空间里（set），因为每次请求线程不变，所以存储空间的值不会被更改，因此可以在EmployeeServiceImpl类中取到该值（get），进而输出，很妙！</p><p><img src="21.png"></p><h4 id="2-分页查询"><a href="#2-分页查询" class="headerlink" title="2.分页查询"></a>2.分页查询</h4><p>下面是PageResult和EmployeePageQueryDTO的实体类定义：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装分页查询结果</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResult</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> total; <span class="comment">//总记录数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List records; <span class="comment">//当前页数据集合</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeePageQueryDTO</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//员工姓名</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//页码</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> page;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//每页显示记录数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> pageSize;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在EmployeeService接口中编写方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">PageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeServiceImpl中实现方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">PageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span> &#123; <span class="comment">//DTO已将页码和每页记录数传入，因此可以算出</span></span><br><span class="line">        <span class="comment">// select * from employee limit 0,10，通过Limit来控制</span></span><br><span class="line">    PageHelper.startPage(employeePageQueryDTO.getPage(),employeePageQueryDTO.getPageSize()); <span class="comment">//页码和每页记录数传入</span></span><br><span class="line">        <span class="comment">//Page是固定的，Employee是每个用户的信息</span></span><br><span class="line">        Page&lt;Employee&gt; page = employeeMapper.pageQuery(employeePageQueryDTO);<span class="comment">//</span></span><br><span class="line">        <span class="comment">//要将page对象处理为PageResult对象</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> page.getTotal();</span><br><span class="line">        List&lt;Employee&gt; result = page.getResult();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total,result);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>PageHelper的startPage方法可以通过传入的参数自动设置Limit，传入的是页码和每页的记录数，好处是：字符串的拼接不用自己做。底层实现是：它会给ThreadLocal设置上述参数，然后在执行SQL语句时会自动被取出，然后拼接成Limit。</p><p>Page是PageHelper插件定义的一个泛型类，是一个固定的返回类型。</p><p>pagehelper可以简化分页代码的编写：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在EmployeeMapper中编写方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;Employee&gt; <span class="title function_">pageQuery</span><span class="params">(EmployeePageQueryDTO employeePageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在application.yml配置文件中扫描了EmployeeMapper.xml配置文件：</p><p><img src="23.png"></p><p>在EmployeeMapper.xml中编写SQL语句，limit不用我们手写，pagehelper会自动帮我们追加拼接，order by是排序条件：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">        select * from employee</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null and name != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">        order by create_time desc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在这里是模糊查询，用concat将name与%进行拼接，%的意思是匹配任意字符串&#x2F;字符。</p><p>标签的id是mapper中的对应方法名。resultType是传入的参数类型。</p><p><strong>代码完善，解决时间显示问题</strong></p><p>方法一：在Employee实体类中的LocalDateTime属性上加上@JsonFormat注解，格式化时间。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;)</span></span><br><span class="line"><span class="keyword">private</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure><p>方法二：拓展Spring MVC的消息转换器，统一对后端返回给前端的数据进行转换处理：（推荐）</p><p>在sky-server下的com&#x2F;sky&#x2F;config&#x2F;WebMvcConfiguration下创建：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//托转Spring MVC框架的消息转换器</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">//先创建一个消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">converter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line">        <span class="comment">//为消息转换器设置一个对象转换器，对象转换器可以将Java对象序列化为json数据</span></span><br><span class="line">        converter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line">        <span class="comment">//消息转换器还没交给框架，需要把消息转换器加到容器里</span></span><br><span class="line">        converters.add(<span class="number">0</span>,converter); <span class="comment">//容器自带消息转换器，默认新加的排在末尾，0表示是首位，自己加的消息转换器排在首位</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在JacksonObjectMapper里面有关于日期时间的序列化和反序列化器。</p><h4 id="3-启禁账号"><a href="#3-启禁账号" class="headerlink" title="3.启禁账号"></a>3.启禁账号</h4><p>{status}是路径参数，1为启用，0为禁用。地址栏传参传入员工id。</p><p>操作：传入status和id，将某一id的status从0改为1或从1改为0。</p><p>在EmployeeController中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;启用禁用员工账号&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status,Long id)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;启用禁用员工账号：&#123;&#125;,&#123;&#125;&quot;</span>,status,id);</span><br><span class="line">        employeeService.startOrStop(status,id);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>取的是路径参数，加注解@PathVariable，如果和路径参数不同名，就要加括号双引号指明取的是哪个路径参数@PathVariable(“status”) ；如果同名，就不用加。</p><p>在EmployeeService接口中编入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//启用禁用员工账号</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeServiceImpl类中写入如下代码，注意下面的第2种书写方式：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">        <span class="comment">//update employee set status = ? where id = ?</span></span><br><span class="line">       <span class="comment">/* Employee employee = new Employee();</span></span><br><span class="line"><span class="comment">        employee.setStatus(status);</span></span><br><span class="line"><span class="comment">        employee.setId(id); */</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> Employee.builder()</span><br><span class="line">                .status(status)</span><br><span class="line">                .id(id)</span><br><span class="line">                .build();</span><br><span class="line">        employeeMapper.update(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在EmployeeMapper中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>在EmployeeMapper.xml中写入如下代码，下面这个代码对全字段都可以进行修改，所以不仅仅适用于对status的修改：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;/select&gt;</span><br><span class="line">    &lt;update id=<span class="string">&quot;update&quot;</span> parameterType=<span class="string">&quot;Employee&quot;</span>&gt;</span><br><span class="line">        update employee</span><br><span class="line">        &lt;set&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt; name = #&#123;name&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;username != null&quot;</span>&gt; username = #&#123;username&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;password != null&quot;</span>&gt; password = #&#123;password&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;phone != null&quot;</span>&gt; phone = #&#123;phone&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;sex != null&quot;</span>&gt; sex = #&#123;sex&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;idNumber != null&quot;</span>&gt; id_Number = #&#123;idNumber&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateTime != null&quot;</span>&gt; update_Time = #&#123;updateTime&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;updateUser != null&quot;</span>&gt; update_User = #&#123;updateUser&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt; status = #&#123;status&#125;,&lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/set&gt;</span><br><span class="line">        <span class="type">where</span> <span class="variable">id</span> <span class="operator">=</span> #&#123;id&#125;</span><br><span class="line">    &lt;/update&gt;</span><br></pre></td></tr></table></figure><h4 id="4-编辑员工"><a href="#4-编辑员工" class="headerlink" title="4.编辑员工"></a>4.编辑员工</h4><p>①回显数据操作：用查询语句把Employee对象查出来，然后显示。</p><p>EmployeeController编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据id查询员工信息&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Employee&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeService.getById(id);</span><br><span class="line">        <span class="keyword">return</span> Result.success(employee);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeService接口编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询员工</span></span><br><span class="line">Employee <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>EmployeeServiceImpl实现类编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Employee <span class="title function_">getById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.getById(id);</span><br><span class="line">        employee.setPassword(<span class="string">&quot;****&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> employee;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>EmployeeMapper中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询员工信息</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from employee where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Employee <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>②接收提交的数据：调用之前mapper的update方法进行更新。</p><p>EmployeeController编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;编辑员工信息&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> EmployeeDTO employeeDTO)</span>&#123;</span><br><span class="line">     log.info(<span class="string">&quot;编辑员工信息：&#123;&#125;&quot;</span>,employeeDTO);</span><br><span class="line">     employeeService.update(employeeDTO);</span><br><span class="line">     <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeService接口编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编辑员工信息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span>;</span><br></pre></td></tr></table></figure><p>EmployeeServiceImpl实现类编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(EmployeeDTO employeeDTO)</span> &#123;</span><br><span class="line">    <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">    BeanUtils.copyProperties(employeeDTO,employee); <span class="comment">//属性拷贝</span></span><br><span class="line">    employee.setUpdateTime(LocalDateTime.now());</span><br><span class="line">    employee.setUpdateUser(BaseContext.getCurrentId());</span><br><span class="line">    employeeMapper.update(employee); <span class="comment">//需要传入Employee参数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>EmployeeMapper中编写如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><h4 id="5-字段填充"><a href="#5-字段填充" class="headerlink" title="5.字段填充"></a>5.字段填充</h4><p>在多个业务表中都有公共字段，如create_time、create_user（insert时用到）；update_time，update_user（insert和update时用到）这些。</p><p>插入数据的时候需要为这些字段赋值，会有大量重复的冗余set方法代码，后期如果表结构发生变化，代码需要跟着修改，此时就不方便修改（如果后期进行修改要重复一个个进行修改）。</p><table><thead><tr><th><strong>序号</strong></th><th><strong>字段名</strong></th><th><strong>含义</strong></th><th><strong>数据类型</strong></th><th><strong>操作类型</strong></th></tr></thead><tbody><tr><td>1</td><td>create_time</td><td>创建时间</td><td>datetime</td><td>insert</td></tr><tr><td>2</td><td>create_user</td><td>创建人id</td><td>bigint</td><td>insert</td></tr><tr><td>3</td><td>update_time</td><td>修改时间</td><td>datetime</td><td>insert、update</td></tr><tr><td>4</td><td>update_user</td><td>修改人id</td><td>bigint</td><td>insert、update</td></tr></tbody></table><p>实现思路：自定义注解AutoFill，用于标识需要进行公共字段自动填充的方法。然后自定义切面类AutoFillAspect，统一拦截加入了AutoFill注解的方法，通过反射为公共字段赋值。在Mapper的方法上加入AutoFill注解。</p><p>技术点：枚举，注解，AOP，反射。</p><p>在com.sky下创建annotation包，创造一个AutoFill的Annotation注解。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义注解，用于标识某个方法需要进行功能字段自动填充处理</span></span><br><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> AutoFill &#123;</span><br><span class="line">    <span class="comment">//数据库操作类型：UPDATE INSERT</span></span><br><span class="line">    OperationType <span class="title function_">value</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Target注解指定加上什么上面，Retention注解指定什么时候用，</p><p>在com.sky下创建aspect包，创建类AutoFillAspect，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义切面，实现公共字段自动填充处理逻辑</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AutoFillAspect</span> &#123;</span><br><span class="line">    <span class="comment">//切入点</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.sky.mapper.*.*(..)) &amp;&amp; @annotation(com.sky.annotation.AutoFill)&quot;)</span> </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFillPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="comment">//前置通知，在通知中进行公共字段的赋值</span></span><br><span class="line">    <span class="meta">@Before(&quot;autoFillPointCut()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">autoFill</span><span class="params">(JoinPoint joinPoint)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行公共字段自动填充...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切入点：对哪些类的哪些方法进行拦截。@Pointcut里面写的是对哪些方法进行拦截，要满足2点：①必须是mapper下的所有类的方法，②还要有AutoFill这个注解。</p><p>通知：前置通知，后置通知，环绕通知，异常通知。</p><p>然后在sky-server下的mapper中的EmployeeMapper类里，insert上加入@AutoFill(value&#x3D; OperationType.INSERT)注解，update上加入@AutoFill(value&#x3D; OperationType.UPDATE)注解。</p><p>在sky-server的com.sky下的aspect的AutoFillAspect里的log.info(“开始进行公共字段自动填充…”);下添加如下代码：</p><p>1.获取到当前被拦截的方法上的数据库操作类型（比如是Insert还是Update，不同的类型需要给不同的参数赋值）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">MethodSignature</span> <span class="variable">signature</span> <span class="operator">=</span> (MethodSignature) joinPoint.getSignature();<span class="comment">//通过连接点对象来获取签名，向下转型为MethodSignature</span></span><br><span class="line"><span class="type">AutoFill</span> <span class="variable">autoFill</span> <span class="operator">=</span> signature.getMethod().getAnnotation(AutoFill.class);<span class="comment">//获得方法上的注解对象</span></span><br><span class="line"><span class="type">OperationType</span> <span class="variable">operationType</span> <span class="operator">=</span> autoFill.value();<span class="comment">//获得数据库操作类型（Insert or Update）</span></span><br></pre></td></tr></table></figure><p>2.获取到当前被拦截的方法的参数–实体对象（比如传入的参数是员工还是菜品还是其它的）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Object[] args = joinPoint.getArgs(); <span class="comment">//获得了方法所有的参数</span></span><br><span class="line"><span class="keyword">if</span>(args == <span class="literal">null</span> || args.length==<span class="number">0</span> )&#123; <span class="comment">//没有参数</span></span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">Object</span> <span class="variable">entity</span> <span class="operator">=</span> args[<span class="number">0</span>];<span class="comment">//现在约定实体放在第1个位置,传入实体可能不同所以用Object</span></span><br></pre></td></tr></table></figure><p>3.准备赋值的数据（给公共字段赋值的数据，比如时间就是系统时间，用户ID是从ThreadLocal获取）</p><p>4.根据当前不同的操作类型，为对应的属性通过反射来赋值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line"><span class="type">Long</span> <span class="variable">currentId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line"><span class="keyword">if</span>(operationType == OperationType.INSERT)&#123;</span><br><span class="line">    <span class="comment">//为4个公共字段赋值</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setCreateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_TIME, LocalDateTime.class); <span class="comment">//把方法名全部换成常量类，防止写错</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setCreateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_CREATE_USER, Long.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">        <span class="comment">//4.根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class="line">        setCreateTime.invoke(entity,now);</span><br><span class="line">        setCreateUser.invoke(entity,currentId);</span><br><span class="line">        setUpdateTime.invoke(entity,now);</span><br><span class="line">        setUpdateUser.invoke(entity,currentId);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(operationType == OperationType.UPDATE)&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//为2个公共字段赋值</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateTime</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_TIME, LocalDateTime.class);</span><br><span class="line">        <span class="type">Method</span> <span class="variable">setUpdateUser</span> <span class="operator">=</span> entity.getClass().getDeclaredMethod(AutoFillConstant.SET_UPDATE_USER, Long.class);</span><br><span class="line">        <span class="comment">//4.根据当前不同的操作类型，为对应的属性通过反射来赋值</span></span><br><span class="line">        setUpdateTime.invoke(entity, now);</span><br><span class="line">        setUpdateUser.invoke(entity, currentId);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后要在mapper层的CategoryMapper和EmployeeMapper中的Insert和Update方法上加上@AutoFill注解，注解内容用OperationType.INSERT或OperationType.Update。</p><p>最后把service层的那些手动赋值删除掉或者注释掉。</p><h3 id="菜品管理"><a href="#菜品管理" class="headerlink" title="菜品管理"></a>菜品管理</h3><h4 id="1-新增菜品"><a href="#1-新增菜品" class="headerlink" title="1.新增菜品"></a>1.新增菜品</h4><p>在controller下创建一个CommonController，写入如下代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 通用接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/common&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;通用接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonController</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;sky.upload.local&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String uploadPath;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;文件上传&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;文件上传：&#123;&#125;&quot;</span>, file);</span><br><span class="line">        <span class="keyword">if</span> (file.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.error(<span class="string">&quot;上传文件不能为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理相对路径</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">absolutePath</span> <span class="operator">=</span> Paths.get(uploadPath).toAbsolutePath().toString();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 创建目录</span></span><br><span class="line">            <span class="type">File</span> <span class="variable">directory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(absolutePath);</span><br><span class="line">            <span class="keyword">if</span> (!directory.exists()) &#123;</span><br><span class="line">                directory.mkdirs();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 生成唯一文件名</span></span><br><span class="line">            <span class="comment">// 获取源文件名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            <span class="comment">// 获取文件后缀</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">extension</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">            <span class="comment">// 生成文件名(当前时间戳+uuid+后缀)</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> System.currentTimeMillis() + <span class="string">&quot;_&quot;</span> +</span><br><span class="line">                    UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>) + extension;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 保存文件</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">filePath</span> <span class="operator">=</span> absolutePath + File.separator + fileName;</span><br><span class="line">            file.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(filePath));</span><br><span class="line"></span><br><span class="line">            log.info(<span class="string">&quot;文件上传成功，保存路径：&#123;&#125;&quot;</span>, filePath);</span><br><span class="line">            <span class="comment">// 返回完整路径</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(filePath);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;文件上传失败&quot;</span>, e);</span><br><span class="line">            <span class="keyword">return</span> Result.error(MessageConstant.UPLOAD_FAILED);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在sky-server的controller下创建DishController：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/dish&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;菜品相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;新增菜品：&#123;&#125;&quot;</span>,dishDTO);</span><br><span class="line">        dishService.saveWithFlavor(dishDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下创建DishService：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="comment">//新增菜品和对应的口味</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDTO dishDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service的impl下创建DishServiceImpl：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">DishService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishFlavorMapper dishFlavorMapper;</span><br><span class="line">    <span class="comment">//新增菜品对应的口味</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithFlavor</span><span class="params">(DishDTO dishDTO)</span> &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        BeanUtils.copyProperties(dishDTO,dish);</span><br><span class="line">        <span class="comment">//想菜品表插入1条数据</span></span><br><span class="line">        dishMapper.insert(dish);</span><br><span class="line">        <span class="comment">//获取insert语句生成的主键值</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> dish.getId();</span><br><span class="line">        <span class="comment">//向口味表插入n条数据</span></span><br><span class="line">        List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();</span><br><span class="line">        <span class="keyword">if</span>(flavors != <span class="literal">null</span> &amp;&amp; flavors.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            flavors.forEach(dishFlavor -&gt; &#123;</span><br><span class="line">                dishFlavor.setDishId(dishId);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//向口味表插入n条数据</span></span><br><span class="line">            dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>一个菜品有多个口味数据，向菜品表插入1条数据，向口味表插入n条数据。</strong></p><p><strong>因为涉及到多个表，所以添加@Transactional的注解（需要在启动类上添加@EnableTransactionManagement注解）</strong></p><p>在sky-server的mapper创建DishMapper类，写入insert方法的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据分类id查询菜品数量</span></span><br><span class="line">    <span class="meta">@Select(&quot;select count(id) from dish where category_id = #&#123;categoryId&#125;&quot;)</span></span><br><span class="line">    Integer <span class="title function_">countByCategoryId</span><span class="params">(Long categoryId)</span>;</span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Dish dish)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下创建DishMapper.xml文件，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.DishMapper&quot;</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insert&quot;</span>&gt;</span><br><span class="line">        insert into <span class="title function_">dish</span><span class="params">(name,category_id,price,image,description,create_time,update_time,create_user,update_user,status)</span></span><br><span class="line">        values (#&#123;name&#125;,#&#123;categoryId&#125;,#&#123;price&#125;,#&#123;image&#125;,#&#123;description&#125;,#&#123;createTime&#125;,#&#123;updateTime&#125;,#&#123;createUser&#125;,#&#123;updateUser&#125;,#&#123;status&#125;)</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper创建DishFlavorMapper类，写入insert方法的代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DishFlavorMapper</span> &#123;</span><br><span class="line">    <span class="meta">@AutoFill(value= OperationType.INSERT)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;DishFlavor&gt; flavors)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下创建DishFlavorMapper.xml文件，写入如下代码。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.DishFlavorMapper&quot;</span>&gt;</span><br><span class="line">    &lt;insert id=<span class="string">&quot;insertBatch&quot;</span>&gt;</span><br><span class="line">        insert into <span class="title function_">dish_flavor</span> <span class="params">(dish_id,name,value)</span> VALUES</span><br><span class="line">        &lt;foreach collection=<span class="string">&quot;flavors&quot;</span> item=<span class="string">&quot;df&quot;</span> separator=<span class="string">&quot;,&quot;</span>&gt;</span><br><span class="line">            (#&#123;df.dishId&#125;,#&#123;df.name&#125;,#&#123;df.value&#125;)</span><br><span class="line">        &lt;/foreach&gt;</span><br><span class="line">    &lt;/insert&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>在DishMapper和DishFlavorMapper中的insert方法上添加@AutoFill(value&#x3D; OperationType.INSERT)注解。</p><h4 id="2-分页查询-1"><a href="#2-分页查询-1" class="headerlink" title="2.分页查询"></a>2.分页查询</h4><p>在sky-server的controller中已有的DishController类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;菜品分页查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;菜品分页查询：&#123;&#125;&quot;</span>,dishPageQueryDTO);</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> dishService.pageQuery(dishPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>&#123;</span><br><span class="line">    PageHelper.startPage(dishPageQueryDTO.getPage(),dishPageQueryDTO.getPageSize());</span><br><span class="line">    Page&lt;DishVO&gt; page = dishMapper.pageQuery(dishPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(),page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中已有的DishMapper类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Page&lt;DishVO&gt; <span class="title function_">pageQuery</span><span class="params">(DishPageQueryDTO dishPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下已有的DishMapper.xml中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;select id=<span class="string">&quot;pageQuery&quot;</span> resultType=<span class="string">&quot;com.sky.vo.DishVO&quot;</span>&gt;</span><br><span class="line">    select d.* , c.name as categoryName from dish d left outer join category c on d.category_id = c.id</span><br><span class="line">    &lt;where&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;name != null&quot;</span>&gt;</span><br><span class="line">            and d.name like <span class="title function_">concat</span><span class="params">(<span class="string">&#x27;%&#x27;</span>,#&#123;name&#125;,<span class="string">&#x27;%&#x27;</span>)</span></span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span><br><span class="line">            and d.category_id = #&#123;categoryId&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;<span class="keyword">if</span> test=<span class="string">&quot;status != null&quot;</span>&gt;</span><br><span class="line">            and d.status = #&#123;status&#125;</span><br><span class="line">        &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">    &lt;/where&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><h4 id="3-删除菜品"><a href="#3-删除菜品" class="headerlink" title="3.删除菜品"></a>3.删除菜品</h4><p>批量删除是在地址栏写入要删除菜品的集合。</p><p>在sky-server的controller中已有的DishController类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;菜品批量删除&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;菜品批量删除：&#123;&#125;&quot;</span>,ids);</span><br><span class="line">        dishService.deleteBatch(ids);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要加一个注解@RequestParam，可以将地址栏中多个数字参数提取出来然后变成List集合。 </p><p>在sky-server的service中已有的DishService类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    <span class="comment">//不能删除：存在起售中的菜品</span></span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span>(dish.getStatus()== StatusConstant.ENABLE)&#123; <span class="comment">//状态为1起售中</span></span><br><span class="line">            <span class="comment">//当前菜品处于起售中，不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//不能删除：菜品被套餐关联</span></span><br><span class="line">    List&lt;Long&gt; setmealIds = setmealDishMapper.getSetmealIdsByDishIds(ids);</span><br><span class="line">    <span class="keyword">if</span>(setmealIds != <span class="literal">null</span> &amp;&amp; setmealIds.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="comment">//当前菜品被套餐关联了，不能删除</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.DISH_BE_RELATED_BY_SETMEAL);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//删除菜品表中的菜品数据</span></span><br><span class="line">    <span class="keyword">for</span> (Long id : ids) &#123;</span><br><span class="line">        dishMapper.deleteById(id);</span><br><span class="line">        <span class="comment">//删除口味数据</span></span><br><span class="line">        dishFlavorMapper.deleteByDishId(id);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>批量删除用foreach循环来遍历，删除被套餐关联的SQL语句比较复杂。 </p><p>删除菜品表中的菜品数据这里，每次循环需要执行2次SQL，可能会出现性能问题。应该采用如下的SQL形式：delete from dish where id in (?,?,?)。</p><p>在sky-server的mapper中已有的DishMapper类中添加如下代码（负责删除菜品）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据主键删除菜品</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from dish where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中创建DishFlavorMapper类中添加如下代码（负责删除关联的口味数据）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据菜品id删除对应的口味数据</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from dish_flavor where dish_id = #&#123;dishId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByDishId</span><span class="params">(Long dishId)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中创建SetmealDishMapper类中添加如下代码（负责查看是否有关联的套餐）：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealDishMapper</span> &#123;</span><br><span class="line">    <span class="comment">//根据菜品id查询对应的套餐id</span></span><br><span class="line">    <span class="comment">//select setmeal_id from setmeal_dish where dish_id in (1,2,3,4)</span></span><br><span class="line">    List&lt;Long&gt; <span class="title function_">getSetmealIdsByDishIds</span><span class="params">(List&lt;Long&gt; dishIds)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（上步SQL具体实现）在sky-server的resources的mapper中创建SetmealDishMapper类中添加如下代码（思路是去查询套餐表，看套餐菜品id是否和当前传入的id相同）：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.sky.mapper.SetmealDishMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getSetmealIdsByDishIds&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.Long&quot;</span>&gt;</span></span><br><span class="line">        select setmeal_id from setmeal_dish where dish_id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;dishIds&quot;</span> <span class="attr">item</span>=<span class="string">&quot;dishId&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">            #&#123;dishId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里比较巧妙的是foreach循环，collection是集合，item是一个个项，separator是分割符号，open是开始符号，close是结束符号。每个元素用逗号分割，然后用大括号括起来。</p><h4 id="4-修改菜品"><a href="#4-修改菜品" class="headerlink" title="4.修改菜品"></a>4.修改菜品</h4><p>在sky-server的controller中已有的DishController类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;DishVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;根据id查询菜品：&#123;&#125;&quot;</span>,id);</span><br><span class="line">    <span class="type">DishVO</span> <span class="variable">dishVO</span> <span class="operator">=</span> dishService.getByIdWithFlavor(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(dishVO);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品</span></span><br><span class="line">DishVO <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id查询菜品和对应的口味数据</span></span><br><span class="line"><span class="keyword">public</span> DishVO <span class="title function_">getByIdWithFlavor</span><span class="params">(Long id)</span>&#123;</span><br><span class="line">    <span class="comment">//根据id查询菜品数据</span></span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(id);</span><br><span class="line">    <span class="comment">//根据菜品id查询口味数据</span></span><br><span class="line">    List&lt;DishFlavor&gt; dishFlavors = dishFlavorMapper.getByDishId(id);</span><br><span class="line">    <span class="comment">//将查询到的数据封装到VO</span></span><br><span class="line">    <span class="type">DishVO</span> <span class="variable">dishVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DishVO</span>() ;</span><br><span class="line">    BeanUtils.copyProperties(dish,dishVO);</span><br><span class="line">    dishVO.setFlavors(dishFlavors);</span><br><span class="line">    <span class="keyword">return</span> dishVO;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper中已有的dishFlavorMapper类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(&quot;select * from dish_flavor where dish_id=#&#123;dishId&#125;&quot;)</span></span><br><span class="line">List&lt;DishFlavor&gt; <span class="title function_">getByDishId</span><span class="params">(Long dishId)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的controller中已有的DishController类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改菜品</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> DishDTO dishDTO)</span>&#123;</span><br><span class="line">    log.info(<span class="string">&quot;修改菜品；&#123;&#125;&quot;</span>,dishDTO);</span><br><span class="line">    dishService.updateWithFlavor(dishDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service中已有的DishService类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id修改菜品基本信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDTO dishDTO)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl中已有的DishServiceImpl类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id修改菜品基本信息和对应的口味信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateWithFlavor</span><span class="params">(DishDTO dishDTO)</span>&#123;</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">    BeanUtils.copyProperties(dishDTO,dish);</span><br><span class="line">    <span class="comment">//修改菜品表基本信息</span></span><br><span class="line">    dishMapper.update(dish);</span><br><span class="line">    <span class="comment">//删除原有的口味数据</span></span><br><span class="line">    dishFlavorMapper.deleteByDishId(dishDTO.getId());</span><br><span class="line">    <span class="comment">//重新插入口味数据</span></span><br><span class="line">    List&lt;DishFlavor&gt; flavors = dishDTO.getFlavors();</span><br><span class="line">    <span class="keyword">if</span>(flavors != <span class="literal">null</span> &amp;&amp; flavors.size()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        flavors.forEach(dishFlavor -&gt;&#123;</span><br><span class="line">            dishFlavor.setDishId(dishDTO.getId());</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    dishFlavorMapper.insertBatch(flavors);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>口味的修改比较麻烦，有可能是删除了再新增，有可能不删除，有可能没删除直接新增。</p><p>处理方法：直接把菜品原先关联的口味数据删掉，然后再按照当前传来的口味重新插入数据。</p><p>传入DTO不合适，因为DTO里有口味数据，而修改菜品不应该包含口味，所以应该只传入一个Dish数据。</p><p>  在sky-server的mapper中已有的dishFlavorMapper类中添加代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据id动态修改菜品</span></span><br><span class="line"><span class="meta">@AutoFill(value=OperationType.UPDATE)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper中已有的dishFlavorMapper.xml类中添加代码如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update dish</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span> name = #&#123;name&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span>category_id = #&#123;categoryId&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;price != null&quot;</span>&gt;</span>price = #&#123;price&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;image != null&quot;</span>&gt;</span>image = #&#123;image&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null&quot;</span>&gt;</span>description = #&#123;description&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span>status = #&#123;status&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateTime != null&quot;</span>&gt;</span>update_Time = #&#123;updateTime&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;updateUser != null&quot;</span>&gt;</span>update_User = #&#123;updateUser&#125;,<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里用的是动态SQL。</p><h3 id="套餐管理"><a href="#套餐管理" class="headerlink" title="套餐管理"></a>套餐管理</h3><h4 id="1-新增套餐"><a href="#1-新增套餐" class="headerlink" title="1. 新增套餐"></a>1. 新增套餐</h4><p>1.2.1 DishController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;Dish&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span>&#123;</span><br><span class="line">    List&lt;Dish&gt; list = dishService.list(categoryId);</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.2 DishService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span>;</span><br></pre></td></tr></table></figure><p>1.2.3 DishServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据分类id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> categoryId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">    <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> Dish.builder()</span><br><span class="line">        .categoryId(categoryId)</span><br><span class="line">        .status(StatusConstant.ENABLE)</span><br><span class="line">        .build();</span><br><span class="line">    <span class="keyword">return</span> dishMapper.list(dish);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.4 DishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 动态条件查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dish</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">list</span><span class="params">(Dish dish)</span>;</span><br></pre></td></tr></table></figure><p>1.2.5 DishMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Dish&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Dish&quot;</span>&gt;</span></span><br><span class="line">    select * from dish</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.2.6 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/setmeal&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;套餐相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealService setmealService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;新增套餐&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">        setmealService.saveWithDish(setmealDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.7 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDTO setmealDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.8 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 套餐业务实现</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SetmealServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">SetmealService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealDishMapper setmealDishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐，同时需要保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveWithDish</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">        BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//向套餐表插入数据</span></span><br><span class="line">        setmealMapper.insert(setmeal);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取生成的套餐id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmeal.getId();</span><br><span class="line"></span><br><span class="line">        List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">        setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class="line">            setmealDish.setSetmealId(setmealId);</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//保存套餐和菜品的关联关系</span></span><br><span class="line">        setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.2.9 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 新增套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmeal</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@AutoFill(OperationType.INSERT)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Setmeal setmeal)</span>;</span><br></pre></td></tr></table></figure><p>1.2.10 SetmealMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;Setmeal&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into setmeal</span><br><span class="line">    (category_id, name, price, status, description, image, create_time, update_time, create_user, update_user)</span><br><span class="line">    values (#&#123;categoryId&#125;, #&#123;name&#125;, #&#123;price&#125;, #&#123;status&#125;, #&#123;description&#125;, #&#123;image&#125;, #&#123;createTime&#125;, #&#123;updateTime&#125;,</span><br><span class="line">    #&#123;createUser&#125;, #&#123;updateUser&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>1.2.11 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量保存套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDishes</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insertBatch</span><span class="params">(List&lt;SetmealDish&gt; setmealDishes)</span>;</span><br></pre></td></tr></table></figure><p>1.2.12 SetmealDishMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertBatch&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    insert into setmeal_dish</span><br><span class="line">    (setmeal_id,dish_id,name,price,copies)</span><br><span class="line">    values</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;setmealDishes&quot;</span> <span class="attr">item</span>=<span class="string">&quot;sd&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">        (#&#123;sd.setmealId&#125;,#&#123;sd.dishId&#125;,#&#123;sd.name&#125;,#&#123;sd.price&#125;,#&#123;sd.copies&#125;)</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-套餐分页查询"><a href="#2-套餐分页查询" class="headerlink" title="2. 套餐分页查询"></a>2. 套餐分页查询</h4><p>2.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;分页查询&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;PageResult&gt; <span class="title function_">page</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="type">PageResult</span> <span class="variable">pageResult</span> <span class="operator">=</span> setmealService.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success(pageResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">PageResult <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>2.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> PageResult <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> setmealPageQueryDTO.getPage();</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> setmealPageQueryDTO.getPageSize();</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(pageNum, pageSize);</span><br><span class="line">    Page&lt;SetmealVO&gt; page = setmealMapper.pageQuery(setmealPageQueryDTO);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(page.getTotal(), page.getResult());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.2.4 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealPageQueryDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Page&lt;SetmealVO&gt; <span class="title function_">pageQuery</span><span class="params">(SetmealPageQueryDTO setmealPageQueryDTO)</span>;</span><br></pre></td></tr></table></figure><p>2.2.5 SetmealMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;pageQuery&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.sky.vo.SetmealVO&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    s.*,c.name categoryName</span><br><span class="line">    from</span><br><span class="line">    setmeal s</span><br><span class="line">    left join</span><br><span class="line">    category c</span><br><span class="line">    on</span><br><span class="line">    s.category_id = c.id</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name != null&quot;</span>&gt;</span></span><br><span class="line">            and s.name like concat(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and s.status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;categoryId != null&quot;</span>&gt;</span></span><br><span class="line">            and s.category_id = #&#123;categoryId&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    order by s.create_time desc</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-删除套餐"><a href="#3-删除套餐" class="headerlink" title="3. 删除套餐"></a>3. 删除套餐</h4><p>3.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;批量删除套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;Long&gt; ids)</span>&#123;</span><br><span class="line">    setmealService.deleteBatch(ids);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span>;</span><br></pre></td></tr></table></figure><p>3.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> ids</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteBatch</span><span class="params">(List&lt;Long&gt; ids)</span> &#123;</span><br><span class="line">    ids.forEach(id -&gt; &#123;</span><br><span class="line">        <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">        <span class="keyword">if</span>(StatusConstant.ENABLE == setmeal.getStatus())&#123;</span><br><span class="line">            <span class="comment">//起售中的套餐不能删除</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DeletionNotAllowedException</span>(MessageConstant.SETMEAL_ON_SALE);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    ids.forEach(setmealId -&gt; &#123;</span><br><span class="line">        <span class="comment">//删除套餐表中的数据</span></span><br><span class="line">        setmealMapper.deleteById(setmealId);</span><br><span class="line">        <span class="comment">//删除套餐菜品关系表中的数据</span></span><br><span class="line">        setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.2.4 SetmealMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">Setmeal <span class="title function_">getById</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id删除套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from setmeal where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><p>3.2.5 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据套餐id删除套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Delete(&quot;delete from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h4 id="4-修改套餐"><a href="#4-修改套餐" class="headerlink" title="4. 修改套餐"></a>4. 修改套餐</h4><p>4.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐，用于修改页面回显数据</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;根据id查询套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;SetmealVO&gt; <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> setmealService.getByIdWithDish(id);</span><br><span class="line">    <span class="keyword">return</span> Result.success(setmealVO);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;修改套餐&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    setmealService.update(setmealDTO);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐和关联的菜品数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">SetmealVO <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SetmealDTO setmealDTO)</span>;</span><br></pre></td></tr></table></figure><p>4.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据id查询套餐和套餐菜品关系</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> SetmealVO <span class="title function_">getByIdWithDish</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(id);</span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDishMapper.getBySetmealId(id);</span><br><span class="line"></span><br><span class="line">    <span class="type">SetmealVO</span> <span class="variable">setmealVO</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SetmealVO</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmeal, setmealVO);</span><br><span class="line">    setmealVO.setSetmealDishes(setmealDishes);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> setmealVO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改套餐</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealDTO</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(SetmealDTO setmealDTO)</span> &#123;</span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Setmeal</span>();</span><br><span class="line">    BeanUtils.copyProperties(setmealDTO, setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1、修改套餐表，执行update</span></span><br><span class="line">    setmealMapper.update(setmeal);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//套餐id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> setmealDTO.getId();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2、删除套餐和菜品的关联关系，操作setmeal_dish表，执行delete</span></span><br><span class="line">    setmealDishMapper.deleteBySetmealId(setmealId);</span><br><span class="line"></span><br><span class="line">    List&lt;SetmealDish&gt; setmealDishes = setmealDTO.getSetmealDishes();</span><br><span class="line">    setmealDishes.forEach(setmealDish -&gt; &#123;</span><br><span class="line">        setmealDish.setSetmealId(setmealId);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//3、重新插入套餐和菜品的关联关系，操作setmeal_dish表，执行insert</span></span><br><span class="line">    setmealDishMapper.insertBatch(setmealDishes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.2.4 SetmealDishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据套餐id查询套餐和菜品的关联关系</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@Select(&quot;select * from setmeal_dish where setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line">   List&lt;SetmealDish&gt; <span class="title function_">getBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h4 id="5-起售停售套餐"><a href="#5-起售停售套餐" class="headerlink" title="5. 起售停售套餐"></a>5. 起售停售套餐</h4><p>5.2.1 SetmealController</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/status/&#123;status&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ApiOperation(&quot;套餐起售停售&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">startOrStop</span><span class="params">(<span class="meta">@PathVariable</span> Integer status, Long id)</span> &#123;</span><br><span class="line">    setmealService.startOrStop(status, id);</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.2.2 SetmealService</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售、停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span>;</span><br></pre></td></tr></table></figure><p>5.2.3 SetmealServiceImpl</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 套餐起售、停售</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> status</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">startOrStop</span><span class="params">(Integer status, Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//起售套餐时，判断套餐内是否有停售菜品，有停售菜品提示&quot;套餐内包含未启售菜品，无法启售&quot;</span></span><br><span class="line">    <span class="keyword">if</span>(status == StatusConstant.ENABLE)&#123;</span><br><span class="line">        <span class="comment">//select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = ?</span></span><br><span class="line">        List&lt;Dish&gt; dishList = dishMapper.getBySetmealId(id);</span><br><span class="line">        <span class="keyword">if</span>(dishList != <span class="literal">null</span> &amp;&amp; dishList.size() &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            dishList.forEach(dish -&gt; &#123;</span><br><span class="line">                <span class="keyword">if</span>(StatusConstant.DISABLE == dish.getStatus())&#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SetmealEnableFailedException</span>(MessageConstant.SETMEAL_ENABLE_FAILED);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> Setmeal.builder()</span><br><span class="line">        .id(id)</span><br><span class="line">        .status(status)</span><br><span class="line">        .build();</span><br><span class="line">    setmealMapper.update(setmeal);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.2.4 DishMapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据套餐id查询菜品</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> setmealId</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Select(&quot;select a.* from dish a left join setmeal_dish b on a.id = b.dish_id where b.setmeal_id = #&#123;setmealId&#125;&quot;)</span></span><br><span class="line">List&lt;Dish&gt; <span class="title function_">getBySetmealId</span><span class="params">(Long setmealId)</span>;</span><br></pre></td></tr></table></figure><h2 id="三-Redis使用"><a href="#三-Redis使用" class="headerlink" title="三 Redis使用"></a>三 Redis使用</h2><h3 id="营业状态"><a href="#营业状态" class="headerlink" title="营业状态"></a>营业状态</h3><p>设置营业状态；管理端查询营业状态，用户端查询营业状态（管理端和用户端查询路径不同）。</p><p>营业状态存储在Redis中，不用在Mysql中单独创建一张表。</p><p>在controller&#x2F;admin下创建ShopController这个是管理端的，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;adminShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/admin/shop&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;店铺相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY=<span class="string">&quot;SHOP_STATUS&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">//设置店铺营业状态</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;status&#125;&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;设置店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">setStatus</span><span class="params">( <span class="meta">@PathVariable</span> Integer status)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;设置店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span> ?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        redisTemplate.opsForValue().set(<span class="string">&quot;SHOP_STATUS&quot;</span>,status);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取店铺的营业状态</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取到店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span>?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>在controller下创建user包，然后把amin的ShopController复制到这个下面，然后进行简单修改，只保留获取状态的。因为有2个类类名相同，会导致Bean冲突，所以我们要在@RestController中指定Bean的名称。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;userShopController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/shop&quot;)</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;店铺相关接口&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShopController</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY=<span class="string">&quot;SHOP_STATUS&quot;</span>;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">//获取店铺的营业状态</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/status&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;获取店铺的营业状态&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;Integer&gt; <span class="title function_">getStatus</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">status</span> <span class="operator">=</span> (Integer) redisTemplate.opsForValue().get(KEY);</span><br><span class="line">        log.info(<span class="string">&quot;获取到店铺的营业状态为：&#123;&#125;&quot;</span>,status==<span class="number">1</span>?<span class="string">&quot;营业中&quot;</span>:<span class="string">&quot;打烊中&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.success(status);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四-客户端"><a href="#四-客户端" class="headerlink" title="四 客户端"></a>四 客户端</h2><h3 id="1-HttpClient"><a href="#1-HttpClient" class="headerlink" title="1 HttpClient"></a>1 HttpClient</h3><h4 id="1-1-HttpClient-介绍"><a href="#1-1-HttpClient-介绍" class="headerlink" title="1.1 (HttpClient)介绍"></a>1.1 (HttpClient)介绍</h4><p>介绍：在Java中通过编码的方式发送HTTP请求。</p><p>HttpClient 是Apache Jakarta Common 下的子项目，可以用来提供高效的、最新的、功能丰富的支持 HTTP 协议的客户端编程工具包，并且它支持 HTTP 协议最新的版本和建议。</p><p>maven坐标：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.httpcomponents<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>httpclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.5.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="1-2-HttpClient-发GET请求"><a href="#1-2-HttpClient-发GET请求" class="headerlink" title="1.2 (HttpClient)发GET请求"></a>1.2 (HttpClient)发GET请求</h4><p>要保证当前项目已经提前启动好了。</p><p>在key-server&#x2F;src&#x2F;test&#x2F;java&#x2F;com&#x2F;sky&#x2F;test下面创建HttpClientTest类然后写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HttpClientTest</span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGET</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//创建httpclient对象</span></span><br><span class="line">        <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">        <span class="comment">//创建请求对象</span></span><br><span class="line">        <span class="type">HttpGet</span> <span class="variable">httpGet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpGet</span>(<span class="string">&quot;http://localhost:8080/user/shop/status&quot;</span>);</span><br><span class="line">        <span class="comment">//发送请求</span></span><br><span class="line">        <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpGet);</span><br><span class="line">        <span class="comment">//获取服务端返回的状态码</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的状态码为：&quot;</span>+statusCode);</span><br><span class="line">        <span class="comment">//获取服务端返回的数据</span></span><br><span class="line">        <span class="type">HttpEntity</span> <span class="variable">entity</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity);</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端返回的数据为：&quot;</span>+body);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        response.close();</span><br><span class="line">        httpClient.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-3-HttpClient-发POST请求"><a href="#1-3-HttpClient-发POST请求" class="headerlink" title="1.3 (HttpClient)发POST请求"></a>1.3 (HttpClient)发POST请求</h4><p>要保证当前项目已经提前启动好了。POST需要提前传入参数。</p><p>在上一节的HttpClientTest类中写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testPOST</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">    <span class="comment">//创建httpclient对象</span></span><br><span class="line">    <span class="type">CloseableHttpClient</span> <span class="variable">httpClient</span> <span class="operator">=</span> HttpClients.createDefault();</span><br><span class="line">    <span class="comment">//创建请求对象</span></span><br><span class="line">    <span class="type">HttpPost</span> <span class="variable">httpPost</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpPost</span>(<span class="string">&quot;http://localhost:8080/admin/employee/login&quot;</span>);</span><br><span class="line"> </span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    jsonObject.put(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">    jsonObject.put(<span class="string">&quot;password&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">    <span class="type">StringEntity</span> <span class="variable">entity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringEntity</span>(jsonObject.toString());</span><br><span class="line">    <span class="comment">//指定请求编码方式</span></span><br><span class="line">    entity.setContentEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    <span class="comment">//数据格式</span></span><br><span class="line">    entity.setContentType(<span class="string">&quot;application/json&quot;</span>);</span><br><span class="line">    httpPost.setEntity(entity);</span><br><span class="line">    <span class="comment">//发送请求</span></span><br><span class="line">    <span class="type">CloseableHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> httpClient.execute(httpPost);</span><br><span class="line">    <span class="type">int</span> <span class="variable">statusCode</span> <span class="operator">=</span> response.getStatusLine().getStatusCode();</span><br><span class="line">    System.out.println(<span class="string">&quot;响应码为：&quot;</span>+statusCode);</span><br><span class="line">    <span class="type">HttpEntity</span> <span class="variable">entity1</span> <span class="operator">=</span> response.getEntity();</span><br><span class="line">    <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> EntityUtils.toString(entity1);</span><br><span class="line">    System.out.println(<span class="string">&quot;响应数据为：&quot;</span>+body);</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    response.close();</span><br><span class="line">    httpClient.close();</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>与Get不同的是，这里添加了登录的参数以及请求编码的方式和数据的格式，其它的基本都是相同的。</p><p>这个其实是调用了登录的API，最后会返回一个Token。</p><h3 id="2-缓存商品和购物车"><a href="#2-缓存商品和购物车" class="headerlink" title="2 缓存商品和购物车"></a>2 缓存商品和购物车</h3><h4 id="2-1-本章内容介绍"><a href="#2-1-本章内容介绍" class="headerlink" title="2.1 本章内容介绍"></a>2.1 本章内容介绍</h4><p>菜品和套餐存储在数据库中，如果短期内有大量的人查询会导致数据库压力过大，用户体验不佳。现在把商品数据缓存到Redis中。</p><p>加入购物车，查看购物车，可以看到购物车中的商品，可以清空购物车，还可以添加商品到购物车。</p><p>缓存菜品 -&gt; 缓存套餐 -&gt; 添加购物车 -&gt; 查看购物车 -&gt; 清空购物车，从购物车中减去某个商品。</p><h4 id="2-2-缓存菜品-设计分析"><a href="#2-2-缓存菜品-设计分析" class="headerlink" title="2.2 (缓存菜品)设计分析"></a>2.2 (缓存菜品)设计分析</h4><p>问题说明：小程序菜品数据是通过数据库获得，如果用户端访问量过大，数据库的压力会增加。</p><p>实现思路：通过Redis来缓存菜品数据，减少数据库查询操作。内存操作的性能比磁盘IO性能更高。</p><p>每个分类下的菜品保存一份缓存数据。</p><p>数据库中菜品数据有变更时要清理缓存数据。</p><h4 id="2-3-缓存菜品-代码开发"><a href="#2-3-缓存菜品-代码开发" class="headerlink" title="2.3 (缓存菜品)代码开发"></a>2.3 (缓存菜品)代码开发</h4><p>在sky-server下的controller&#x2F;user下的DishController类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController(&quot;userDishController&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/dish&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags = &quot;C端-菜品浏览接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DishController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishService dishService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line">    <span class="comment">// 根据分类id查询菜品</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;根据分类id查询菜品&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;List&lt;DishVO&gt;&gt; <span class="title function_">list</span><span class="params">(Long categoryId)</span> &#123;</span><br><span class="line">        <span class="comment">//构造redis中的key，规则：dish_分类id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + categoryId;</span><br><span class="line">        <span class="comment">//查询redis中是否存在菜品数据</span></span><br><span class="line">        List&lt;DishVO&gt; list = (List&lt;DishVO&gt;)redisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>)&#123;<span class="comment">//如果存在，直接返回，无须查询数据库</span></span><br><span class="line">            <span class="keyword">return</span> Result.success(list);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dish</span>();</span><br><span class="line">        dish.setCategoryId(categoryId);</span><br><span class="line">        dish.setStatus(StatusConstant.ENABLE);<span class="comment">//查询起售中的菜品</span></span><br><span class="line">        <span class="comment">//如果不存在，查询数据库，将查询到的数据放入redis中</span></span><br><span class="line">        list = dishService.listWithFlavor(dish);</span><br><span class="line">        redisTemplate.opsForValue().set(key,list);</span><br><span class="line">        <span class="keyword">return</span> Result.success(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在小程序助手中编译，然后在不同的菜类间切换（比如蜀味烤鱼和蜀味牛蛙），效果是第一次IDEA的控制台会输出SQL语句，然后去看Redis会发现已经有了缓存。然后继续在前面已缓存的菜类间切换，会发现控制台不再输出SQL语句，说明走的是Redis缓存。</p><h4 id="2-4-缓存菜品-清理缓存"><a href="#2-4-缓存菜品-清理缓存" class="headerlink" title="2.4 (缓存菜品)清理缓存"></a>2.4 (缓存菜品)清理缓存</h4><p>不清理可能出现的问题：比如菜品的价格如果被修改，如果继续从Redis从取数据，会导致数据的不一致。</p><p>新增菜品、修改菜品、批量删除菜品、起售和停售菜品的时候需要清理缓存。</p><p>所以需要在controller下的admin中的DishController中修改代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理缓存数据</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">cleanCache</span><span class="params">(String pattern)</span>&#123;</span><br><span class="line">    <span class="type">Set</span> <span class="variable">keys</span> <span class="operator">=</span> redisTemplate.keys(pattern);</span><br><span class="line">    redisTemplate.delete(keys);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在update、delete方法中调用完service的方法后：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">cleanCache(<span class="string">&quot;dish_*&quot;</span>);</span><br></pre></td></tr></table></figure><p>在save方法中调用service的方法后：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> <span class="string">&quot;dish_&quot;</span> + dishDTO.getCategoryId();</span><br><span class="line">cleanCache(key);<span class="comment">//清理缓存数据</span></span><br></pre></td></tr></table></figure><h4 id="2-5-缓存菜品-功能测试"><a href="#2-5-缓存菜品-功能测试" class="headerlink" title="2.5 (缓存菜品)功能测试"></a>2.5 (缓存菜品)功能测试</h4><p>首先把所有的菜类都缓存到Redis中（在小程序助手里把所有菜类都点一遍），然后在电脑管理端的前端平台修改某一道菜，然后再看Redis的可视化面板，看看是不是所有的Redis都被清空。</p><h4 id="2-6-SpringCache介绍"><a href="#2-6-SpringCache介绍" class="headerlink" title="2.6 SpringCache介绍"></a>2.6 SpringCache介绍</h4><p>SpringCache是Spring提供的缓存框架。提供了基于注解的缓存功能。</p><p>SpringCache提供了一层抽象，底层可以切换不同的缓存实现（只需要导入不同的Jar包即可），如EHCache，Caffeine，Redis。</p><table><thead><tr><th><strong>注解</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>@EnableCaching</td><td>开启缓存注解功能，通常加在启动类上</td></tr><tr><td>@Cacheable</td><td>在方法执行前先查询缓存中是否有数据，如果有数据，则直接返回缓存数据；如果没有缓存数据，调用方法并将方法返回值放到缓存中</td></tr><tr><td>@CachePut</td><td>将方法的返回值放到缓存中</td></tr><tr><td>@CacheEvict</td><td>将一条或多条数据从缓存中删除</td></tr></tbody></table><h4 id="2-7-SpringCache"><a href="#2-7-SpringCache" class="headerlink" title="2.7 SpringCache"></a>2.7 SpringCache</h4><p>依赖导入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-8-SpringCache入门"><a href="#2-8-SpringCache入门" class="headerlink" title="2.8 SpringCache入门"></a>2.8 SpringCache入门</h4><p>在启动类上加@EnableCaching</p><p>在controller层的UserController下的save方法上写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="meta">@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#user.id&quot;)</span> <span class="comment">//如果使用spring Cache缓存数据，key的生成：userCache::1。user是从参数取到的。</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#result.id&quot;) //result是从返回值return取到的</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#p0.id&quot;)</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#a0.id&quot;)</span></span><br><span class="line"><span class="comment">//@CachePut(cacheNames=&quot;userCache&quot;,key=&quot;#root.args[0].id&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    userMapper.insert(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意key&#x3D;”#result.id”中的result取的是返回值返回的那个结果。 key&#x3D;”#user.id”的user取的是传入的参数。p0，a0，root.args[0]表示取的都是第1个参数。</p><p>在controller层的UserController下的getById方法上写入如下的代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;userCache&quot;,key=&quot;#id&quot;)</span></span><br></pre></td></tr></table></figure><p>然后在方法体的第1行打上断点，点击小虫，然后到localhost:8888&#x2F;doc.html中对get方法进行测试，发送1，效果是：直接从Redis中返回数据，压根不会触发断点。</p><p>现在手动删除id为1的数据，然后重新在doc.html中发送数据，然后会执行断点，放心后控制台输出SQL语句，然后Redis缓存中也有数据。</p><p>在controller层的UserController下的deleteById和deleteAll方法上加入如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;userCache&quot;,key=&quot;#id&quot;)</span> <span class="comment">//key的形式 userCache::10</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span>&#123;userMapper.deleteById(id);&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/delAll&quot;)</span></span><br><span class="line"><span class="meta">@CacheEvict(cacheNames=&quot;userCache&quot;,allEntries = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteAll</span><span class="params">()</span>&#123;</span><br><span class="line">    userMapper.deleteAll();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试的话可以在两个方法内的第1行打上断点，点击小虫，然后到localhost:8888&#x2F;doc.html中对delete和deleteAll方法进行测试，先通过getById方法增加几个数据，然后再逐一删除。</p><p>可以这么理解cacheNames里的参数就是指定key的名字，只会删除相应的key。</p><h4 id="2-9-缓存套餐-代码开发"><a href="#2-9-缓存套餐-代码开发" class="headerlink" title="2.9 (缓存套餐)代码开发"></a>2.9 (缓存套餐)代码开发</h4><p>首先要在sky-server包下导入下面两个坐标：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-cache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后要在sky-server包下的启动类SkyApplication类上加如下注解：</p><p><code>@EnableCaching</code></p><p>首先是在controller&#x2F;user包下的SetmealController类中的list方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Cacheable(cacheNames=&quot;setmealCache&quot;,key=&quot;#categoryId&quot;)</span> <span class="comment">//key: setmealCache::100</span></span><br></pre></td></tr></table></figure><p>然后是在controller&#x2F;admin包下的SetmealController类中的save方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(cacheNames=&quot;setmealCache&quot;,key=&quot;#setmealDTO.categoryId&quot;)</span></span><br></pre></td></tr></table></figure><p>最后是在controller&#x2F;admin包下的SetmealController类中的update、delete、startOrStop方法上加如下注解：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CacheEvict(cacheNames = &quot;setmealCache&quot;,allEntries = true)</span></span><br></pre></td></tr></table></figure><h4 id="2-10-添购物车"><a href="#2-10-添购物车" class="headerlink" title="2.10 (添购物车)"></a>2.10 (添购物车)</h4><p>在sky-server的controller的user中创建一个名为ShoppingCartController类，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/shoppingCart&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Api(tags=&quot;C端购物车相关接口&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartService shoppingCartService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/add&quot;)</span></span><br><span class="line">    <span class="meta">@ApiOperation(&quot;添加购物车&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> ShoppingCartDTO shoppingCartDTO)</span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;添加购物车，商品信息为：&#123;&#125;&quot;</span>,shoppingCartDTO);</span><br><span class="line">        shoppingCartService.addShoppingCart(shoppingCartDTO);</span><br><span class="line">        <span class="keyword">return</span> Result.success();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在sky-server的service下创建ShoppingCartService类，写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="comment">//添加购物车</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在sky-server的service的Impl下创建ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完善sky-server的service的Impl下的ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);</span><br><span class="line">        <span class="comment">//userid暂时还不知道，从ThreadLocal取</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);</span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            cart.setNumber(cart.getNumber()+<span class="number">1</span>);</span><br><span class="line">            shoppingCartMapper.updateNumberById(cart);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper下的ShoppingCartMapper类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ShoppingCartMapper</span> &#123;</span><br><span class="line">    List&lt;ShoppingCart&gt; <span class="title function_">list</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br><span class="line">    <span class="comment">//根据id修改商品数量</span></span><br><span class="line">    <span class="meta">@Update(&quot;update shopping_cart set number = #&#123;number&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateNumberById</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的resources下的mapper下的ShoppingCartMapper.xml类中写入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span><br><span class="line">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span><br><span class="line">&lt;mapper namespace=<span class="string">&quot;com.sky.mapper.ShoppingCartMapper&quot;</span>&gt;</span><br><span class="line"> </span><br><span class="line">    &lt;select id=<span class="string">&quot;list&quot;</span> resultType=<span class="string">&quot;com.sky.entity.ShoppingCart&quot;</span>&gt;</span><br><span class="line">        select * from shopping_cart</span><br><span class="line">        &lt;where&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;userId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">user_id</span> <span class="operator">=</span> #&#123;userId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;setmealId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">setmeal_id</span> <span class="operator">=</span> #&#123;setmealId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;dishId != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">dish_id</span> <span class="operator">=</span> #&#123;dishId&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">            &lt;<span class="keyword">if</span> test=<span class="string">&quot;dishFlavor != null&quot;</span>&gt;</span><br><span class="line">                <span class="type">and</span> <span class="variable">dish_flavor</span> <span class="operator">=</span> #&#123;dishFlavor&#125;</span><br><span class="line">            &lt;/<span class="keyword">if</span>&gt;</span><br><span class="line">        &lt;/where&gt;</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"> </span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>完善sky-server的service的Impl下的ShoppingCartServiceImpl类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ShoppingCartServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ShoppingCartService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShoppingCartMapper shoppingCartMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> DishMapper dishMapper;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SetmealMapper setmealMapper;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addShoppingCart</span><span class="params">(ShoppingCartDTO shoppingCartDTO)</span> &#123;</span><br><span class="line">        <span class="comment">//判断当前加入购物车中的商品是否已经存在了</span></span><br><span class="line">        <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ShoppingCart</span>();</span><br><span class="line">        BeanUtils.copyProperties(shoppingCartDTO,shoppingCart);</span><br><span class="line">        <span class="comment">//userid暂时还不知道，从ThreadLocal取</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">        shoppingCart.setUserId(userId);</span><br><span class="line">        List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);</span><br><span class="line">        <span class="comment">//如果已经存在，只需要数量+1</span></span><br><span class="line">        <span class="keyword">if</span>(list != <span class="literal">null</span> &amp;&amp; list.size()&gt;<span class="number">0</span>) &#123;</span><br><span class="line">            <span class="type">ShoppingCart</span> <span class="variable">cart</span> <span class="operator">=</span> list.get(<span class="number">0</span>);</span><br><span class="line">            cart.setNumber(cart.getNumber()+<span class="number">1</span>);</span><br><span class="line">            shoppingCartMapper.updateNumberById(cart);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;<span class="comment">//如果不存在，则需要插入一条购物车数据</span></span><br><span class="line">            <span class="comment">//判断本次添加到购物车的是菜品还是套餐,因为要查询不同表</span></span><br><span class="line">            <span class="type">Long</span> <span class="variable">dishId</span> <span class="operator">=</span> shoppingCartDTO.getDishId();</span><br><span class="line">            <span class="keyword">if</span>(dishId!=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="comment">//本次添加到购物车的是菜品</span></span><br><span class="line">                <span class="type">Dish</span> <span class="variable">dish</span> <span class="operator">=</span> dishMapper.getById(dishId);</span><br><span class="line">                shoppingCart.setName(dish.getName());</span><br><span class="line">                shoppingCart.setImage(dish.getImage());</span><br><span class="line">                shoppingCart.setAmount(dish.getPrice());</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//本次添加到购物车的是套餐</span></span><br><span class="line">                <span class="type">Long</span> <span class="variable">setmealId</span> <span class="operator">=</span> shoppingCartDTO.getSetmealId();</span><br><span class="line">                <span class="type">Setmeal</span> <span class="variable">setmeal</span> <span class="operator">=</span> setmealMapper.getById(setmealId);</span><br><span class="line">                shoppingCart.setName(setmeal.getName());</span><br><span class="line">                shoppingCart.setImage(setmeal.getImage());</span><br><span class="line">                shoppingCart.setAmount(setmeal.getPrice());</span><br><span class="line">            &#125;</span><br><span class="line">            shoppingCart.setNumber(<span class="number">1</span>);</span><br><span class="line">            shoppingCart.setCreateTime(LocalDateTime.now());</span><br><span class="line">            shoppingCartMapper.insert(shoppingCart);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在shoppingCartMapper中添加insert方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Insert(&quot;insert into shopping_cart(name,user_id,dish_id,setmeal_id,dish_flavor,number,amount,image,create_time)&quot; +</span></span><br><span class="line"><span class="meta">    &quot;value (#&#123;name&#125;,#&#123;userId&#125;,#&#123;dishId&#125;,#&#123;setmealId&#125;,#&#123;dishFlavor&#125;,#&#123;number&#125;,#&#123;amount&#125;,#&#123;image&#125;,#&#123;createTime&#125;)&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(ShoppingCart shoppingCart)</span>;</span><br></pre></td></tr></table></figure><h4 id="2-11-查看购物车"><a href="#2-11-查看购物车" class="headerlink" title="2.11 查看购物车"></a>2.11 查看购物车</h4><p>在sky-server的controller下的ShoppingCartController类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;查看购物车&quot;)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result&lt;List&lt;ShoppingCart&gt;&gt; <span class="title function_">list</span><span class="params">()</span>&#123;</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartService.showShoppingCart();</span><br><span class="line">    <span class="keyword">return</span> Result.success(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下的ShoppingCartService类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;ShoppingCart&gt; <span class="title function_">showShoppingCart</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl下的ShoppingCartServiceImpl类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> List&lt;ShoppingCart&gt; <span class="title function_">showShoppingCart</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    <span class="type">ShoppingCart</span> <span class="variable">shoppingCart</span> <span class="operator">=</span> ShoppingCart.builder()</span><br><span class="line">                    .userId(userId)</span><br><span class="line">                    .build();</span><br><span class="line">    List&lt;ShoppingCart&gt; list = shoppingCartMapper.list(shoppingCart);<span class="comment">//只需要传userid即可</span></span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-12-清空购物车"><a href="#2-12-清空购物车" class="headerlink" title="2.12 清空购物车"></a>2.12 清空购物车</h4><p>在sky-server的controller下的ShoppingCartController类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ApiOperation(&quot;清空购物车&quot;)</span></span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/clean&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">clean</span><span class="params">()</span>&#123;</span><br><span class="line">    shoppingCartService.clean();</span><br><span class="line">    <span class="keyword">return</span> Result.success();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的service下的ShoppingCartService类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空购物车</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>在sky-server的service的Impl下的ShoppingCartServiceImpl类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清空购物车</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> BaseContext.getCurrentId();</span><br><span class="line">    shoppingCartMapper.deleteByUserId(userId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在sky-server的mapper的ShoppingCartMapper类中加入如下代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Delete(&quot;delete from shopping_cart where user_id=#&#123;userId&#125;&quot;)</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByUserId</span><span class="params">(Long userId)</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>软件开发整体介绍</title>
      <link href="/2024/08/03/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/"/>
      <url>/2024/08/03/%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91%E6%95%B4%E4%BD%93%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="1-软件开发流程"><a href="#1-软件开发流程" class="headerlink" title="1.软件开发流程"></a>1.软件开发流程</h2><img src="1.png" style="zoom: 33%;"><h2 id="2-角色分工"><a href="#2-角色分工" class="headerlink" title="2.角色分工"></a>2.角色分工</h2><img src="2.png" style="zoom:50%;"><h2 id="3-软件环境"><a href="#3-软件环境" class="headerlink" title="3.软件环境"></a>3.软件环境</h2><p><img src="3.png"></p>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>springboot学习</title>
      <link href="/2024/07/06/springboot%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/07/06/springboot%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>1 springboot基本介绍</p><h2 id="1-1-SpringBoot是什么"><a href="#1-1-SpringBoot是什么" class="headerlink" title="1.1 SpringBoot是什么"></a>1.1 SpringBoot是什么</h2><p><strong>两句话：</strong></p><ul><li>​<strong>Spring Boot 可以轻松创建独立的、生产级的基于Spring 的应用程序</strong></li><li>​    <strong>Spring Boot 直接嵌入 Tomcat、Jetty 或 Undertow ，可以”直接运行” SpringBoot 应用程序</strong></li></ul><h2 id="1-2-SpringBoot快速入门"><a href="#1-2-SpringBoot快速入门" class="headerlink" title="1.2 SpringBoot快速入门"></a>1.2 SpringBoot快速入门</h2><p>构建一个 SpringBoot 项目，浏览器发送&#x2F;hello 请求 <code>http://localhost:8080/hello</code>，响应Hello:</p><p>这里目前学的的版本是SpringBoot2.7，maven3.6.3，jdk8</p><img src="1.jpg" style="zoom:50%;"><img src="2.jpg" style="zoom: 50%;"><p>创建好之后在pom文件中引入SpringBoot相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wzb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入springboot父工程--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入web项目场景启动器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在com.wzb.springboot包中创建启动类Main,需要注解<code>@SpringBootApplication</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.springboot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">// 启动SpringBoot项目</span></span><br><span class="line">        SpringApplication.run(Main.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后创建controller包，创建包下HelloController类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动项目后，默认端口是8080，访问<code>http://localhost:8080/hello</code>，可以发现 <code>hello</code> 字符串输出在了浏览器页面。</p><h3 id="1-2-1-小结"><a href="#1-2-1-小结" class="headerlink" title="1.2.1 小结"></a>1.2.1 小结</h3><ol><li>SpringBoot 比较传统的 SSM 开发， 简化整合步骤, 提高开发效率</li><li>简化了 Maven 项目的 pom.xml 依赖导入, 可以说是一键导入，如图</li></ol><img src="3.jpg" style="zoom: 33%;"><p>​3.内置 Tomcat , 简化服务器的配置</p><h2 id="1-3-SpringBoot与SpringMVC关系"><a href="#1-3-SpringBoot与SpringMVC关系" class="headerlink" title="1.3 SpringBoot与SpringMVC关系"></a>1.3 SpringBoot与SpringMVC关系</h2><h3 id="1-3-1-梳理关系"><a href="#1-3-1-梳理关系" class="headerlink" title="1.3.1 梳理关系"></a>1.3.1 梳理关系</h3><ul><li>他们的关系大概是: Spring Boot &gt; Spring &gt; Spring MVC</li><li>Spring MVC 只是 Spring 处理 WEB 层请求的一个模块&#x2F;组件, Spring MVC 的基石是Servlet</li><li>Spring 的核心是 IOC 和 AOP, IOC 提供了依赖注入的容器, AOP 解决了面向切面编程</li><li>Spring Boot 是为了简化开发, 推出的封神框架(约定优于配置[COC]，简化了Spring项目的配置流程), SpringBoot 包含很多组件&#x2F;框架，Spring就是最核心的内容之一，也包含SpringMVC</li><li>Spring 家族，有众多衍生框架和组件例如 boot、security、jpa 等, 他们的基础都是Spring</li></ul><h3 id="1-3-2-如何理解-约定优于配置"><a href="#1-3-2-如何理解-约定优于配置" class="headerlink" title="1.3.2 如何理解 -约定优于配置"></a>1.3.2 如何理解 -约定优于配置</h3><ol><li>约定优于配置(Convention over Configuration&#x2F;COC)，又称按约定编程，是一种软件设计规范, 本质上是对系统、类库或框架中一些东西假定一个大众化合理的默认值(缺省值)</li><li>例如在模型中存在一个名为 User 的类，那么对应到数据库会存在一个名为user 的表，只有在偏离这个约定时才需要做相关的配置 (例如你想将表名命名为t_user 等非user 时才需要写关于这个名字的配置)</li><li>简单来说就是假如你所期待的配置与约定的配置一致，那么就可以不做任何配置，约定不符合期待时, 才需要对约定进行替换配置</li><li>约定其实就是一种规范，遵循了规范，那么就存在通用性，存在通用性，那么事情就会变得相对简单，程序员之间的沟通成本会降低，工作效率会提升，合作也会变得更加简单</li></ol><h1 id="2-依赖管理和自动配置"><a href="#2-依赖管理和自动配置" class="headerlink" title="2 依赖管理和自动配置"></a>2 依赖管理和自动配置</h1><h2 id="2-1-依赖管理"><a href="#2-1-依赖管理" class="headerlink" title="2.1 依赖管理"></a>2.1 依赖管理</h2><h3 id="2-1-1-什么是依赖管理"><a href="#2-1-1-什么是依赖管理" class="headerlink" title="2.1.1 什么是依赖管理"></a>2.1.1 什么是依赖管理</h3><p>spring-boot-starter-parent 还有父项目, 声明了开发中常用的依赖的版本号，并且进行 自动版本仲裁 , 即如果程序员没有指定某个依赖jar 的版本，则以父项目指定的版本为准</p><p><img src="4.jpg"></p><img src="5.jpg" style="zoom:50%;"><h3 id="2-1-2-修改自动仲裁-默认版本号"><a href="#2-1-2-修改自动仲裁-默认版本号" class="headerlink" title="2.1.2 修改自动仲裁&#x2F;默认版本号"></a>2.1.2 修改自动仲裁&#x2F;默认版本号</h3><p>需求说明: 将 SpringBoot mysql 驱动修改成 5.1.49</p><p><img src="6.jpg"></p><p>查看 spring-boot-dependencies.pom 里面规定当前依赖的版本对应的key , 这里是mysql.version</p><p><img src="7.jpg"></p><p>修改 springboot2\quickstart\pom.xml 重写配置, 当更新Maven 时，就依赖到新的mysql 驱动.</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 导入 web 项目场景启动器,会自动导入和 web 开发相关依赖,非常方便--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 根据依赖就近优先原则，以自己指定的为准 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-2-starter-场景启动器"><a href="#2-2-starter-场景启动器" class="headerlink" title="2.2 starter 场景启动器"></a>2.2 starter 场景启动器</h2><h3 id="2-2-1-starter场景启动器基本介绍"><a href="#2-2-1-starter场景启动器基本介绍" class="headerlink" title="2.2.1 starter场景启动器基本介绍"></a>2.2.1 starter<strong>场景启动器基本介绍</strong></h3><p>1.<strong>开发中我们引入了相关场景的</strong>starter**，这个场景中所有的相关依赖都引入进来了，比如我们做<strong>web</strong>开发引入了，该<strong>starter</strong>将导入与<strong>web</strong>开发相关的所有包**</p><p>2.<strong>依赖树:可以看到spring-boot-starter-web，帮我们引入了spring-webmvc，spring-web开发模块，还引入了spring-boot-starter-tomcat场景，spring-boot-starter-json场景，这些场景下面又引入了一大堆相关的包，这些依赖项可以快速启动和运行一个项目，提高开发效率.</strong></p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C8.jpg"></p><p><strong>3.所有场景启动器最基本的依赖就是spring-boot-starter</strong></p><h3 id="2-2-2-官方提供的starter"><a href="#2-2-2-官方提供的starter" class="headerlink" title="2.2.2 官方提供的starter"></a>2.2.2 <strong>官方提供的</strong>starter</h3><p>1.<strong>在开发中我们经常会用到</strong>spring-boot-starter-xxx**，比如<strong>spring-boot-starter-web</strong>，该场景是用作<strong>web</strong>开发，也就是说<strong>xxx</strong>是某种开发场景。**</p><p>2.我们只要引入starter，这个场景的所有常规需要的依赖我们都自动引入。</p><h3 id="2-2-3-第三方starter"><a href="#2-2-3-第三方starter" class="headerlink" title="2.2.3 第三方starter"></a>2.2.3 <strong>第三方</strong>starter</h3><p>1.SpringBoot<strong>也支持第三方</strong>starter</p><p>2.第三方starter不要从spring-boot开始，因为这是官方spring-boot保留的命名方式的。第三方启动程序通常以项目名称开头。例如，名为thirdpartyproject的第三方启动程序项目通常被命名为thirdpartyproject-spring-boot-starter。</p><p>3.也就是说：xxx-spring-boot-starter是第三方为我们提供的简化开发的场景启动器</p><h2 id="2-3-自动配置"><a href="#2-3-自动配置" class="headerlink" title="2.3 自动配置"></a><strong>2.3</strong> 自动配置</h2><h3 id="2-3-1-自动配置功能"><a href="#2-3-1-自动配置功能" class="headerlink" title="2.3.1 自动配置功能"></a>2.3.1 自动配置功能</h3><p>1.SpringBoot<strong>自动配置</strong>Tomcat、SpringMVC、Web常用功能:比如字符过滤器等等</p><p>2.默认主程序所在的包及其子包下会被扫描</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C9.jpg"></p><h3 id="2-3-2-如何修改默认扫描包结构"><a href="#2-3-2-如何修改默认扫描包结构" class="headerlink" title="2.3.2 如何修改默认扫描包结构"></a>2.3.2 <strong>如何修改默认扫描包结构</strong></h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span>.com.wzb;</span><br><span class="line">importorg.springframework.stereotype.Controller; </span><br><span class="line">importorg.springframework.web.bind.annotation.RequestMapping; importorg.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*<span class="doctag">@author</span> wzb</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HiController</span>&#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hi&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hi</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span><span class="string">&quot;hi~,spring boot&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改MainApp.java,增加扫描的包,并完成测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//直接在SpringBootApplication注解后指定</span></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages=&quot;com.wzb&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span>&#123;<span class="comment">//.....</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-3-3-resources-application-properties-配置"><a href="#2-3-3-resources-application-properties-配置" class="headerlink" title="2.3.3 resources\application.properties 配置"></a>2.3.3 resources\application.properties 配置</h3><p>- SpringBoot 项目最重要也是最核心的配置文件就是 application.properties，所有的框架配置都可以在这个配置文件中说明</p><p>● 各 种 配 置 都 有 默 认 , 可 以 在 resources\application.properties 修改, application.properties 文件我们可以手动创建</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#默认 server.port=8080</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment">#比如: 默认 spring.servlet.multipart.max-file-size=1MB</span></span><br><span class="line"><span class="comment">#该属性可以指定 springboot 上传文件大小的限制</span></span><br><span class="line"><span class="comment">#默认配置最终都是映射到某个类上,比如这里配置会映射到 MultipartProperties</span></span><br><span class="line"><span class="comment">#把光标放在该属性，ctrl+b 就可以定位该配置映射到的类</span></span><br><span class="line"><span class="attr">spring.servlet.multipart.max-file-size</span>=<span class="string">10MB</span></span><br></pre></td></tr></table></figure><p>常用配置</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#端口号</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">10000</span></span><br><span class="line"><span class="comment">#应用的上下文路径(项目路径)</span></span><br><span class="line"><span class="attr">server.servlet.context-path</span>=<span class="string">/allModel</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis.type-aliases-package</span>=<span class="string">com.cxs.allmodel.model</span></span><br><span class="line"><span class="comment">#指定 mapper.xml 的路径</span></span><br><span class="line"><span class="comment">#(application 上配置了@MapperScan(扫面 mapper 类的路径)和 pom.xml 中放行了mapper.xml 后，# 配 置 mapper-locations 没 有 意 义 。 如 果 mapper 类 和 mapper.xml 不 在 同 一个路径下时，mapper-locations 就有用了)</span></span><br><span class="line"><span class="attr">mybatis.mapper-locations</span>=<span class="string">classpath:com/cxs/allmodel/mapper</span></span><br><span class="line"><span class="comment">#session 失效时间(单位 s)</span></span><br><span class="line"><span class="attr">spring.session.timeout</span>=<span class="string">18000</span></span><br><span class="line"><span class="comment">#数据库连接配置</span></span><br><span class="line"><span class="comment">#mysql 数据库 url</span></span><br><span class="line"><span class="attr">mysql.one.jdbc-url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/test?serverTimezone=Asia/Shanghai&amp;useSSL=false</span></span><br><span class="line"><span class="comment">#mysql 数据库用户名</span></span><br><span class="line"><span class="attr">mysql.one.username</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#数据库密码</span></span><br><span class="line"><span class="attr">mysql.one.password</span>=<span class="string"></span></span><br><span class="line"></span><br><span class="line"><span class="attr">mysql.one.maximum-pool-size</span>=<span class="string">15</span></span><br><span class="line"><span class="comment">#日志打印:日志级别 trace&lt;debug&lt;info&lt;warn&lt;error&lt;fatal 默认级别为 info，即默认打印info 及其以上级别的日志</span></span><br><span class="line"><span class="comment">#logging.level 设置日志级别，后面跟生效的区域，比如 root 表示整个项目，也可以设置为某个包下，也可以具体到某个类名（日志级别的值不区分大小写）</span></span><br><span class="line"><span class="attr">logging.level.com.cxs.allmodel.</span>=<span class="string">debug</span></span><br><span class="line"><span class="attr">logging.level.com.cxs.allmodel.mapper</span>=<span class="string">debug</span></span><br><span class="line"><span class="attr">logging.level.org.springframework.web</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.org.springframework.transaction</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.org.apache.ibatis</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.org.mybatis</span>=<span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.com.github.pagehelper</span> = <span class="string">info</span></span><br><span class="line"><span class="attr">logging.level.root</span>=<span class="string">info</span></span><br><span class="line"><span class="comment">#日志输出路径</span></span><br><span class="line"><span class="attr">logging.file</span>=<span class="string">/tmp/api/allmodel.log</span></span><br><span class="line"><span class="comment">#配置 pagehelper 分页插件</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pagehelper.reasonable</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">pagehelper.supportMethodsArguments</span>=<span class="string">true</span></span><br><span class="line"><span class="attr">pagehelper.params</span>=<span class="string">count=countSql</span></span><br><span class="line"><span class="comment">#jackson 时间格式化</span></span><br><span class="line"><span class="attr">spring.jackson.serialization.fail-on-empty-beans</span>=<span class="string">false</span></span><br><span class="line"><span class="comment">#指定日期格式，比如 yyyy-MM-dd HH:mm:ss，或者具体的格式化类的全限定名</span></span><br><span class="line"><span class="attr">spring.jackson.date-format</span>=<span class="string">yyyy-MM-dd HH:mm:ss</span></span><br><span class="line"><span class="comment">#指定日期格式化时区，比如 America/Los_Angeles 或者 GMT+10</span></span><br><span class="line"><span class="attr">spring.jackson.time-zone</span>=<span class="string">GMT+8</span></span><br><span class="line"><span class="comment">#设置统一字符集</span></span><br><span class="line"><span class="attr">spring.http.encoding.charset</span>=<span class="string">utf8</span></span><br><span class="line"><span class="comment">#redis 连接配置</span></span><br><span class="line"><span class="comment"># redis 所在主机 ip 地址</span></span><br><span class="line"><span class="attr">spring.redis.host</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#redis 服务器密码</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#redis 服务器端口号</span></span><br><span class="line"><span class="attr">spring.redis.port</span>=<span class="string"></span></span><br><span class="line"><span class="comment">#redis 数据库的索引编号(0 到 15)</span></span><br><span class="line"><span class="attr">spring.redis.database</span>=<span class="string">14</span></span><br><span class="line"><span class="comment">## 连接池的最大活动连接数量，使用负值无限制</span></span><br><span class="line"><span class="comment">#spring.redis.pool.max-active=8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 连接池的最大空闲连接数量，使用负值表示无限数量的空闲连接</span></span><br><span class="line"><span class="comment">#spring.redis.pool.max-idle=8</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 连接池最大阻塞等待时间，使用负值表示没有限制</span></span><br><span class="line"><span class="comment">#spring.redis.pool.max-wait=-1ms</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 最小空闲连接数量，使用正值才有效果</span></span><br><span class="line"><span class="comment">#spring.redis.pool.min-idle=0</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">## 是否启用 SSL 连接. ##spring.redis.ssl=false</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 连接超时，毫秒为单位</span></span><br><span class="line"><span class="comment">#spring.redis.timeout= 18000ms</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 集群模式下，集群最大转发的数量</span></span><br><span class="line"><span class="comment">#spring.redis.cluster.max-redirects=</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 集群模式下，逗号分隔的键值对（主机：端口）形式的服务器列表</span></span><br><span class="line"><span class="comment">#spring.redis.cluster.nodes=</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 哨兵模式下，Redis 主服务器地址</span></span><br><span class="line"><span class="comment">#spring.redis.sentinel.master=</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">## 哨兵模式下，逗号分隔的键值对（主机：端口）形式的服务器列表</span></span><br><span class="line"><span class="comment">#spring.redis.sentinel.nodes= 127.0.0.1:5050,127.0.0.1:5060</span></span><br></pre></td></tr></table></figure><p>自定义配置</p><p>● 还可以在 properties 文件中自定义配置，通过@Value(“${}”)获取对应属性值</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># application.properties 文件</span></span><br><span class="line"><span class="attr">my.website</span>=<span class="string">https://www.baidu.com</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//某个 Bean</span></span><br><span class="line"><span class="meta">@Value(&quot;$&#123;my.website&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String bdUrl;</span><br></pre></td></tr></table></figure><p>SpringBoot 在哪配置读取 application.properites?打开 ConfigFileApplicationListener.java , 看一下源码</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C10.jpg"></p><p>满足DEFAULT_SEARCH_LOCATIONS中的所有路径就可以了</p><h3 id="2-3-4-spring-boot-autoconfigure"><a href="#2-3-4-spring-boot-autoconfigure" class="headerlink" title="2.3.4 spring-boot-autoconfigure"></a>2.3.4 spring-boot-autoconfigure</h3><p>SpringBoot 所 有 的 自 动 配 置 功 能 都 在 spring-boot-autoconfigure 包</p><p>在 SpringBoot 的 自 动 配 置 包 , 一 般 是 XxxAutoConfiguration.java, 对应XxxxProperties.java</p><h1 id="3-容器功能"><a href="#3-容器功能" class="headerlink" title="3 容器功能"></a>3 容器功能</h1><h2 id="3-1-Spring-注入组件的注解"><a href="#3-1-Spring-注入组件的注解" class="headerlink" title="3.1 Spring 注入组件的注解"></a>3.1 Spring 注入组件的注解</h2><h3 id="3-1-1-Component、-Controller、-Service、-Repository"><a href="#3-1-1-Component、-Controller、-Service、-Repository" class="headerlink" title="3.1.1 @Component、@Controller、 @Service、@Repository"></a>3.1.1 @Component、@Controller、 @Service、@Repository</h3><p>这些在 Spring 中的传统注解仍然有效，通过这些注解可以给容器注入组件</p><h2 id="3-2-Configuration"><a href="#3-2-Configuration" class="headerlink" title="3.2 @Configuration"></a>3.2 @Configuration</h2><h3 id="3-2-1-应用实例"><a href="#3-2-1-应用实例" class="headerlink" title="3.2.1 应用实例"></a>3.2.1 应用实例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Configuration 标识这是一个配置类: 等价 配置文件</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. <span class="doctag">@Bean</span> : 给容器中添加组件</span></span><br><span class="line"><span class="comment">* 2. monster01() : 默认方法名作为组件的 id</span></span><br><span class="line"><span class="comment">* 3. Monster: 返回类型就是组件类型, 返回的值就是 new Monster(100, &quot;牛魔王&quot;, 500, &quot;芭蕉扇&quot;)</span></span><br><span class="line"><span class="comment">* 4. <span class="doctag">@Bean</span>(&quot;monster_nmw&quot;): 重新指定组件的 id = “monster_nmw”</span></span><br><span class="line"><span class="comment">* 5. 配置类里面使用<span class="doctag">@Bean</span> 标注在方法上给容器注册组件，默认是单实例的*/</span></span><br><span class="line"><span class="comment">// @Bean(&quot;monster_nmw&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Monster <span class="title function_">monster01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">100</span>, <span class="string">&quot;牛魔王&quot;</span>, <span class="number">500</span>, <span class="string">&quot;芭蕉扇&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改 MainApp.java , 从配置文件&#x2F;容器获取 bean , 并完成测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//启动 SpringBoot 应用程序</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">SpringApplication.run(MainApp.class, args);</span><br><span class="line"><span class="comment">// //查看容器里面的组件</span></span><br><span class="line"><span class="comment">// String[] beanDefinitionNames = ioc.getBeanDefinitionNames();</span></span><br><span class="line"><span class="comment">// for (String beanDefinitionName : beanDefinitionNames) &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(beanDefinitionName);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. ioc.getBean(&quot;monster01&quot;, Monster.class) 是从 BeanConfig 配置类/容器获取bean实例</span></span><br><span class="line"><span class="comment">//2. 默认是单列模式, 所以 monster01 == monster02</span></span><br><span class="line"><span class="comment">//获取 BeanConfig 配置类的组件/bean 实例</span></span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01);</span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01 == monster02);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-2-2-Configuration-注意事项和细节"><a href="#3-2-2-Configuration-注意事项和细节" class="headerlink" title="3.2.2 @Configuration 注意事项和细节"></a>3.2.2 @Configuration 注意事项和细节</h3><ol><li>配置类本身也是组件， 因此也可以获取, 测试 修改</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">SpringApplication.run(MainApp.class, args);</span><br><span class="line"></span><br><span class="line"><span class="comment">//1. ioc.getBean(&quot;monster01&quot;, Monster.class) 是从 BeanConfig 配置类/容器获取bean实例//2. 默认是单列模式, 所以 monster01 == monster02</span></span><br><span class="line"><span class="comment">//获取 BeanConfig 配置类的组件/bean 实例</span></span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01);</span><br><span class="line">韩顺平Java 工程师<span class="type">Monster</span> <span class="variable">monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01 == monster02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类本身也是组件， 因此也可以获取</span></span><br><span class="line"><span class="type">BeanConfig</span> <span class="variable">beanConfig</span> <span class="operator">=</span> ioc.getBean(BeanConfig.class);</span><br><span class="line">System.out.println(<span class="string">&quot;beanConfig= &quot;</span> + beanConfig);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>2.SpringBoot2 新增特性： proxyBeanMethods 指定 Full 模式和Lite 模式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> wzb</span></span><br><span class="line"><span class="comment">* 1. proxyBeanMethods：代理 bean 的方法</span></span><br><span class="line"><span class="comment">* (1) Full(proxyBeanMethods = true)、【保证每个<span class="doctag">@Bean</span> 方法被调用多少次返回的组件都是单实例的, 是代理方式】</span></span><br><span class="line"><span class="comment">* (2) Lite(proxyBeanMethods = false)【每个<span class="doctag">@Bean</span> 方法被调用多少次返回的组件都是新创建的, 是非代理方式】</span></span><br><span class="line"><span class="comment">* (3) 特别说明: proxyBeanMethods 是在 调用<span class="doctag">@Bean</span> 方法 才生效，因此，需要先获取BeanConfig 组件，再调用方法</span></span><br><span class="line"><span class="comment">* 而不是直接通过 SpringBoot 主程序得到的容器来获取bean, 注意观察直接通过ioc.getBean() 获取 Bean, proxyBeanMethods 值并没有生效</span></span><br><span class="line"><span class="comment">* (4) 如何选择: 组件依赖必须使用 Full 模式默认。如果不需要组件依赖使用Lite 模* (5) Lite 模 也称为轻量级模式，因为不检测依赖关系，运行速度快*/</span></span><br><span class="line"><span class="comment">//@Configuration 标识这是一个配置类: 等价 配置文件</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. <span class="doctag">@Bean</span> : 给容器中添加组件</span></span><br><span class="line"><span class="comment">* 2. monster01() : 默认方法名作为组件的 id</span></span><br><span class="line"><span class="comment">* 3. Monster: 返回类型就是组件类型, 返回的值就是 new Monster(100, &quot;牛魔王&quot;, 500, &quot;芭蕉扇&quot;)</span></span><br><span class="line"><span class="comment"> 4. <span class="doctag">@Bean</span>(&quot;monster_nmw&quot;): 重新指定组件的 id = “monster_nmw” * 5. 配置类里面使用<span class="doctag">@Bean</span> 标注在方法上给容器注册组件，默认是单实例的*/</span></span><br><span class="line"><span class="comment">// @Bean(&quot;monster_nmw&quot;)</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> Monster <span class="title function_">monster01</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="number">100</span>, <span class="string">&quot;牛魔王&quot;</span>, <span class="number">500</span>, <span class="string">&quot;芭蕉扇&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.hspedu.springboot;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.springboot.bean.Monster;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.springboot.config.BeanConfig;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.ConfigurableApplicationContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &quot;com.hspedu&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MainApp</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//启动 SpringBoot 应用程序</span></span><br><span class="line"><span class="type">ConfigurableApplicationContext</span> <span class="variable">ioc</span> <span class="operator">=</span></span><br><span class="line">SpringApplication.run(MainApp.class, args);</span><br><span class="line"><span class="comment">// //查看容器里面的组件</span></span><br><span class="line"><span class="comment">// String[] beanDefinitionNames = ioc.getBeanDefinitionNames();</span></span><br><span class="line"><span class="comment">// for (String beanDefinitionName : beanDefinitionNames) &#123;</span></span><br><span class="line"><span class="comment">// System.out.println(beanDefinitionName);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1. ioc.getBean(&quot;monster01&quot;, Monster.class) 是从 BeanConfig 配置类/容器获取bean实例</span></span><br><span class="line"><span class="comment">//2. 默认是单列模式, 所以 monster01 == monster02</span></span><br><span class="line"><span class="comment">//获取 BeanConfig 配置类的组件/bean 实例</span></span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster01</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01);</span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster02</span> <span class="operator">=</span> ioc.getBean(<span class="string">&quot;monster01&quot;</span>, Monster.class);</span><br><span class="line">System.out.println(monster01 == monster02);</span><br><span class="line"></span><br><span class="line"><span class="comment">//配置类本身也是组件， 因此也可以获取</span></span><br><span class="line"><span class="type">BeanConfig</span> <span class="variable">beanConfig</span> <span class="operator">=</span> ioc.getBean(BeanConfig.class);</span><br><span class="line">System.out.println(<span class="string">&quot;beanConfig= &quot;</span> + beanConfig);</span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster03</span> <span class="operator">=</span> beanConfig.monster01();</span><br><span class="line"><span class="type">Monster</span> <span class="variable">monster04</span> <span class="operator">=</span> beanConfig.monster01();</span><br><span class="line">System.out.println(<span class="string">&quot;monster03 == monster04 : &quot;</span> + (monster03 == monster04));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-3-Import"><a href="#3-3-Import" class="headerlink" title="3.3 @Import"></a>3.3 @Import</h2><p>@Import 方式注入的组件, 默认组件的名字就是全类名</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Import(&#123;Dog.class, Cat.class&#125;)</span></span><br><span class="line"><span class="comment">// @Configuration//标识这是一个配置类: 等价 配置文件</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-4-Conditional"><a href="#3-4-Conditional" class="headerlink" title="3.4 @Conditional"></a>3.4 @Conditional</h2><h3 id="3-4-1-Conditional-介绍"><a href="#3-4-1-Conditional-介绍" class="headerlink" title="3.4.1 @Conditional 介绍"></a>3.4.1 @Conditional 介绍</h3><p>​1. 条件装配：满足 Conditional 指定的条件，则进行组件注入</p><ol start="2"><li>@Conditional 是一个根注解，下面有很多扩展注解</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wzb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@ConditionalOnBean(name=&quot;monster02&quot;) 如果是在类中，代表所有的Bean都满足条件，需要monster02这个Bean存在于spring容器中</span></span><br><span class="line"><span class="meta">@Configuration(proxyBeanMethods = false)</span></span><br><span class="line"><span class="meta">@Scope(&quot;prototype&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig2</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Monster <span class="title function_">monster02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Monster</span>(<span class="string">&quot;小怪兽&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建Dog对象，并返回给容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ConditionalOnBean</span>(name=&quot;monster02&quot;)当容器中有 monster02 Bean时，就注入dog01这个bean</span></span><br><span class="line"><span class="comment">     *     <span class="doctag">@ConditionalOnMissingBean</span>,在容器中没有 monster02 Bean时，就注入dog01这个bean</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnBean(name=&quot;monster02&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Dog <span class="title function_">dog01</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Dog</span>(<span class="string">&quot;小狗&quot;</span>, <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="3-5-ImportResource"><a href="#3-5-ImportResource" class="headerlink" title="3.5 @ImportResource"></a>3.5 @ImportResource</h2><p>作用：原生配置文件引入, 也就是可以直接导入 Spring 传统的beans.xml ，可以认为是 SpringBoot 对 Spring 容器文件的兼容</p><p>将 beans.xml 导入到 BeanConfig.java 配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wzb</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">// 可以获取beans.xml中的bean</span></span><br><span class="line"><span class="meta">@ImportResource(&quot;classpath:beans.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig3</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-6-配置绑定"><a href="#3-6-配置绑定" class="headerlink" title="3.6 配置绑定"></a>3.6 配置绑定</h2><p>一句话：使用 Java 读取到 SpringBoot 核心配置文件 application.properties 的内容，并且把它封装到 JavaBean 中</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. <span class="doctag">@Component</span> 将 Furn 注册为一个组件</span></span><br><span class="line"><span class="comment">* 2. <span class="doctag">@ConfigurationProperties</span>(prefix = &quot;furn01&quot;) 指定在 application.properties 前缀* 这样 Furn 组件就会属性文件中的 值绑定了</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;furn01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Furn</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double price;</span><br><span class="line"><span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> Double <span class="title function_">getPrice</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setPrice</span><span class="params">(Double price)</span> &#123;</span><br><span class="line"><span class="built_in">this</span>.price = price;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3. 修改 HelloController.java</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">package</span> com.hspedu.springboot.controller;</span><br><span class="line"><span class="keyword">import</span> com.hspedu.springboot.bean.Furn;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello, spring boot&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Furn furn;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/furn&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Furn <span class="title function_">furn</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="keyword">return</span> furn;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置绑定还有第 2 种方式,效果一样，注意: 注销@Component 需 要 在 BeanConfig.java( 也可以是其它配置类) 配置@EnableConfigurationProperties(Furn.class), 否则会提示错误</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C11.jpg"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@EnableConfigurationProperties(Furn.class)解读</span></span><br><span class="line"><span class="comment">//1、开启 Furn 配置绑定功能</span></span><br><span class="line"><span class="comment">//2、把 Furn 组件自动注册到容器中</span></span><br><span class="line"><span class="meta">@EnableConfigurationProperties(Furn.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br></pre></td></tr></table></figure><h1 id="4-Lombok"><a href="#4-Lombok" class="headerlink" title="4 Lombok"></a>4 Lombok</h1><h2 id="4-1-Lomkbok的作用"><a href="#4-1-Lomkbok的作用" class="headerlink" title="4.1 Lomkbok的作用"></a>4.1 Lomkbok的作用</h2><ol><li>简化 JavaBean 开发, 可以使用 Lombok 的注解让代码更加简洁</li><li>Java 项目中，很多没有技术含量又必须存在的代码：POJO 的getter&#x2F;setter&#x2F;toString；异常处理；I&#x2F;O 流的关闭操作等等，这些代码既没有技术含量，又影响着代码的美观，Lombok应运而生</li></ol><h2 id="4-2-Lomkbok常用注解"><a href="#4-2-Lomkbok常用注解" class="headerlink" title="4.2 Lomkbok常用注解"></a>4.2 Lomkbok常用注解</h2><ul><li><code>@Data</code>: 注解在类上;提供类所有属性的 aetting 和 seting 方法，此外还提供了equals、canEaual、hashCode、toString方法</li><li><code>@Setter</code>:注解在属性上;为属性提供 setting 方法</li><li><code>@Gettter</code> :注解在属性上;为属性提供 getting 方法</li><li><code>@Log4j</code>:注解在类上;为类提供一个 属性名为log 的 log4j日志对象</li><li><code>@NoArgsConstructor</code>:注解在类上;为类提供一个无参的构造方法</li><li><code>@AllArgsConstructor</code>:注解在类上;为类提供一个全参的构造方法</li><li><code>@Cleanup</code>:可以关闭流</li><li><code>@Builder</code>: 被注解的类加个构造者模式</li><li><code>@Synchronized</code> :加个同步锁</li><li><code>@SneakyThrows</code>:等同于try&#x2F;catch 捕获异常</li><li><code>@NonNull</code>:如果给参数加个这个注解 参数为null会抛出空指针异常</li><li><code>@Value</code>:注解和@Data类似，区别在于它会把所有成员变量默认定义为private final修饰，并且不会生成set方法。</li></ul><h2 id="4-3-Lombok应用"><a href="#4-3-Lombok应用" class="headerlink" title="4.3 Lombok应用"></a>4.3 Lombok应用</h2><p>在 pom.xml 引入 lombok，springboot会自动引入该依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引 入 lombok, 版 本 在 spring-boot-dependencies-2.5.3.pom指定了, 把光标放在lombok ctrl+b 可以看到--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@ToString : lombok 注解, 会在编译时生成 toString()</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="comment">//@Data: lombok 注解, 会在编译时生成 setter / getter</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="comment">//@NoArgsConstructor:lombok 注解, 会在编译时生成无参构造器@NoArgsConstructor</span></span><br><span class="line"><span class="comment">//@AllArgsConstructor: lombok 注解, 会在编译时生成全参构造器@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties(prefix = &quot;furn01&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Furn</span> &#123;</span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> Double price;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>支持日志输出，建议使用@Slf4j</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;hello, spring boot&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">Furn furn;</span><br><span class="line"><span class="meta">@RequestMapping(&quot;/furn&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Furn <span class="title function_">furn</span><span class="params">()</span> &#123;</span><br><span class="line">log.info(<span class="string">&quot;furn = &quot;</span> + furn);</span><br><span class="line"><span class="comment">//占位用法</span></span><br><span class="line">log.info(<span class="string">&quot;furn = &#123;&#125; &quot;</span>, furn);</span><br><span class="line"><span class="keyword">return</span> furn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-yaml"><a href="#5-yaml" class="headerlink" title="5 yaml"></a>5 yaml</h1><h2 id="5-1-yaml介绍"><a href="#5-1-yaml介绍" class="headerlink" title="5.1 yaml介绍"></a>5.1 yaml介绍</h2><p>1、YAML 以数据做为中心，而不是以标记语言为重点</p><p>2、YAML 仍然是一种标记语言, 但是和传统的标记语言不一样, 是以数据为中心的标记语言.</p><p>3、YAML 非常适合用来做以数据为中心的配置文件 [springboot : application.yml]</p><h2 id="5-2-yaml基本语法"><a href="#5-2-yaml基本语法" class="headerlink" title="5.2 yaml基本语法"></a>5.2 yaml基本语法</h2><ol><li>形式为 key: value；注意: 后面有空格 </li><li>区分大小写 </li><li>使用缩进表示层级关系 </li><li>缩进不允许使用 tab，只允许空格 [有些地方也识别 tab , 推荐使用空格] </li><li>缩进的空格数不重要，只要相同层级的元素左对齐即可 </li><li>字符串无需加引号</li><li>yml 中, 注释使用 #</li></ol><h2 id="5-3-数据类型"><a href="#5-3-数据类型" class="headerlink" title="5.3 数据类型"></a>5.3 数据类型</h2><h3 id="5-3-1-字面量"><a href="#5-3-1-字面量" class="headerlink" title="5.3.1 字面量"></a>5.3.1 字面量</h3><p>字面量：单个的、不可再分的值。date、boolean、string、number、null</p><p>保存形式为 key: value</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">monster:</span></span><br><span class="line"><span class="attr">id:</span> <span class="number">100</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">xxx</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">50</span></span><br></pre></td></tr></table></figure><h3 id="5-3-2-对象"><a href="#5-3-2-对象" class="headerlink" title="5.3.2 对象"></a>5.3.2 对象</h3><p>对象：键值对的集合, 比如 map、hash、set、object</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 行内写法： k: &#123;k1:v1,k2:v2,k3:v3&#125;</span></span><br><span class="line"><span class="attr">monster:</span> &#123;<span class="attr">id:</span> <span class="number">100</span>,<span class="attr">name:</span> <span class="string">牛魔王</span>&#125;</span><br><span class="line"><span class="comment">#或换行形式</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line"><span class="attr">k1:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">k2:</span> <span class="string">v2</span></span><br><span class="line"><span class="attr">k3:</span> <span class="string">v3</span></span><br><span class="line"><span class="attr">monster:</span> <span class="comment"># 可以是对象</span></span><br><span class="line">    <span class="attr">id:</span> <span class="number">100</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">牛魔王</span></span><br><span class="line"><span class="attr">skill:</span> <span class="comment"># 可以是String[]或者List&lt;String&gt;</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">飞</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">跑</span></span><br><span class="line"><span class="attr">hobby:</span> [<span class="string">喝酒，吃肉</span>]</span><br><span class="line"><span class="attr">brand:</span> &#123;<span class="attr">key01:</span> <span class="string">小米</span>,<span class="attr">key02:</span> <span class="string">比亚迪</span> &#125;</span><br></pre></td></tr></table></figure><h3 id="5-3-3-数组"><a href="#5-3-3-数组" class="headerlink" title="5.3.3 数组"></a>5.3.3 数组</h3><p>数组：一组按次序排列的值, 比如 array、list、queue</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">行内写法：</span> <span class="attr">k:</span> [<span class="string">v1</span>,<span class="string">v2</span>,<span class="string">v3</span>]</span><br><span class="line"><span class="attr">hobby:</span> [<span class="string">打篮球</span>, <span class="string">打乒乓球</span>, <span class="string">踢足球</span>]</span><br><span class="line"><span class="comment">#或者换行格式</span></span><br><span class="line"><span class="attr">k:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v2</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">v3</span></span><br><span class="line"><span class="attr">hobby:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">打篮球</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">打乒乓球</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">踢足球</span></span><br></pre></td></tr></table></figure><h2 id="5-4-yaml-使用细节"><a href="#5-4-yaml-使用细节" class="headerlink" title="5.4 yaml 使用细节"></a>5.4 yaml 使用细节</h2><p>如 果 application.properties 和 application.yaml 有 相同的前缀值绑定，则application.properties 优先级高, 开发时，应当避免</p><h1 id="6-静态资源访问"><a href="#6-静态资源访问" class="headerlink" title="6 静态资源访问"></a>6 静态资源访问</h1><h3 id="6-1-基本介绍"><a href="#6-1-基本介绍" class="headerlink" title="6.1 基本介绍"></a>6.1 基本介绍</h3><p>只要静态资源放在类路径下： &#x2F;static 、 &#x2F;public 、 &#x2F;resources 、&#x2F;META-INF&#x2F;resources可以被直接访问- 对应文件 WebProperties.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] CLASSPATH_RESOURCE_LOCATIONS=&#123; <span class="string">&quot;classpath:/META-INF/resources/&quot;</span>, <span class="string">&quot;classpath:/resources/&quot;</span>, <span class="string">&quot;classpath:/static/&quot;</span>, <span class="string">&quot;classpath:/public/&quot;</span> &#125;;</span><br></pre></td></tr></table></figure><p>常见静态资源：JS、CSS 、图片（.jpg .png .gif .bmp .svg）、字体文件(Fonts)等</p><p>访问方式 ：默认: 项目根路径&#x2F; + 静态资源名 比如 <code>http://localhost:8080/hi.jpg .</code> </p><h3 id="6-2-使用注意"><a href="#6-2-使用注意" class="headerlink" title="6.2 使用注意"></a>6.2 使用注意</h3><p>问题：静态资源访问原理：静态映射是 &#x2F;** , 也就是对所有请求拦截，请求进来，先看Controller能不能处理，不能处理的请求交给静态资源处理器，如果静态资源找不到则响应404页面</p><p>改变静态资源访问前缀，比如我们希望 <code>http://localhost:8080/wzb/*</code> 去请求静态资源, 应用场景：静态资源访问前缀和控制器请求路径冲突</p><p>需要在配置文件中配置</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line"><span class="attr">static-path-pattern:</span> <span class="string">/wzb/**</span></span><br></pre></td></tr></table></figure><p>改变默认的静态资源路径，比如希望在类路径下增加 wzbimg 目录作为静态资源路径, 也就是希望resources目录下可以访问wzbimg中的资源</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">mvc:</span></span><br><span class="line"><span class="attr">static-path-pattern:</span> <span class="string">/hspres/**</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">resources:</span></span><br><span class="line"><span class="attr">static-locations:</span> [<span class="string">classpath:/wzbimg/</span>, <span class="string">classpath:/public/</span>, <span class="string">classpath:/static/</span>] <span class="comment"># 必须把public static目录带上，否则原来等等静态目录访问不上</span></span><br></pre></td></tr></table></figure><h1 id="7-Rest风格请求处理"><a href="#7-Rest风格请求处理" class="headerlink" title="7 Rest风格请求处理"></a>7 Rest风格请求处理</h1><h2 id="7-1-基本介绍"><a href="#7-1-基本介绍" class="headerlink" title="7.1 基本介绍"></a>7.1 基本介绍</h2><p>Rest 风格支持（使用 HTTP 请求方式动词来表示对资源的操作）</p><p>举例说明： </p><p>● 请求方式: &#x2F;monster </p><p>● GET-获取怪物 </p><p>● DELETE-删除怪物 </p><p>● PUT-修改怪物 </p><p>● POST-保存妖怪</p><p>7.2 应用实例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MonsterController</span> &#123;</span><br><span class="line"><span class="comment">// @RequestMapping(value = &quot;/monster&quot;,method = RequestMethod.GET)</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/monster&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getMonster</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;GET-查询妖怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @RequestMapping(value = &quot;/monster&quot;,method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/monster&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">saveMonster</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;POST-添加妖怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// @RequestMapping(value = &quot;/monster&quot;,method = RequestMethod.PUT)</span></span><br><span class="line"><span class="meta">@PutMapping(&quot;/monster&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">putMonster</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;PUT-修改妖怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@DeleteMapping(&quot;/monster&quot;)</span></span><br><span class="line"><span class="comment">// @RequestMapping(value = &quot;/monster&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">deleteMonster</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;DELETE-删除妖怪&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-2-注意事项和细节"><a href="#7-2-注意事项和细节" class="headerlink" title="7.2 注意事项和细节"></a>7.2 注意事项和细节</h2><p>1、客户端是 PostMan 可以直接发送 Put、delete 等方式请求，可不设置Filter </p><p>2、如果要 SpringBoot 支持 页面表单的 Rest 功能, 则需要注意如下细节</p><ul><li>Rest 风 格 请 求 核 心 Filter ； HiddenHttpMethodFilter ，表单请求会被HiddenHttpMethodFilter 拦截 , 获取到表单 _method 的值，再判断是PUT&#x2F;DELETE&#x2F;PATCH(注释: PATCH 方法是新引入的，是对 PUT 方法的补充，用来对已知资源进行局部更新) </li><li>如果要 SpringBoot 支持 页面表单的 Rest 功能, 需要在 application.yml 启用filter 功能, 否则无效 </li><li>修改 application.yml 启用 filter 功能</li></ul><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring</span>:<span class="string"></span></span><br><span class="line"><span class="attr">mvc</span>:<span class="string"></span></span><br><span class="line">    <span class="attr">static-path-pattern</span>: <span class="string">/wzb/**</span></span><br><span class="line">    <span class="attr">hiddenmethod</span>:<span class="string"></span></span><br><span class="line">        <span class="attr">filter</span>:<span class="string"></span></span><br><span class="line"><span class="attr">enabled</span>: <span class="string">true #开启页面表单的 Rest 功能</span></span><br></pre></td></tr></table></figure><p>3、 @ResController 是一个复合注解, 含有@ResponseBody, 所以springboot 底层(springmvc), 在处理，如果单纯用@Controller注解，就不会返回数据给客户端，而是找视图解析器处理，比如return “test”，就会找<code>test.html</code>静态页面</p><p>解决方法：如果已经有了对应的test.html，可以在配置文件进行配置，返回“test”字符串也可以找到页面</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mvc:</span><br><span class="line">    <span class="keyword">static</span>-path-pattern: /wzb<span class="comment">/**</span></span><br><span class="line"><span class="comment">    hiddenmethod:</span></span><br><span class="line"><span class="comment">      filter:</span></span><br><span class="line"><span class="comment">    enabled: true #开启页面表单的 Rest 功能</span></span><br><span class="line"><span class="comment">    view:</span></span><br><span class="line"><span class="comment">      prefix: / # 找根路径</span></span><br><span class="line"><span class="comment">      suffix: .html # 结尾是以.html结尾</span></span><br></pre></td></tr></table></figure><h1 id="8-接收参数相关注解"><a href="#8-接收参数相关注解" class="headerlink" title="8 接收参数相关注解"></a>8 接收参数相关注解</h1><h2 id="8-1-基本介绍"><a href="#8-1-基本介绍" class="headerlink" title="8.1 基本介绍"></a>8.1 基本介绍</h2><h3 id="1-PathVariable"><a href="#1-PathVariable" class="headerlink" title="1. @PathVariable"></a>1. @PathVariable</h3><p>作用：从URL路径中提取变量值。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本使用</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定名称</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;userId&#125;/orders/&#123;orderId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Order <span class="title function_">getOrder</span><span class="params">(<span class="meta">@PathVariable(&quot;userId&quot;)</span> Long uid, </span></span><br><span class="line"><span class="params">                         <span class="meta">@PathVariable(&quot;orderId&quot;)</span> Long oid)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> orderService.findOrder(uid, oid);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用正则表达式</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;name:[a-z-]+&#125;-&#123;version:\\d\\.\\d\\.\\d&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getVersion</span><span class="params">(<span class="meta">@PathVariable</span> String name, </span></span><br><span class="line"><span class="params">                            <span class="meta">@PathVariable</span> String version)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name + <span class="string">&quot;:&quot;</span> + version;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有路径变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;type&#125;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getAllPathVariables</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@PathVariable</span> Map&lt;String, String&gt; pathVars)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> pathVars;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-RequestHeader"><a href="#2-RequestHeader" class="headerlink" title="2. @RequestHeader"></a>2. @RequestHeader</h3><p>作用：从HTTP请求头中提取值。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取单个请求头</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/header&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getHeader</span><span class="params">(<span class="meta">@RequestHeader(&quot;User-Agent&quot;)</span> String userAgent)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User-Agent: &quot;</span> + userAgent;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/language&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getLanguage</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(value = &quot;Accept-Language&quot;, defaultValue = &quot;zh-CN&quot;)</span> String lang)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Language: &quot;</span> + lang;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取数值类型的请求头</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/content-length&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getContentLength</span><span class="params">(<span class="meta">@RequestHeader(&quot;Content-Length&quot;)</span> <span class="type">long</span> contentLength)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Content-Length: &quot;</span> + contentLength;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有请求头</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/all-headers&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getAllHeaders</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader</span> Map&lt;String, String&gt; headers)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> headers;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取多值请求头</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/multi-header&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMultiValueHeader</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestHeader(&quot;Accept&quot;)</span> List&lt;String&gt; acceptHeaders)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> acceptHeaders;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-ModelAttribute"><a href="#3-ModelAttribute" class="headerlink" title="3. @ModelAttribute"></a>3. @ModelAttribute</h3><p>作用：将请求参数绑定到模型对象。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ModelController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自动绑定到对象</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(<span class="meta">@ModelAttribute</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User: &quot;</span> + user.getName() + <span class="string">&quot;, Age: &quot;</span> + user.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 在方法级别使用，为所有请求添加公共属性</span></span><br><span class="line">    <span class="meta">@ModelAttribute</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addCommonAttributes</span><span class="params">(Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;currentTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自定义属性名</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/product&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getProduct</span><span class="params">(<span class="meta">@ModelAttribute(&quot;prod&quot;)</span> Product product)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> product.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对应的实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法、getter、setter</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, Integer age, String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter和setter方法</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123; <span class="keyword">return</span> name; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123; <span class="built_in">this</span>.name = name; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123; <span class="keyword">return</span> age; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123; <span class="built_in">this</span>.age = age; &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123; <span class="keyword">return</span> email; &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123; <span class="built_in">this</span>.email = email; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-RequestParam"><a href="#4-RequestParam" class="headerlink" title="4. @RequestParam"></a>4. @RequestParam</h3><p>作用：从URL查询参数或表单数据中提取值。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本使用</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">search</span><span class="params">(<span class="meta">@RequestParam</span> String keyword)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Searching for: &quot;</span> + keyword;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定参数名和默认值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPage</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;page&quot;, defaultValue = &quot;1&quot;)</span> <span class="type">int</span> page,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(value = &quot;size&quot;, defaultValue = &quot;10&quot;)</span> <span class="type">int</span> size)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Page: %d, Size: %d&quot;</span>, page, size);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 可选参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/optional&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">optionalParam</span><span class="params">(<span class="meta">@RequestParam(required = false)</span> String filter)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filter != <span class="literal">null</span> ? <span class="string">&quot;Filter: &quot;</span> + filter : <span class="string">&quot;No filter&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/all-params&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getAllParams</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam</span> Map&lt;String, String&gt; allParams)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> allParams;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多值参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/multi&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMultiParams</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; tags)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> tags;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 处理数组参数</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/array&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String[] getArrayParams(<span class="meta">@RequestParam</span> String[] ids) &#123;</span><br><span class="line">        <span class="keyword">return</span> ids;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-MatrixVariable"><a href="#5-MatrixVariable" class="headerlink" title="5. @MatrixVariable"></a>5. @MatrixVariable</h3><p>作用：从URL路径的矩阵变量中提取值（需要额外配置）。</p><p>配置和使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">configurePathMatch</span><span class="params">(PathMatchConfigurer configurer)</span> &#123;</span><br><span class="line">        <span class="type">UrlPathHelper</span> <span class="variable">urlPathHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UrlPathHelper</span>();</span><br><span class="line">        urlPathHelper.setRemoveSemicolonContent(<span class="literal">false</span>);</span><br><span class="line">        configurer.setUrlPathHelper(urlPathHelper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MatrixController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 基本矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cars/&#123;car&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCar</span><span class="params">(<span class="meta">@PathVariable</span> String car,</span></span><br><span class="line"><span class="params">                        <span class="meta">@MatrixVariable</span> String color,</span></span><br><span class="line"><span class="params">                        <span class="meta">@MatrixVariable</span> String year)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Car: %s, Color: %s, Year: %s&quot;</span>, car, color, year);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// URL示例: /cars/BMW;color=red;year=2022</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指定路径变量的矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/owners/&#123;ownerId&#125;/pets/&#123;petId&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">findPet</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable(pathVar = &quot;ownerId&quot;)</span> String q1,</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable(pathVar = &quot;petId&quot;)</span> String q2)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Owner query: &quot;</span> + q1 + <span class="string">&quot;, Pet query: &quot;</span> + q2;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// URL示例: /owners/123;q=ownerQuery/pets/456;q=petQuery</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取所有矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/products/&#123;category&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, String&gt; <span class="title function_">getMatrixVars</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable</span> Map&lt;String, String&gt; matrixVars)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> matrixVars;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 多值矩阵变量</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/filter/&#123;criteria&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">getMultiMatrix</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@MatrixVariable</span> List&lt;String&gt; filters)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> filters;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-CookieValue"><a href="#6-CookieValue" class="headerlink" title="6. @CookieValue"></a>6. @CookieValue</h3><p>作用：从HTTP Cookie中提取值。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CookieController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取Cookie值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/cookie&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getCookie</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String sessionId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Session ID: &quot;</span> + sessionId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置默认值</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/theme&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTheme</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@CookieValue(value = &quot;theme&quot;, defaultValue = &quot;light&quot;)</span> String theme)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Theme: &quot;</span> + theme;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 获取完整的Cookie对象</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/full-cookie&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFullCookie</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> Cookie sessionCookie)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Name: %s, Value: %s, Domain: %s&quot;</span>, </span><br><span class="line">                sessionCookie.getName(), </span><br><span class="line">                sessionCookie.getValue(),</span><br><span class="line">                sessionCookie.getDomain());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置Cookie的示例</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/set-cookie&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;String&gt; <span class="title function_">setCookie</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">ResponseCookie</span> <span class="variable">cookie</span> <span class="operator">=</span> ResponseCookie.from(<span class="string">&quot;user-token&quot;</span>, <span class="string">&quot;abc123&quot;</span>)</span><br><span class="line">                .httpOnly(<span class="literal">true</span>)</span><br><span class="line">                .secure(<span class="literal">true</span>)</span><br><span class="line">                .path(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">                .maxAge(Duration.ofHours(<span class="number">1</span>))</span><br><span class="line">                .build();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok()</span><br><span class="line">                .header(HttpHeaders.SET_COOKIE, cookie.toString())</span><br><span class="line">                .body(<span class="string">&quot;Cookie set&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-RequestBody"><a href="#7-RequestBody" class="headerlink" title="7. @RequestBody"></a>7. @RequestBody</h3><p>作用：将HTTP请求体绑定到方法参数，主要用于处理JSON&#x2F;XML等格式的数据。</p><p>使用示例</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BodyController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定到简单对象</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 处理用户创建逻辑</span></span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定到Map</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/map&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">handleMap</span><span class="params">(<span class="meta">@RequestBody</span> Map&lt;String, Object&gt; payload)</span> &#123;</span><br><span class="line">        payload.put(<span class="string">&quot;processed&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">        payload.put(<span class="string">&quot;timestamp&quot;</span>, LocalDateTime.now());</span><br><span class="line">        <span class="keyword">return</span> payload;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定到List</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/batch&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">batchCreate</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; users)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Created &quot;</span> + users.size() + <span class="string">&quot; users&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 绑定到字符串</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/raw&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleRawBody</span><span class="params">(<span class="meta">@RequestBody</span> String rawBody)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Received: &quot;</span> + rawBody;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用HttpEntity获取完整请求信息</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/entity&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleEntity</span><span class="params">(HttpEntity&lt;String&gt; entity)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">body</span> <span class="operator">=</span> entity.getBody();</span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> entity.getHeaders();</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;Body: %s, Content-Type: %s&quot;</span>, </span><br><span class="line">                body, headers.getContentType());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 验证请求体</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/validate&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; createValidUser(<span class="meta">@Valid</span> <span class="meta">@RequestBody</span> User user) &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">savedUser</span> <span class="operator">=</span> userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> ResponseEntity.ok(savedUser);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 验证注解示例</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="meta">@NotBlank(message = &quot;姓名不能为空&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Min(value = 0, message = &quot;年龄不能小于0&quot;)</span></span><br><span class="line">    <span class="meta">@Max(value = 150, message = &quot;年龄不能大于150&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Email(message = &quot;邮箱格式不正确&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter和setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-2-复杂参数接收请求数据"><a href="#8-2-复杂参数接收请求数据" class="headerlink" title="8.2 复杂参数接收请求数据"></a>8.2 复杂参数接收请求数据</h2><h3 id="1-常用复杂参数类型"><a href="#1-常用复杂参数类型" class="headerlink" title="1. 常用复杂参数类型"></a>1. 常用复杂参数类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonParamsController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 常用复杂参数</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">            Map&lt;String, Object&gt; map,                    // 数据存储</span></span><br><span class="line"><span class="params">            Model model,                                // 模型数据  </span></span><br><span class="line"><span class="params">            RedirectAttributes redirectAttributes,     // 重定向属性</span></span><br><span class="line"><span class="params">            HttpServletResponse response,              // HTTP响应</span></span><br><span class="line"><span class="params">            HttpSession session                        // Session</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;view&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-Map-和-Model-Request域数据"><a href="#2-Map-和-Model-Request域数据" class="headerlink" title="2. Map 和 Model - Request域数据"></a>2. Map 和 Model - Request域数据</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(Map&lt;String, Object&gt; map, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// Map 和 Model 数据都会放在request域中（底层request.setAttribute()）</span></span><br><span class="line">        map.put(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;张三&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;age&quot;</span>, <span class="number">25</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 在模板中通过 $&#123;name&#125;、$&#123;age&#125; 获取</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 快捷方式 - 直接返回数据</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/data&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; data = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        data.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);</span><br><span class="line">        data.put(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-RedirectAttributes-重定向携带数据"><a href="#3-RedirectAttributes-重定向携带数据" class="headerlink" title="3. RedirectAttributes - 重定向携带数据"></a>3. RedirectAttributes - 重定向携带数据</h3><p>java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedirectController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/addUser&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(User user, RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            userService.save(user);</span><br><span class="line">            <span class="comment">// 添加flash属性 - 重定向后自动消失</span></span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;用户添加成功&quot;</span>);</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;alertType&quot;</span>, <span class="string">&quot;success&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;message&quot;</span>, <span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;alertType&quot;</span>, <span class="string">&quot;error&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/user/list&quot;</span>;  <span class="comment">// 重定向到列表页</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 普通属性（会拼接到URL）</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">search</span><span class="params">(String keyword, RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line">        redirectAttributes.addAttribute(<span class="string">&quot;keyword&quot;</span>, keyword); <span class="comment">// → /result?keyword=xxx</span></span><br><span class="line">        redirectAttributes.addAttribute(<span class="string">&quot;page&quot;</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-HttpServletResponse-响应控制"><a href="#4-HttpServletResponse-响应控制" class="headerlink" title="4. HttpServletResponse - 响应控制"></a>4. HttpServletResponse - 响应控制</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResponseController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/download&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应头</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/octet-stream&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=file.txt&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 直接写入响应流</span></span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">        os.write(<span class="string">&quot;文件内容&quot;</span>.getBytes());</span><br><span class="line">        os.flush();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/json&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">returnJson</span><span class="params">(HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        response.setContentType(<span class="string">&quot;application/json;charset=utf-8&quot;</span>);</span><br><span class="line">        <span class="type">PrintWriter</span> <span class="variable">out</span> <span class="operator">=</span> response.getWriter();</span><br><span class="line">        out.write(<span class="string">&quot;&#123;\&quot;status\&quot;:\&quot;success\&quot;&#125;&quot;</span>);</span><br><span class="line">        out.flush();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-HttpSession-会话管理"><a href="#5-HttpSession-会话管理" class="headerlink" title="5. HttpSession - 会话管理"></a>5. HttpSession - 会话管理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SessionController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(User user, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 存储用户信息到session</span></span><br><span class="line">        session.setAttribute(<span class="string">&quot;currentUser&quot;</span>, user);</span><br><span class="line">        session.setAttribute(<span class="string">&quot;loginTime&quot;</span>, LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置session超时时间（分钟）</span></span><br><span class="line">        session.setMaxInactiveInterval(<span class="number">30</span> * <span class="number">60</span>); <span class="comment">// 30分钟</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/home&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/profile&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">profile</span><span class="params">(HttpSession session, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 从session获取数据</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;currentUser&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;profile&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/logout&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">logout</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// 销毁session</span></span><br><span class="line">        session.invalidate();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-实际应用示例"><a href="#6-实际应用示例" class="headerlink" title="6. 实际应用示例"></a>6. 实际应用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PracticalExample</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/submitOrder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">submitOrder</span><span class="params">(Order order, </span></span><br><span class="line"><span class="params">                            HttpSession session,</span></span><br><span class="line"><span class="params">                            RedirectAttributes redirectAttributes)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. 从session获取用户</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;currentUser&quot;</span>);</span><br><span class="line">        order.setUserId(user.getId());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 2. 业务处理</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            orderService.create(order);</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;订单创建成功&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            redirectAttributes.addFlashAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;创建失败：&quot;</span> + e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 3. 重定向到结果页</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;redirect:/order/result&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/export&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportData</span><span class="params">(String type, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">// 设置响应</span></span><br><span class="line">        response.setContentType(<span class="string">&quot;application/vnd.ms-excel&quot;</span>);</span><br><span class="line">        response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=data.xlsx&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 导出逻辑</span></span><br><span class="line">        excelService.export(data, response.getOutputStream());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-3-自定义对象参数自动封装"><a href="#8-3-自定义对象参数自动封装" class="headerlink" title="8.3 自定义对象参数自动封装"></a>8.3 自定义对象参数自动封装</h2><h3 id="1-基本介绍"><a href="#1-基本介绍" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h3><ul><li><strong>自动封装</strong>：SpringBoot支持将请求参数自动封装到自定义对象</li><li><strong>类型转换</strong>：自动完成数据类型转换与格式化</li><li><strong>级联封装</strong>：支持对象属性的嵌套封装</li></ul><h3 id="2-基本使用"><a href="#2-基本使用" class="headerlink" title="2. 基本使用"></a>2. 基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 用户实体</span></span><br><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Date birthDate;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Controller 使用</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 自动封装对象参数</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// SpringBoot自动将请求参数封装到User对象</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户: &quot;</span> + user.getName() + <span class="string">&quot;, 年龄: &quot;</span> + user.getAge();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /user?name=张三&amp;age=25&amp;email=zhangsan@example.com&amp;birthDate=2023-01-01</span><br></pre></td></tr></table></figure><h3 id="3-级联封装（嵌套对象）"><a href="#3-级联封装（嵌套对象）" class="headerlink" title="3. 级联封装（嵌套对象）"></a>3. 级联封装（嵌套对象）</h3><p><strong>嵌套对象定义</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 地址类</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String street;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用户类（包含地址）</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> Address address;  <span class="comment">// 嵌套对象</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>级联封装使用</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/userWithAddress&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUserWithAddress</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 自动级联封装</span></span><br><span class="line">        <span class="keyword">return</span> user.getName() + <span class="string">&quot; 住在 &quot;</span> + user.getAddress().getCity();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/userWithAddress?</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">李四&amp;</span></span><br><span class="line"><span class="attr">age</span>=<span class="string">30&amp;</span></span><br><span class="line"><span class="attr">address.province</span>=<span class="string">广东&amp;</span></span><br><span class="line"><span class="attr">address.city</span>=<span class="string">深圳&amp;</span></span><br><span class="line"><span class="attr">address.street</span>=<span class="string">科技园</span></span><br></pre></td></tr></table></figure><h3 id="4-列表和数组封装"><a href="#4-列表和数组封装" class="headerlink" title="4. 列表和数组封装"></a>4. 列表和数组封装</h3><p><strong>支持集合类型</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Date</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; hobbies;     <span class="comment">// 列表</span></span><br><span class="line">    <span class="keyword">private</span> String[] skills;          <span class="comment">// 数组</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/userWithList&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">userWithList</span><span class="params">(User user)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> user.getName() + <span class="string">&quot; 有 &quot;</span> + user.getHobbies().size() + <span class="string">&quot; 个爱好&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/userWithList?</span></span><br><span class="line"><span class="attr">name</span>=<span class="string">王五&amp;</span></span><br><span class="line"><span class="attr">hobbies</span>=<span class="string">读书&amp;</span></span><br><span class="line"><span class="attr">hobbies</span>=<span class="string">游泳&amp;</span></span><br><span class="line"><span class="attr">hobbies</span>=<span class="string">编程&amp;</span></span><br><span class="line"><span class="attr">skills</span>=<span class="string">Java&amp;</span></span><br><span class="line"><span class="attr">skills</span>=<span class="string">Spring</span></span><br></pre></td></tr></table></figure><h3 id="5-实际应用示例"><a href="#5-实际应用示例" class="headerlink" title="5. 实际应用示例"></a>5. 实际应用示例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 订单相关实体</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal amount;</span><br><span class="line">    <span class="keyword">private</span> List&lt;OrderItem&gt; items;  <span class="comment">// 订单项列表</span></span><br><span class="line">    <span class="keyword">private</span> User user;              <span class="comment">// 用户信息</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String productName;</span><br><span class="line">    <span class="keyword">private</span> Integer quantity;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/createOrder&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createOrder</span><span class="params">(Order order)</span> &#123;</span><br><span class="line">        <span class="comment">// 自动封装复杂对象结构</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;订单创建成功: &quot;</span> + order.getOrderNo() + </span><br><span class="line">               <span class="string">&quot;, 金额: &quot;</span> + order.getAmount();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">POST</span> <span class="string">/createOrder?</span></span><br><span class="line"><span class="attr">orderNo</span>=<span class="string">ORD001&amp;</span></span><br><span class="line"><span class="attr">amount</span>=<span class="string">299.99&amp;</span></span><br><span class="line"><span class="attr">user.name</span>=<span class="string">张三&amp;</span></span><br><span class="line"><span class="attr">items[0].productName</span>=<span class="string">手机&amp;</span></span><br><span class="line"><span class="attr">items[0].quantity</span>=<span class="string">1&amp;</span></span><br><span class="line"><span class="attr">items[0].price</span>=<span class="string">2999&amp;</span></span><br><span class="line"><span class="attr">items[1].productName</span>=<span class="string">耳机&amp;</span></span><br><span class="line"><span class="attr">items[1].quantity</span>=<span class="string">2&amp;</span></span><br><span class="line"><span class="attr">items[1].price</span>=<span class="string">199</span></span><br></pre></td></tr></table></figure><h1 id="9-自定义转换器"><a href="#9-自定义转换器" class="headerlink" title="9 自定义转换器"></a>9 自定义转换器</h1><h2 id="1-基本介绍-1"><a href="#1-基本介绍-1" class="headerlink" title="1. 基本介绍"></a>1. 基本介绍</h2><p><strong>核心概念</strong></p><ul><li><strong>内置转换器</strong>：SpringBoot 使用内置转换器将请求数据封装成对象</li><li><strong>自定义转换器</strong>：支持开发自定义转换器处理特殊数据类型</li><li><strong>调试查看</strong>：在 debug 时可以看到内置转换器的工作过程</li></ul><h2 id="2-内置转换器示例"><a href="#2-内置转换器示例" class="headerlink" title="2. 内置转换器示例"></a>2. 内置转换器示例</h2><p><strong>自动类型转换</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// SpringBoot 内置转换器自动处理类型转换</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">test</span><span class="params">(</span></span><br><span class="line"><span class="params">        Integer id,           // String → Integer</span></span><br><span class="line"><span class="params">        Boolean status,       // String → Boolean  </span></span><br><span class="line"><span class="params">        Date createTime,      // String → Date</span></span><br><span class="line"><span class="params">        BigDecimal amount     // String → BigDecimal</span></span><br><span class="line"><span class="params">    )</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;ID: &quot;</span> + id + <span class="string">&quot;, Status: &quot;</span> + status;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /test?id=123&amp;status=true&amp;createTime=2023-01-01&amp;amount=99.99</span><br></pre></td></tr></table></figure><h2 id="3-自定义转换器场景"><a href="#3-自定义转换器场景" class="headerlink" title="3. 自定义转换器场景"></a>3. 自定义转换器场景</h2><p><strong>需要自定义的情况</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 场景1：特殊格式字符串转换</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tags;  <span class="comment">// 需要将 &quot;java,spring,boot&quot; 转换为 List</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 场景2：自定义对象转换  </span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Coordinate</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Double x;</span><br><span class="line">    <span class="keyword">private</span> Double y;</span><br><span class="line">    <span class="comment">// 需要将 &quot;10.5,20.3&quot; 转换为 Coordinate 对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-实现自定义转换器"><a href="#4-实现自定义转换器" class="headerlink" title="4. 实现自定义转换器"></a>4. 实现自定义转换器</h2><h4 id="方式1：Converter-接口"><a href="#方式1：Converter-接口" class="headerlink" title="方式1：Converter 接口"></a><strong>方式1：Converter 接口</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 字符串到List的转换器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToListConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, List&lt;String&gt;&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span> || source.trim().isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将 &quot;java,spring,boot&quot; 转换为 List</span></span><br><span class="line">        <span class="keyword">return</span> Arrays.stream(source.split(<span class="string">&quot;,&quot;</span>))</span><br><span class="line">                    .map(String::trim)</span><br><span class="line">                    .collect(Collectors.toList());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 字符串到坐标对象的转换器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToCoordinateConverter</span> <span class="keyword">implements</span> <span class="title class_">Converter</span>&lt;String, Coordinate&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Coordinate <span class="title function_">convert</span><span class="params">(String source)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (source == <span class="literal">null</span> || !source.contains(<span class="string">&quot;,&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] parts = source.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="type">Coordinate</span> <span class="variable">coord</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Coordinate</span>();</span><br><span class="line">        coord.setX(Double.parseDouble(parts[<span class="number">0</span>].trim()));</span><br><span class="line">        coord.setY(Double.parseDouble(parts[<span class="number">1</span>].trim()));</span><br><span class="line">        <span class="keyword">return</span> coord;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方式2：使用配置类注册"><a href="#方式2：使用配置类注册" class="headerlink" title="方式2：使用配置类注册"></a>方式2：使用配置类注册</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addFormatters</span><span class="params">(FormatterRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">// 注册自定义转换器</span></span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToListConverter</span>());</span><br><span class="line">        registry.addConverter(<span class="keyword">new</span> <span class="title class_">StringToCoordinateConverter</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-使用自定义转换器"><a href="#5-使用自定义转换器" class="headerlink" title="5. 使用自定义转换器"></a>5. 使用自定义转换器</h2><p><strong>在Controller中使用</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomConverterController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用自定义转换器</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/user&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// SpringBoot会自动使用 StringToListConverter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户: &quot;</span> + user.getName() + <span class="string">&quot;, 标签: &quot;</span> + user.getTags();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/point&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getPoint</span><span class="params">(Coordinate coord)</span> &#123;</span><br><span class="line">        <span class="comment">// 自动使用 StringToCoordinateConverter</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;坐标: (&quot;</span> + coord.getX() + <span class="string">&quot;, &quot;</span> + coord.getY() + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实体类定义</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;String&gt; tags;  <span class="comment">// 自动转换 &quot;java,spring&quot; → List</span></span><br><span class="line">    <span class="keyword">private</span> Coordinate location; <span class="comment">// 自动转换 &quot;10.5,20.3&quot; → Coordinate</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter/setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>请求示例</strong>：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /user?</span><br><span class="line">name=张三&amp;</span><br><span class="line">tags=java,spring,boot&amp;</span><br><span class="line">location=116.40,39.90</span><br></pre></td></tr></table></figure><h2 id="6-调试查看转换器"><a href="#6-调试查看转换器" class="headerlink" title="6. 调试查看转换器"></a>6. 调试查看转换器</h2><p><strong>调试方法</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DebugController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(&quot;/debug&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">debug</span><span class="params">(<span class="meta">@RequestParam</span> String data, WebDataBinder binder)</span> &#123;</span><br><span class="line">        <span class="comment">// 在debug时可以查看binder中的转换服务</span></span><br><span class="line">        <span class="comment">// 查看 ConversionService 中的注册的转换器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;转换器数量: &quot;</span> + binder.getConversionService());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;调试信息&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="10-拦截器-HandlerInterceptor"><a href="#10-拦截器-HandlerInterceptor" class="headerlink" title="10 拦截器-HandlerInterceptor"></a>10 拦截器-HandlerInterceptor</h1><h2 id="10-1-基本介绍"><a href="#10-1-基本介绍" class="headerlink" title="10.1 基本介绍"></a>10.1 基本介绍</h2><p>在 Spring Boot 项目中， 拦截器是开发中常用手段，要来做登陆验证、性能检查、日志记录等。</p><h2 id="10-2-拦截器应用实例"><a href="#10-2-拦截器应用实例" class="headerlink" title="10.2 拦截器应用实例"></a>10.2 拦截器应用实例</h2><p>需求: 使用拦截器防止用户非法登录, 使用拦截器就不需要在每个方法验证了</p><p>浏览器输入 : <a href="http://localhost:8080/manage.html">http://localhost:8080/manage.html</a> , 如果用户没有登录，则返回登录界面.</p><p>代码实现：</p><p>创建 com&#x2F;wzb&#x2F;usersys&#x2F;interceptor&#x2F;LoginInterceptor.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 目标方法执行之前*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestURI</span> <span class="operator">=</span> request.getRequestURI();</span><br><span class="line">        log.info(<span class="string">&quot;preHandle 拦截的请求路径是&#123;&#125;&quot;</span>, requestURI);</span><br><span class="line">        <span class="comment">//登录检查逻辑</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">loginAdmin</span> <span class="operator">=</span> session.getAttribute(<span class="string">&quot;loginAdmin&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (loginAdmin != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//放行</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//拦截</span></span><br><span class="line">        request.setAttribute(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;错误/重新登录&quot;</span>);</span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/&quot;</span>).forward(request, response);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 目标方法执行完成以后*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;postHandle 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 页面渲染以后*/</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="line"><span class="params">                                Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        log.info(<span class="string">&quot;afterCompletion 执行&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 com&#x2F;wzb&#x2F;usersys&#x2F;config&#x2F;WebConfig.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 这里实现 Spring-Boot 定制功能, 加入自己的配置</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有请求</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/images/**&quot;</span>); <span class="comment">//放行的请求, 可以根据需要增加&#125;</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>注册拦截器, 依然可以使用如下方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="comment">/*implements WebMvcConfigurer*/</span> &#123;</span><br><span class="line">    <span class="comment">//将我们的拦截器, 注入到容器中</span></span><br><span class="line">    <span class="comment">//@Override</span></span><br><span class="line">    <span class="comment">//public void addInterceptors(InterceptorRegistry registry) &#123;</span></span><br><span class="line">    <span class="comment">// System.out.println(&quot;addInterceptors...&quot;);</span></span><br><span class="line">    <span class="comment">// //加入我们的拦截器</span></span><br><span class="line">    <span class="comment">// registry.addInterceptor(new LoginInterceptor())</span></span><br><span class="line">    <span class="comment">// .addPathPatterns(&quot;/**&quot;) //拦截所有请求</span></span><br><span class="line">    <span class="comment">// .excludePathPatterns(&quot;/&quot;,&quot;/login&quot;,&quot;/images/**&quot;);//</span></span><br><span class="line">    <span class="comment">//&#125;</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebMvcConfigurer <span class="title function_">webMvcConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">WebMvcConfigurer</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;addInterceptors...~~~~:):)&quot;</span>);</span><br><span class="line">                <span class="comment">//加入我们的拦截器</span></span><br><span class="line">                registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                    .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有请求.excludePathPatterns(&quot;/&quot;, &quot;/login&quot;, &quot;/images/**&quot;);//</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="11-文件上传"><a href="#11-文件上传" class="headerlink" title="11 文件上传"></a>11 文件上传</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;#&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/upload&#125;&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span>用户名:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    电 邮:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    年 龄:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    职 位:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;job&quot;</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    头 像:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;header&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">    宠 物:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width:150px&quot;</span> <span class="attr">name</span>=<span class="string">&quot;photos&quot;</span> <span class="attr">multiple</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;注册&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span> <span class="attr">value</span>=<span class="string">&quot;重新填写&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>进行文件上传时要将enctype&#x3D;”multipart&#x2F;form-data”写成这样</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UploadController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/upload.html&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">uploadPage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* MultipartFile 自动封装上传过来的文件</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestParam(&quot;email&quot;)</span> String email, <span class="meta">@RequestParam(&quot;name&quot;)</span>String name, <span class="meta">@RequestParam(&quot;age&quot;)</span> Integer age, <span class="meta">@RequestParam(&quot;job&quot;)</span></span></span><br><span class="line"><span class="params">                         String job, <span class="meta">@RequestPart(&quot;header&quot;)</span> MultipartFile header, <span class="meta">@RequestPart(&quot;photos&quot;)</span> MultipartFile[] photos)</span> throwsIOException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;上传的信息：email=&#123;&#125;，name=&#123;&#125;，age=&#123;&#125;, job=&#123;&#125;, header=&#123;&#125;，photos=&#123;&#125;&quot;</span>, email, name, age, job, header.getSize(), photos.length);</span><br><span class="line">        <span class="comment">// 也 可 以 自 己 动 态 的 创 建 上 传 文 件 目 录 , 来存放文件, 比如在resources/static/images/upload/</span></span><br><span class="line">        <span class="comment">// String path = ResourceUtils.getURL(&quot;classpath:&quot;).getPath();</span></span><br><span class="line">        <span class="comment">// File file = new File(path + &quot;static/images/upload/&quot;);</span></span><br><span class="line">        <span class="comment">// if (!file.exists()) file.mkdirs();</span></span><br><span class="line">        <span class="keyword">if</span> (!header.isEmpty()) &#123;</span><br><span class="line">            <span class="comment">//保存到文件服务器或者 OSS 服务器//需要先创建好d:\\temp_upload 目录String originalFilename = header.getOriginalFilename();</span></span><br><span class="line">            <span class="comment">//方式 1: 指定某个目录存放上传文件</span></span><br><span class="line">            header.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\temp_upload\\&quot;</span> + originalFilename));</span><br><span class="line">            <span class="comment">//方式 2: 动态的创建文件存放文件</span></span><br><span class="line">            <span class="comment">//header.transferTo(new File(file.getAbsolutePath() + &quot;/&quot; + originalFilename));</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (photos.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (MultipartFile photo : photos) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!photo.isEmpty()) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> photo.getOriginalFilename();</span><br><span class="line">                    photo.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(<span class="string">&quot;d:\\temp_upload\\&quot;</span> + originalFilename));</span><br><span class="line">                    <span class="comment">//photo.transferTo(new File(file.getAbsolutePath() + &quot;/&quot; +originalFilename));</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;上传成功~~&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>修改 WebConfig 配置，放行&#x2F;upload.html 和 &#x2F;upload 请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">//拦截所有请求</span></span><br><span class="line">            .excludePathPatterns(<span class="string">&quot;/&quot;</span>, <span class="string">&quot;/login&quot;</span>, <span class="string">&quot;/images/**&quot;</span>, <span class="string">&quot;/upload.html&quot;</span>, <span class="string">&quot;/upload&quot;</span>); <span class="comment">//放行的请求, 可以根据需要增加&#125;</span></span><br></pre></td></tr></table></figure><p>在配置文件中修改文件上传配置参数，max-file-size 单个文件大小, max-request-size 一次请求最大上传大小(多个文件.)</p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">50MB</span></span><br></pre></td></tr></table></figure><h1 id="12-异常处理"><a href="#12-异常处理" class="headerlink" title="12 异常处理"></a>12 异常处理</h1><h2 id="12-1-基本介绍"><a href="#12-1-基本介绍" class="headerlink" title="12.1 基本介绍"></a>12.1 基本介绍</h2><p>默认情况下，Spring Boot 提供&#x2F;error 处理所有错误的映射</p><p>对于机器客户端，它将生成 JSON 响应，其中包含错误，HTTP 状态和异常消息的详细信息。对于浏览器客户端，响应一个”whitelabel”错误视图，以HTML 格式呈现相同的数据</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C12.jpg"></p><h2 id="12-2-拦截器VS过滤器"><a href="#12-2-拦截器VS过滤器" class="headerlink" title="12.2 拦截器VS过滤器"></a>12.2 拦截器VS过滤器</h2><p>使用范围不同：</p><ul><li>过滤器 实现的是 javax.servlet.Filter 接口，而这个接口是在Servlet 规范中定义的，也就是说过滤器 Filter 的使用要依赖于 Tomcat 等容器，Filter 只能在web 程序中使用</li><li>拦截器(Interceptor) 它是一个 Spring 组件，并由 Spring 容器管理，并不依赖Tomcat 等容器，是可以单独使用的。不仅能应用在 web 程序中，也可以用于Application 等程序中</li></ul><p>过滤器 和 拦截器的触发时机也不同，看下边这张图</p><p><img src="springboot%E5%AD%A6%E4%B9%A0%5C13.jpg"></p><ul><li>过滤器 Filter 是在请求进入容器后, 但在进入 servlet 之前进行预处理, 请求结束是在servlet 处理完以后 </li><li>拦截器 Interceptor 是在请求进入 servlet 后, 在进入 Controller 之前进行预处理的, Controller 中渲染了对应的视图之后请求结束</li></ul><p><strong>过滤器不会处理请求转发, 拦截器会处理请求转发</strong>，这里举例说明：</p><p><strong>场景设定</strong></p><p>假设我们有一个请求：</p><ol><li>用户访问 <code>/start</code>。</li><li>Controller 处理 <code>/start</code>，然后<strong>转发</strong>到 <code>/forward</code>。</li><li>Controller 处理 <code>/forward</code>，返回结果。</li></ol><p>我们将创建一个<strong>过滤器</strong>和一个<strong>拦截器</strong>，并观察它们在这个流程中的行为。</p><hr><ol><li><strong>创建过滤器 (Filter)</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span> <span class="comment">// 过滤所有请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器 Filter: 进入 &quot;</span> + req.getRequestURI() + <span class="string">&quot; | 请求类型: &quot;</span> + getDispatcherType(req));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 执行后续过滤器或Servlet</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器 Filter: 退出 &quot;</span> + req.getRequestURI());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getDispatcherType</span><span class="params">(HttpServletRequest request)</span> &#123;</span><br><span class="line">        <span class="comment">// 获取请求的派发类型</span></span><br><span class="line">        <span class="keyword">return</span> request.getDispatcherType().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>创建拦截器 (Interceptor)</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.HandlerInterceptor;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.ModelAndView;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器 Interceptor: preHandle  &quot;</span> + request.getRequestURI() + <span class="string">&quot; | 请求类型: &quot;</span> + request.getDispatcherType());</span><br><span class="line">        <span class="comment">// 在Controller方法执行前调用</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 继续流程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器 Interceptor: postHandle &quot;</span> + request.getRequestURI() + <span class="string">&quot; | 请求类型: &quot;</span> + request.getDispatcherType());</span><br><span class="line">        <span class="comment">// 在Controller方法执行后，视图渲染前调用</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;拦截器 Interceptor: afterCompletion &quot;</span> + request.getRequestURI() + <span class="string">&quot; | 请求类型: &quot;</span> + request.getDispatcherType());</span><br><span class="line">        <span class="comment">// 在整个请求完成后调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过配置类注册这个拦截器：</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.InterceptorRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyInterceptor myInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(myInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>); <span class="comment">// 拦截所有路径</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>创建控制器 (Controller)</strong></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/start&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- Controller: 处理 /start，准备转发到 /forward ---&quot;</span>);</span><br><span class="line">        <span class="comment">// 关键：这里是服务器端转发</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;forward:/forward&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/forward&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">forward</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;--- Controller: 处理 /forward ---&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>; <span class="comment">// 返回一个视图名</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><ol start="4"><li><strong>运行并访问 <code>/start</code> 查看控制台输出</strong></li></ol><p>当你访问 <code>http://localhost:8080/start</code> 时，控制台的输出顺序和内容将非常说明问题：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 原始请求 /start 进入</span></span><br><span class="line">过滤器 Filter: 进入 /start | 请求类型: REQUEST</span><br><span class="line">拦截器 Interceptor: preHandle  /start | 请求类型: REQUEST</span><br><span class="line"></span><br><span class="line">--- Controller: 处理 /start，准备转发到 /forward ---</span><br><span class="line"></span><br><span class="line">拦截器 Interceptor: postHandle /start | 请求类型: REQUEST</span><br><span class="line">拦截器 Interceptor: afterCompletion /start | 请求类型: REQUEST</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 注意！过滤器没有为转发的请求再次执行！</span></span><br><span class="line"><span class="comment">// 但拦截器处理了！</span></span><br><span class="line">拦截器 Interceptor: preHandle  /forward | 请求类型: FORWARD</span><br><span class="line"></span><br><span class="line">--- Controller: 处理 /forward ---</span><br><span class="line"></span><br><span class="line">拦截器 Interceptor: postHandle /forward | 请求类型: FORWARD</span><br><span class="line">拦截器 Interceptor: afterCompletion /forward | 请求类型: FORWARD</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 最终，原始请求的过滤器退出</span></span><br><span class="line">过滤器 Filter: 退出 /start</span><br></pre></td></tr></table></figure><p><strong>关键分析</strong></p><p>从输出结果可以清晰地看到：</p><ol><li><strong>过滤器 (Filter)</strong>：<ul><li>只记录了 <strong><code>进入 /start</code></strong> 和 <strong><code>退出 /start</code></strong>。</li><li>对于从 <code>/start</code> 转发到 <code>/forward</code> 的这次<strong>内部请求，过滤器完全忽略了</strong>。它只处理了一次 <code>DispatcherType.REQUEST</code>。</li></ul></li><li><strong>拦截器 (Interceptor)</strong>：<ul><li>处理了两次请求：<ul><li>第一次：<code>/start</code>，请求类型为 <strong><code>REQUEST</code></strong>。</li><li>第二次：<code>/forward</code>，请求类型为 <strong><code>FORWARD</code></strong>。</li></ul></li><li>它完整地参与了Spring MVC的整个内部流程，包括请求转发。</li></ul></li></ol><p><strong>如何让过滤器也处理转发？</strong></p><p>如果你需要让过滤器也能处理转发请求，可以在注册过滤器时进行配置。在Spring Boot中，使用 <code>FilterRegistrationBean</code>：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FilterConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;MyFilter&gt; <span class="title function_">myFilterRegistration</span><span class="params">()</span> &#123;</span><br><span class="line">        FilterRegistrationBean&lt;MyFilter&gt; registration = <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registration.setFilter(<span class="keyword">new</span> <span class="title class_">MyFilter</span>());</span><br><span class="line">        registration.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置派发类型，使其也处理转发</span></span><br><span class="line">        registration.setDispatcherTypes(DispatcherType.REQUEST, DispatcherType.FORWARD);</span><br><span class="line">        <span class="keyword">return</span> registration;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样配置后，过滤器也会对 <code>FORWARD</code> 类型的请求生效。</p><h2 id="12-3-自定义异常页面"><a href="#12-3-自定义异常页面" class="headerlink" title="12.3 自定义异常页面"></a>12.3 自定义异常页面</h2><p><strong>核心概念</strong><br>当应用程序抛出异常时，Spring Boot 默认会提供一个名为 “whitelabel error page” 的错误页面。要替换它，我们需要处理 &#x2F;error 路径。Spring Boot 自动将异常信息绑定到请求中，供错误页面使用。</p><h3 id="方法一：静态自定义错误页面（最简单）"><a href="#方法一：静态自定义错误页面（最简单）" class="headerlink" title="方法一：静态自定义错误页面（最简单）"></a>方法一：静态自定义错误页面（最简单）</h3><p>这种方式通过创建静态 HTML 页面来定义错误页面，适用于简单的、静态的错误提示。</p><p>在 src&#x2F;main&#x2F;resources&#x2F;static&#x2F;error&#x2F; 目录下创建对应的错误状态码 HTML 文件。</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">src/main/resources/</span></span><br><span class="line"><span class="attr">└──</span> <span class="string">static/</span></span><br><span class="line">    <span class="attr">└──</span> <span class="string">error/</span></span><br><span class="line">        <span class="attr">├──</span> <span class="string">404.html</span></span><br><span class="line">        <span class="attr">├──</span> <span class="string">500.html</span></span><br><span class="line">        <span class="attr">└──</span> <span class="string">5xx.html  # 通配符，匹配所有5xx错误</span></span><br></pre></td></tr></table></figure><h3 id="方法二：动态模板错误页面（推荐）"><a href="#方法二：动态模板错误页面（推荐）" class="headerlink" title="方法二：动态模板错误页面（推荐）"></a>方法二：动态模板错误页面（推荐）</h3><p>使用模板引擎（Thymeleaf、FreeMarker等）创建动态错误页面，可以显示异常信息。</p><p>使用 Thymeleaf 示例<br>在 src&#x2F;main&#x2F;resources&#x2F;templates&#x2F;error&#x2F; 目录下创建模板文件：</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">src/main/resources/</span></span><br><span class="line"><span class="attr">└──</span> <span class="string">templates/</span></span><br><span class="line">    <span class="attr">└──</span> <span class="string">error/</span></span><br><span class="line">        <span class="attr">├──</span> <span class="string">404.html</span></span><br><span class="line">        <span class="attr">├──</span> <span class="string">500.html</span></span><br><span class="line">        <span class="attr">└──</span> <span class="string">error.html  # 通用错误页面</span></span><br></pre></td></tr></table></figure><h3 id="方法三：使用-ControllerAdvice-全局异常处理（最灵活）"><a href="#方法三：使用-ControllerAdvice-全局异常处理（最灵活）" class="headerlink" title="方法三：使用 @ControllerAdvice 全局异常处理（最灵活）"></a>方法三：使用 @ControllerAdvice 全局异常处理（最灵活）</h3><p>这种方式可以完全控制异常处理逻辑，适合复杂的业务场景。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ControllerAdvice;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ExceptionHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.NoHandlerFoundException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理404异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(NoHandlerFoundException.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.NOT_FOUND)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleNotFound</span><span class="params">(HttpServletRequest request, Exception ex, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;页面不存在&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;path&quot;</span>, request.getRequestURL());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;timestamp&quot;</span>, java.time.LocalDateTime.now());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error/404&quot;</span>; <span class="comment">// 返回自定义的404页面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理所有其他异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="meta">@ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleAllExceptions</span><span class="params">(HttpServletRequest request, Exception ex, Model model)</span> &#123;</span><br><span class="line">        model.addAttribute(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;服务器内部错误&quot;</span>);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;message&quot;</span>, ex.getMessage());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;path&quot;</span>, request.getRequestURL());</span><br><span class="line">        model.addAttribute(<span class="string">&quot;timestamp&quot;</span>, java.time.LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 开发环境显示详细错误</span></span><br><span class="line">        <span class="keyword">if</span> (isDevEnvironment()) &#123;</span><br><span class="line">            model.addAttribute(<span class="string">&quot;exception&quot;</span>, ex.getClass().getName());</span><br><span class="line">            model.addAttribute(<span class="string">&quot;trace&quot;</span>, getStackTrace(ex));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error/500&quot;</span>; <span class="comment">// 返回自定义的500页面</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">isDevEnvironment</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 这里可以检查当前环境是否是开发环境</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>; <span class="comment">// 实际应用中应该从配置中读取</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String <span class="title function_">getStackTrace</span><span class="params">(Exception ex)</span> &#123;</span><br><span class="line">        java.io.<span class="type">StringWriter</span> <span class="variable">sw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.StringWriter();</span><br><span class="line">        java.io.<span class="type">PrintWriter</span> <span class="variable">pw</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.PrintWriter(sw);</span><br><span class="line">        ex.printStackTrace(pw);</span><br><span class="line">        <span class="keyword">return</span> sw.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为了让404异常能被捕获，需要在 <code>application.properties</code> 中配置：</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启用抛出NoHandlerFoundException而不是返回404页面</span></span><br><span class="line"><span class="attr">spring.mvc.throw-exception-if-no-handler-found</span>=<span class="string">true</span></span><br><span class="line"><span class="comment"># 禁止静态资源映射，确保能抛出异常</span></span><br><span class="line"><span class="attr">spring.web.resources.add-mappings</span>=<span class="string">false</span></span><br></pre></td></tr></table></figure><hr><h3 id="方法四：自定义-ErrorController（完全控制）"><a href="#方法四：自定义-ErrorController（完全控制）" class="headerlink" title="方法四：自定义 ErrorController（完全控制）"></a>方法四：自定义 ErrorController（完全控制）</h3><p>实现自定义的 <code>ErrorController</code> 来完全控制错误处理流程。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.error.ErrorController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.ui.Model;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyCustomErrorController</span> <span class="keyword">implements</span> <span class="title class_">ErrorController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/error&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handleError</span><span class="params">(HttpServletRequest request, Model model)</span> &#123;</span><br><span class="line">        <span class="comment">// 从请求中获取错误信息</span></span><br><span class="line">        <span class="type">Integer</span> <span class="variable">statusCode</span> <span class="operator">=</span> (Integer) request.getAttribute(<span class="string">&quot;javax.servlet.error.status_code&quot;</span>);</span><br><span class="line">        <span class="type">Exception</span> <span class="variable">exception</span> <span class="operator">=</span> (Exception) request.getAttribute(<span class="string">&quot;javax.servlet.error.exception&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">requestUri</span> <span class="operator">=</span> (String) request.getAttribute(<span class="string">&quot;javax.servlet.error.request_uri&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (requestUri == <span class="literal">null</span>) &#123;</span><br><span class="line">            requestUri = <span class="string">&quot;Unknown&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        model.addAttribute(<span class="string">&quot;statusCode&quot;</span>, statusCode);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;requestUri&quot;</span>, requestUri);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;exception&quot;</span>, exception);</span><br><span class="line">        model.addAttribute(<span class="string">&quot;timestamp&quot;</span>, java.time.LocalDateTime.now());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 根据状态码返回不同的页面</span></span><br><span class="line">        <span class="keyword">if</span> (statusCode == <span class="number">404</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error/404&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (statusCode == <span class="number">500</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error/500&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error/error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个方法是过时的，但在新版本中仍然需要实现</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getErrorPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;/error&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="13-注入-Servlet、Filter、Listener"><a href="#13-注入-Servlet、Filter、Listener" class="headerlink" title="13 注入 Servlet、Filter、Listener"></a>13 注入 Servlet、Filter、Listener</h1><h2 id="13-1-使用-Spring-Boot-注解（最推荐）"><a href="#13-1-使用-Spring-Boot-注解（最推荐）" class="headerlink" title="13.1 使用 Spring Boot 注解（最推荐）"></a>13.1 使用 Spring Boot 注解（最推荐）</h2><p>这是 Spring Boot 中最简单、最常用的方式。</p><h3 id="1-注入-Servlet"><a href="#1-注入-Servlet" class="headerlink" title="1. 注入 Servlet"></a>1. 注入 Servlet</h3><p><strong>注意注入的原生 Servlet 不会被 Spring-Boot 拦截器拦截</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebServlet(&quot;/custom-servlet&quot;)</span>  <span class="comment">// 指定Servlet的访问路径</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&lt;h1&gt;这是自定义Servlet&lt;/h1&gt;&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;&lt;p&gt;当前时间: &quot;</span> + <span class="keyword">new</span> <span class="title class_">java</span>.util.Date() + <span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-注入-Filter"><a href="#2-注入-Filter" class="headerlink" title="2. 注入 Filter"></a>2. 注入 Filter</h3><p><strong>过滤器配置的 urlPatterns 也会经过 Spring-Boot 拦截器</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebFilter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span>  <span class="comment">// 过滤所有请求</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义过滤器初始化&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, </span></span><br><span class="line"><span class="params">                        FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">HttpServletRequest</span> <span class="variable">req</span> <span class="operator">=</span> (HttpServletRequest) request;</span><br><span class="line">        <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器: 请求 &quot;</span> + req.getRequestURI());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 继续执行过滤器链</span></span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        </span><br><span class="line">        <span class="type">long</span> <span class="variable">endTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;过滤器: 响应 &quot;</span> + req.getRequestURI() + <span class="string">&quot; 耗时: &quot;</span> + (endTime - startTime) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义过滤器销毁&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-注入-Listener"><a href="#3-注入-Listener" class="headerlink" title="3. 注入 Listener"></a>3. 注入 Listener</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=== 应用程序启动 ===&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;ServletContext 初始化完成&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 可以在这里进行应用启动时的初始化工作</span></span><br><span class="line">        sce.getServletContext().setAttribute(<span class="string">&quot;appStartTime&quot;</span>, System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;=== 应用程序关闭 ===&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="type">Long</span> <span class="variable">startTime</span> <span class="operator">=</span> (Long) sce.getServletContext().getAttribute(<span class="string">&quot;appStartTime&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (startTime != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">runTime</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">            System.out.println(<span class="string">&quot;应用运行时间: &quot;</span> + runTime + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-启用注解扫描"><a href="#4-启用注解扫描" class="headerlink" title="4. 启用注解扫描"></a>4. 启用注解扫描</h3><p><strong>关键步骤</strong>：在 Spring Boot 主类上添加 <code>@ServletComponentScan</code> 注解：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line">import org.springframework.boot.web.servlet.ServletComponentScan;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">@ServletComponentScan  // 扫描 @WebServlet, @WebFilter, @WebListener 注解</span><br><span class="line">public class Application &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="13-2-使用-Java-Config-配置（灵活配置）"><a href="#13-2-使用-Java-Config-配置（灵活配置）" class="headerlink" title="13.2 使用 Java Config 配置（灵活配置）"></a>13.2 使用 Java Config 配置（灵活配置）</h2><p>这种方式更适合需要动态配置的场景。</p><h3 id="1-先创建-Servlet、Filter、Listener-类"><a href="#1-先创建-Servlet、Filter、Listener-类" class="headerlink" title="1. 先创建 Servlet、Filter、Listener 类"></a>1. 先创建 Servlet、Filter、Listener 类</h3><p><strong>CustomServlet.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;Java Config 配置的 Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CustomFilter.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, </span></span><br><span class="line"><span class="params">                        FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Config Filter 执行前&quot;</span>);</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Config Filter 执行后&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CustomListener.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomListener</span> <span class="keyword">implements</span> <span class="title class_">ServletContextListener</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Config Listener: 应用启动&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Java Config Listener: 应用关闭&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-使用配置类注册"><a href="#2-使用配置类注册" class="headerlink" title="2. 使用配置类注册"></a>2. 使用配置类注册</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.FilterRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletListenerRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.web.servlet.ServletRegistrationBean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 Servlet</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean&lt;CustomServlet&gt; <span class="title function_">customServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">CustomServlet</span>(), </span><br><span class="line">            <span class="string">&quot;/java-config-servlet&quot;</span>  <span class="comment">// 映射路径</span></span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 Filter</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> FilterRegistrationBean&lt;CustomFilter&gt; <span class="title function_">customFilter</span><span class="params">()</span> &#123;</span><br><span class="line">        FilterRegistrationBean&lt;CustomFilter&gt; registrationBean = </span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;();</span><br><span class="line">        registrationBean.setFilter(<span class="keyword">new</span> <span class="title class_">CustomFilter</span>());</span><br><span class="line">        registrationBean.addUrlPatterns(<span class="string">&quot;/*&quot;</span>);  <span class="comment">// 过滤所有请求</span></span><br><span class="line">        registrationBean.setOrder(<span class="number">1</span>);  <span class="comment">// 设置过滤器执行顺序</span></span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 注册 Listener</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean&lt;CustomListener&gt; <span class="title function_">customListener</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ServletListenerRegistrationBean</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">CustomListener</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="13-3-请求-Servlet-时，为什么不会到达拦截器"><a href="#13-3-请求-Servlet-时，为什么不会到达拦截器" class="headerlink" title="13.3 请求 Servlet 时，为什么不会到达拦截器"></a>13.3 请求 Servlet 时，为什么不会到达拦截器</h2><h3 id="1-请求处理流程的差异"><a href="#1-请求处理流程的差异" class="headerlink" title="1. 请求处理流程的差异"></a>1. 请求处理流程的差异</h3><p>首先，我们需要理解一个关键点：<strong>在Spring Boot应用中，实际上存在两套并行的请求处理机制</strong>。</p><p><strong>对于Spring MVC控制器（Controller）的请求：</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">HTTP</span> <span class="string">Request → Servlet Container → DispatcherServlet → 拦截器 → 控制器方法</span></span><br></pre></td></tr></table></figure><p><strong>对于直接映射的Servlet的请求：</strong></p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">HTTP</span> <span class="string">Request → Servlet Container → 自定义Servlet</span></span><br></pre></td></tr></table></figure><h3 id="2-详细原因分析"><a href="#2-详细原因分析" class="headerlink" title="2. 详细原因分析"></a>2. 详细原因分析</h3><h4 id="①-DispatcherServlet-的角色定位"><a href="#①-DispatcherServlet-的角色定位" class="headerlink" title="① DispatcherServlet 的角色定位"></a>① DispatcherServlet 的角色定位</h4><ul><li><code>DispatcherServlet</code> 是Spring MVC的<strong>前端控制器</strong>，它是所有Spring MVC请求的<strong>统一入口</strong></li><li>但它<strong>不是</strong>整个Web应用的唯一Servlet</li><li>在Spring Boot中，<code>DispatcherServlet</code> 默认被映射到根路径 <code>/</code>，但<strong>它也会处理更具体的路径匹配</strong></li></ul><h4 id="②-Servlet-容器的处理机制"><a href="#②-Servlet-容器的处理机制" class="headerlink" title="② Servlet 容器的处理机制"></a>② Servlet 容器的处理机制</h4><p>当请求到达时，Servlet容器会根据URL路径选择最精确匹配的Servlet：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 情况1：请求匹配到自定义Servlet的路径</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/api/servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CustomServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="comment">// 请求直接到达这里，绕过DispatcherServlet</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 情况2：请求匹配到Controller的路径  </span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/api/controller&quot;)</span> <span class="comment">// 请求会经过DispatcherServlet → 拦截器 → 这里</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;controller response&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="③-拦截器的工作范围"><a href="#③-拦截器的工作范围" class="headerlink" title="③ 拦截器的工作范围"></a>③ 拦截器的工作范围</h4><p>Spring的拦截器是<strong>绑定在<code>DispatcherServlet</code>的处理流程中</strong>的：</p><p>java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">MyInterceptor</span>())</span><br><span class="line">                .addPathPatterns(<span class="string">&quot;/**&quot;</span>) <span class="comment">// 这个模式只对DispatcherServlet处理的请求有效</span></span><br><span class="line">                .excludePathPatterns(<span class="string">&quot;/api/servlet&quot;</span>); <span class="comment">// 排除Servlet路径实际上是不必要的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-验证实验"><a href="#3-验证实验" class="headerlink" title="3. 验证实验"></a>3. 验证实验</h3><p>我们可以通过代码来验证这个现象：</p><p><strong>自定义Servlet</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebServlet(&quot;/direct-servlet&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DirectServlet</span> <span class="keyword">extends</span> <span class="title class_">HttpServlet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;✅ 直接访问Servlet - 请求到达&quot;</span>);</span><br><span class="line">        resp.getWriter().println(<span class="string">&quot;Response from Direct Servlet&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>拦截器</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DemoInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, </span></span><br><span class="line"><span class="params">                           HttpServletResponse response, Object handler)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;🔍 拦截器执行: &quot;</span> + request.getRequestURI());</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>测试结果</strong></p><ul><li><p>访问 <code>http://localhost:8080/direct-servlet</code>：</p><p>text</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">✅ 直接访问Servlet - 请求到达</span><br><span class="line">// 控制台没有拦截器输出</span><br></pre></td></tr></table></figure></li><li><p>访问Controller路径时：</p><p>text</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">🔍 拦截器执行: /api/controller</span><br><span class="line">✅ Controller处理请求</span><br></pre></td></tr></table></figure></li></ul><h3 id="4-解决方案"><a href="#4-解决方案" class="headerlink" title="4. 解决方案"></a>4. 解决方案</h3><p>如果希望Servlet请求也经过Spring的拦截器，有几种方式：</p><h4 id="方案1：使用Filter代替拦截器"><a href="#方案1：使用Filter代替拦截器" class="headerlink" title="方案1：使用Filter代替拦截器"></a>方案1：使用Filter代替拦截器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, </span></span><br><span class="line"><span class="params">                        FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter处理: &quot;</span> + ((HttpServletRequest)request).getRequestURI());</span><br><span class="line">        chain.doFilter(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="方案2：通过DispatcherServlet转发到Servlet"><a href="#方案2：通过DispatcherServlet转发到Servlet" class="headerlink" title="方案2：通过DispatcherServlet转发到Servlet"></a>方案2：通过DispatcherServlet转发到Servlet</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RouterController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/router-to-servlet&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">routeToServlet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">            <span class="keyword">throws</span> ServletException, IOException &#123;</span><br><span class="line">        <span class="comment">// 这样会经过拦截器</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">&quot;/direct-servlet&quot;</span>).forward(request, response);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="14-数据库操作"><a href="#14-数据库操作" class="headerlink" title="14 数据库操作"></a>14 数据库操作</h1><h2 id="14-1-JDBC-HikariDataSource"><a href="#14-1-JDBC-HikariDataSource" class="headerlink" title="14.1 JDBC+HikariDataSource"></a>14.1 JDBC+HikariDataSource</h2><p>演示 Spring Boot 如何通过 jdbc+HikariDataSource 完成对Mysql 操作说明: HikariDataSource : 目前市面上非常优秀的数据源, 是 springboot2 默认数据源</p><p>进 行 数 据 库 开 发 ， 在 pom.xml 引 入 data-jdbc starter</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="BlogkFile\source_posts\springboot学习\14.jpg"></p><p>Spring Boot 不知道项目要操作 Mysql 还是 Oracle ， 需要在pom.xml 指定导入数据库驱动， 并指定对应版本</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1. 引入操作 mysql 的驱动</span></span><br><span class="line"><span class="comment">2. 这个驱动版本要和你实际操作的 mysql 版本对应</span></span><br><span class="line"><span class="comment">3. 我们 spring-boot mysql 区别仲裁版本是&lt;mysql.version&gt;8.0.26&lt;/mysql.version&gt;,我们安装的是 mysql5 ,因此重新指定 mysql 驱动版本</span></span><br><span class="line"><span class="comment">4. 这个 mysql 驱动版本也可以在 pom.xml properties 指定</span></span><br><span class="line"><span class="comment">&lt;properties&gt;</span></span><br><span class="line"><span class="comment">&lt;mysql.version&gt;5.1.49&lt;/mysql.version&gt;</span></span><br><span class="line"><span class="comment">&lt;/properties&gt;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.49<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>在 application.yml 配置操作数据源的信息</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">5MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">50MB</span></span><br><span class="line"><span class="comment">#数据源配置</span></span><br><span class="line">   <span class="attr">datasource:</span></span><br><span class="line"><span class="comment">#说明： 如果没有使用 useSSL=true, 会报红警告</span></span><br><span class="line"> <span class="attr">url:</span></span><br><span class="line">        <span class="string">jdbc:mysql://localhost:3306/spring_boot?useUnicode=true&amp;characterEncoding=utf-8&amp;useSSL=true</span></span><br><span class="line">     <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">     <span class="attr">password:</span> <span class="string">hsp</span></span><br><span class="line">     <span class="attr">driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></span><br></pre></td></tr></table></figure><p><strong>创建</strong> 04_springboot_usersys\src\main\java\com\wzb\usersys\bean\Furn.java</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Furn</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String maker;</span><br><span class="line">    <span class="keyword">private</span> BigDecimal price;</span><br><span class="line">    <span class="keyword">private</span> Integer sales;</span><br><span class="line">    <span class="keyword">private</span> Integer stock;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">imgPath</span> <span class="operator">=</span> <span class="string">&quot;assets/images/product-image/1.jpg&quot;</span>;</span><br></pre></td></tr></table></figure><p>● test 目录下的 com&#x2F;hspedu&#x2F;usersys&#x2F;ApplicationTests.java , 完成测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">contextLoads</span><span class="params">()</span> &#123;</span><br><span class="line">        BeanPropertyRowMapper&lt;Furn&gt; rowMapper =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Furn.class);</span><br><span class="line">        List&lt;Furn&gt; furns = jdbcTemplate.query(<span class="string">&quot;select * from furn&quot;</span>, rowMapper);</span><br><span class="line">        <span class="keyword">for</span> (Furn furn : furns) &#123;</span><br><span class="line">            System.out.println(furn);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(jdbcTemplate.getDataSource().getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="14-2-整合Druid到springboot"><a href="#14-2-整合Druid到springboot" class="headerlink" title="14.2 整合Druid到springboot"></a>14.2 整合Druid到springboot</h2><h3 id="14-2-1-基本介绍"><a href="#14-2-1-基本介绍" class="headerlink" title="14.2.1 基本介绍"></a>14.2.1 基本介绍</h3><p>Druid： 性能优秀，Druid 提供性能卓越的连接池功能外【Java 基础】，还集成了SQL监控，黑名单拦截等功能，强大的监控特性，通过 Druid 提供的监控功能，可以清楚知道连接池和 SQL 的工作情况</p><h3 id="14-2-2-自定义整合"><a href="#14-2-2-自定义整合" class="headerlink" title="14.2.2 自定义整合"></a>14.2.2 自定义整合</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入 druid 依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>创建 com&#x2F;wzb&#x2F;usersys&#x2F;config&#x2F;DruidDataSourceConfig.java 配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDataSourceConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 默 认 的 自 动 配 置 是 判 断 容 器中没有才会配</span></span><br><span class="line"><span class="meta">@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 默认的数据源配置是 <span class="doctag">@ConditionalOnMissingBean</span>(DataSource.class)</span></span><br><span class="line"><span class="comment">* 2. 也就是当容器中没有 DataSource 组件时，才会注入，如果我们这里配置了DataSource, 就会使用我们配置的数据源</span></span><br><span class="line"><span class="comment">* 3. &quot;spring.datasource&quot; 会将 druid 数据源的配置绑定到application.yml, 就不需要setXxx</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">        <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        <span class="comment">// &quot;spring.datasource&quot; 会将 druid 数据源的配置绑定到application.yml, 就不需要setXxx</span></span><br><span class="line">        <span class="comment">// druidDataSource.setUrl();</span></span><br><span class="line">        <span class="comment">// druidDataSource.setUsername();</span></span><br><span class="line">        <span class="comment">// druidDataSource.setPassword();</span></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-Durid-监控功能-SQL-监控"><a href="#1-Durid-监控功能-SQL-监控" class="headerlink" title="1 Durid 监控功能-SQL 监控"></a>1 Durid 监控功能-SQL 监控</h4><p>修改 com&#x2F;wzb&#x2F;usersys&#x2F;config&#x2F;DruidDataSourceConfig.java , 增加druid 监控功能</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidDataSourceConfig</span> &#123;</span><br><span class="line">    <span class="comment">// 默 认 的 自 动 配 置 是 判 断 容 器中没有才会配@ConditionalOnMissingBean(DataSource.class)</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 1. 默认的数据源配置是 <span class="doctag">@ConditionalOnMissingBean</span>(DataSource.class)</span></span><br><span class="line"><span class="comment">* 2. 也就是当容器中没有 DataSource 组件时，才会注入，如果我们这里配置了DataSource, 就会使用我们配置的数据源</span></span><br><span class="line"><span class="comment">* 3. &quot;spring.datasource&quot; 会将 druid 数据源的配置绑定到application.yml, 就不需要setXxx</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource&quot;)</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">druidDataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        <span class="comment">// &quot;spring.datasource&quot; 会将 druid 数据源的配置绑定到application.yml, 就不需要setXxx</span></span><br><span class="line">        <span class="comment">// druidDataSource.setUrl();</span></span><br><span class="line">        <span class="comment">// druidDataSource.setUsername();</span></span><br><span class="line">        <span class="comment">// druidDataSource.setPassword();</span></span><br><span class="line">        druidDataSource.setFilters(<span class="string">&quot;stat&quot;</span>)<span class="comment">// sql监控功能</span></span><br><span class="line">        <span class="keyword">return</span> druidDataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">* 配置 druid 的监控页功能</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> ServletRegistrationBean <span class="title function_">statViewServlet</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">StatViewServlet</span> <span class="variable">statViewServlet</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StatViewServlet</span>();</span><br><span class="line">        ServletRegistrationBean&lt;StatViewServlet&gt; registrationBean =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">ServletRegistrationBean</span>&lt;&gt;(statViewServlet, <span class="string">&quot;/druid/*&quot;</span>);</span><br><span class="line">        <span class="comment">//配置登录监控页面用户名和密码</span></span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginUsername&quot;</span>,<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        registrationBean.addInitParameter(<span class="string">&quot;loginPassword&quot;</span>,<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> registrationBean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建 com&#x2F;wzb&#x2F;usersys&#x2F;controller&#x2F;DruidSqlController.java，模拟操作 DB 的请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidSqlController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    JdbcTemplate jdbcTemplate;</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/sql&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Furn&gt; <span class="title function_">crudDB</span><span class="params">()</span>&#123;</span><br><span class="line">        BeanPropertyRowMapper&lt;Furn&gt; rowMapper =</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Furn.class);</span><br><span class="line">        List&lt;Furn&gt; furns = jdbcTemplate.query(<span class="string">&quot;select * from furn&quot;</span>, rowMapper);</span><br><span class="line">        <span class="keyword">for</span> (Furn furn : furns) &#123;</span><br><span class="line">            System.out.println(furn);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> furns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>SQL 监控数据-测试页面</p><p><img src="BlogkFile\source_posts\springboot学习\15.jpg"></p><h4 id="2-Durid-监控功能-Web-关联监控"><a href="#2-Durid-监控功能-Web-关联监控" class="headerlink" title="2 Durid 监控功能-Web 关联监控"></a>2 Durid 监控功能-Web 关联监控</h4><p>修 改 com&#x2F;wzb&#x2F;usersys&#x2F;config&#x2F;DruidDataSourceConfig.java ，注入&#x2F; 增加 WebStatFilter 用于采集 web-jdbc 关联监控的数据</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* WebStatFilter 用于采集 web-jdbc 关联监控的数据。</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> FilterRegistrationBean <span class="title function_">webStatFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">WebStatFilter</span> <span class="variable">webStatFilter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WebStatFilter</span>();</span><br><span class="line">    FilterRegistrationBean&lt;WebStatFilter&gt; filterRegistrationBean =</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FilterRegistrationBean</span>&lt;&gt;(webStatFilter);</span><br><span class="line">    <span class="comment">//默认对所有 URL 请求监控</span></span><br><span class="line">    filterRegistrationBean.setUrlPatterns(Arrays.asList(<span class="string">&quot;/*&quot;</span>));</span><br><span class="line">    <span class="comment">//排除 URL</span></span><br><span class="line">    filterRegistrationBean.addInitParameter</span><br><span class="line">        (<span class="string">&quot;exclusions&quot;</span>, <span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3-Durid-监控功能-SQL-防火墙"><a href="#3-Durid-监控功能-SQL-防火墙" class="headerlink" title="3 Durid 监控功能-SQL 防火墙"></a>3 Durid 监控功能-SQL 防火墙</h4><p>修改 com&#x2F;wzb&#x2F;usersys&#x2F;config&#x2F;DruidDataSourceConfig.java ，加入防火墙监控</p><p><img src="BlogkFile\source_posts\springboot学习\16.jpg"></p><h4 id="4-Durid-监控功能-其他监控"><a href="#4-Durid-监控功能-其他监控" class="headerlink" title="4 Durid 监控功能-其他监控"></a>4 Durid 监控功能-其他监控</h4><p>注册了 StatViewServlet 后，其他监控功能就已经包含了</p><p>✅ SQL监控 - SQL执行统计</p><p>✅ URL监控 - 请求URL统计</p><p>✅ Session监控 - Session管理</p><p>✅ Spring监控 - 方法执行监控（需额外配置）</p><p>✅ JSON API - 监控数据接口</p><p>✅ 基本监控信息 - JVM、系统信息等</p><h2 id="14-3-Druid-Spring-Boot-Starter"><a href="#14-3-Druid-Spring-Boot-Starter" class="headerlink" title="14.3 Druid Spring Boot Starter"></a>14.3 Druid Spring Boot Starter</h2><p>使用 <code>Druid Spring Boot Starter</code> 可以通过 YAML 配置更简洁地实现监控功能。</p><p><strong>基础依赖配置</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>application.yml 完整配置</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/your_db?useUnicode=true&amp;characterEncoding=utf8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">your_username</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">your_password</span></span><br><span class="line">    <span class="comment"># Druid 连接池配置</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 初始化大小、最小、最大</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接</span></span><br><span class="line">      <span class="attr">time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间</span></span><br><span class="line">      <span class="attr">min-evictable-idle-time-millis:</span> <span class="number">300000</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 监控配置</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/*</span></span><br><span class="line">        <span class="attr">exclusions:</span> <span class="string">&quot;*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*&quot;</span></span><br><span class="line">        </span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">        <span class="attr">reset-enable:</span> <span class="literal">false</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># Session监控配置</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">session-stat-enable:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">session-stat-max-count:</span> <span class="number">1000</span></span><br><span class="line">        </span><br><span class="line">      <span class="attr">filter:</span></span><br><span class="line">        <span class="attr">stat:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">log-slow-sql:</span> <span class="literal">true</span></span><br><span class="line">          <span class="attr">slow-sql-millis:</span> <span class="number">2000</span></span><br><span class="line">        <span class="attr">wall:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">config:</span></span><br><span class="line">          <span class="attr">enabled:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><strong>可选：自定义配置类</strong></p><p>如果需要进行更复杂的配置，可以添加配置类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DruidConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConfigurationProperties(&quot;spring.datasource.druid&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> DruidDataSourceBuilder.create().build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>访问监控页面</strong></p><p>配置完成后，访问：<code>http://localhost:8080/druid</code></p><ul><li><strong>用户名</strong>: admin</li><li><strong>密码</strong>: 123456</li></ul><h1 id="15-springboot整合Mybatis"><a href="#15-springboot整合Mybatis" class="headerlink" title="15 springboot整合Mybatis"></a>15 springboot整合Mybatis</h1><h2 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p><strong>Maven 配置</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- MyBatis Spring Boot Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Druid 连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-配置文件"><a href="#2-配置文件" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h2><p><strong>application.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_demo?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 连接池配置</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 监控配置</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MyBatis 配置</span></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="comment"># mapper.xml 文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath:mapper/*.xml</span></span><br><span class="line">  <span class="comment"># 实体类包路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 开启驼峰命名转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 日志实现</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br></pre></td></tr></table></figure><h2 id="3-实体类"><a href="#3-实体类" class="headerlink" title="3. 实体类"></a>3. 实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 构造方法、getter、setter、toString</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">()</span> &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String username, String email, Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.username = username;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter 和 setter 方法...</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, username=&#x27;&quot;</span> + username + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, createTime=&quot;</span> + createTime +</span><br><span class="line">                <span class="string">&quot;, updateTime=&quot;</span> + updateTime +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Mapper-接口"><a href="#4-Mapper-接口" class="headerlink" title="4. Mapper 接口"></a>4. Mapper 接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据ID查询用户</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    User <span class="title function_">findById</span><span class="params">(Long id)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 插入用户</span></span><br><span class="line">    <span class="meta">@Insert(&quot;INSERT INTO user(username, email, age, create_time, update_time) &quot; +</span></span><br><span class="line"><span class="meta">            &quot;VALUES(#&#123;username&#125;, #&#123;email&#125;, #&#123;age&#125;, NOW(), NOW())&quot;)</span></span><br><span class="line">    <span class="meta">@Options(useGeneratedKeys = true, keyProperty = &quot;id&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="meta">@Update(&quot;UPDATE user SET username=#&#123;username&#125;, email=#&#123;email&#125;, age=#&#123;age&#125;, update_time=NOW() &quot; +</span></span><br><span class="line"><span class="meta">            &quot;WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除用户</span></span><br><span class="line">    <span class="meta">@Delete(&quot;DELETE FROM user WHERE id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Long id)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据用户名查询</span></span><br><span class="line">    <span class="meta">@Select(&quot;SELECT * FROM user WHERE username LIKE CONCAT(&#x27;%&#x27;, #&#123;username&#125;, &#x27;%&#x27;)&quot;)</span></span><br><span class="line">    List&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-XML-Mapper-方式（可选）"><a href="#5-XML-Mapper-方式（可选）" class="headerlink" title="5. XML Mapper 方式（可选）"></a>5. XML Mapper 方式（可选）</h2><p><strong>resources&#x2F;mapper&#x2F;UserMapper.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span> <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span> </span></span><br><span class="line"><span class="meta">    <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 结果映射 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;UserResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;age&quot;</span> <span class="attr">column</span>=<span class="string">&quot;age&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 复杂查询示例 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;findByCondition&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;map&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;UserResultMap&quot;</span>&gt;</span></span><br><span class="line">        SELECT * FROM user </span><br><span class="line">        WHERE 1=1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;username != null and username != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND username LIKE CONCAT(&#x27;%&#x27;, #&#123;username&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;email != null and email != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            AND email LIKE CONCAT(&#x27;%&#x27;, #&#123;email&#125;, &#x27;%&#x27;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;minAge != null&quot;</span>&gt;</span></span><br><span class="line">            AND age &gt;= #&#123;minAge&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;maxAge != null&quot;</span>&gt;</span></span><br><span class="line">            AND age &lt;= #&#123;maxAge&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        ORDER BY create_time DESC</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 批量插入 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;batchInsert&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        INSERT INTO user(username, email, age, create_time, update_time) </span><br><span class="line">        VALUES</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">item</span>=<span class="string">&quot;user&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;user.username&#125;, #&#123;user.email&#125;, #&#123;user.age&#125;, NOW(), NOW())</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="6-Service-层"><a href="#6-Service-层" class="headerlink" title="6. Service 层"></a>6. Service 层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserMapper userMapper;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">findById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (user.getId() == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> userMapper.insert(user);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> userMapper.update(user);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">findByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userMapper.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Controller-层"><a href="#7-Controller-层" class="headerlink" title="7. Controller 层"></a>7. Controller 层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户创建成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        user.setId(id);</span><br><span class="line">        userService.save(user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户更新成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        userService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;用户删除成功&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">searchUsers</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.findByUsername(username);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="16-springboot整合Mybatis-Plus"><a href="#16-springboot整合Mybatis-Plus" class="headerlink" title="16 springboot整合Mybatis-Plus"></a>16 springboot整合Mybatis-Plus</h1><h2 id="1-添加依赖-1"><a href="#1-添加依赖-1" class="headerlink" title="1. 添加依赖"></a>1. 添加依赖</h2><p><strong>Maven 配置</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Spring Boot Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- MyBatis-Plus Starter --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.33<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Druid 连接池 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.18<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- Lombok 简化实体类 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-配置文件-1"><a href="#2-配置文件-1" class="headerlink" title="2. 配置文件"></a>2. 配置文件</h2><p><strong>application.yml</strong></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/mybatis_plus_demo?useUnicode=true&amp;characterEncoding=utf8&amp;zeroDateTimeBehavior=convertToNull&amp;useSSL=true&amp;serverTimezone=GMT%2B8</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">druid:</span></span><br><span class="line">      <span class="comment"># 连接池配置</span></span><br><span class="line">      <span class="attr">initial-size:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">min-idle:</span> <span class="number">5</span></span><br><span class="line">      <span class="attr">max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="attr">max-wait:</span> <span class="number">60000</span></span><br><span class="line">      </span><br><span class="line">      <span class="comment"># 监控配置</span></span><br><span class="line">      <span class="attr">stat-view-servlet:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">url-pattern:</span> <span class="string">/druid/*</span></span><br><span class="line">        <span class="attr">login-username:</span> <span class="string">admin</span></span><br><span class="line">        <span class="attr">login-password:</span> <span class="number">123456</span></span><br><span class="line">      <span class="attr">web-stat-filter:</span></span><br><span class="line">        <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MyBatis-Plus 配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment"># mapper.xml 文件位置</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/**/*.xml</span></span><br><span class="line">  <span class="comment"># 实体类包路径</span></span><br><span class="line">  <span class="attr">type-aliases-package:</span> <span class="string">com.example.entity</span></span><br><span class="line">  <span class="attr">configuration:</span></span><br><span class="line">    <span class="comment"># 开启驼峰命名转换</span></span><br><span class="line">    <span class="attr">map-underscore-to-camel-case:</span> <span class="literal">true</span></span><br><span class="line">    <span class="comment"># 日志实现</span></span><br><span class="line">    <span class="attr">log-impl:</span> <span class="string">org.apache.ibatis.logging.stdout.StdOutImpl</span></span><br><span class="line">  <span class="attr">global-config:</span></span><br><span class="line">    <span class="attr">db-config:</span></span><br><span class="line">      <span class="comment"># 主键类型 AUTO:数据库自增 NONE:未设置 INPUT:手动输入 ASSIGN_ID:雪花算法 ASSIGN_UUID:UUID</span></span><br><span class="line">      <span class="attr">id-type:</span> <span class="string">ASSIGN_ID</span></span><br><span class="line">      <span class="comment"># 逻辑删除字段名</span></span><br><span class="line">      <span class="attr">logic-delete-field:</span> <span class="string">deleted</span></span><br><span class="line">      <span class="comment"># 逻辑删除值</span></span><br><span class="line">      <span class="attr">logic-delete-value:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">logic-not-delete-value:</span> <span class="number">0</span></span><br><span class="line">      <span class="comment"># 表名策略</span></span><br><span class="line">      <span class="attr">table-prefix:</span> <span class="string">t_</span></span><br></pre></td></tr></table></figure><h2 id="3-实体类-1"><a href="#3-实体类-1" class="headerlink" title="3. 实体类"></a>3. 实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName(&quot;user&quot;)</span>  <span class="comment">// 指定表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableId(type = IdType.ASSIGN_ID)</span>  <span class="comment">// 雪花算法生成ID</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT)</span>  <span class="comment">// 插入时自动填充</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableField(fill = FieldFill.INSERT_UPDATE)</span>  <span class="comment">// 插入和更新时自动填充</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime updateTime;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@TableLogic</span>  <span class="comment">// 逻辑删除注解</span></span><br><span class="line">    <span class="keyword">private</span> Integer deleted;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-Mapper-接口-1"><a href="#4-Mapper-接口-1" class="headerlink" title="4. Mapper 接口"></a>4. Mapper 接口</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> <span class="keyword">extends</span> <span class="title class_">BaseMapper</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 继承 BaseMapper 就拥有了基本的 CRUD 方法</span></span><br><span class="line">    <span class="comment">// 无需编写 XML，也可以自定义方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="5-Service-层"><a href="#5-Service-层" class="headerlink" title="5. Service 层"></a>5. Service 层</h2><p><strong>接口</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;User&gt; &#123;</span><br><span class="line">    <span class="comment">// 可以自定义业务方法</span></span><br><span class="line">    User <span class="title function_">getByUsername</span><span class="params">(String username)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">updateEmail</span><span class="params">(Long id, String email)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>实现类</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title class_">ServiceImpl</span>&lt;UserMapper, User&gt; <span class="keyword">implements</span> <span class="title class_">UserService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getByUsername</span><span class="params">(String username)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.eq(User::getUsername, username);</span><br><span class="line">        <span class="keyword">return</span> baseMapper.selectOne(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">updateEmail</span><span class="params">(Long id, String email)</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setId(id);</span><br><span class="line">        user.setEmail(email);</span><br><span class="line">        <span class="keyword">return</span> updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="6-自动填充处理器"><a href="#6-自动填充处理器" class="headerlink" title="6. 自动填充处理器"></a>6. 自动填充处理器</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyMetaObjectHandler</span> <span class="keyword">implements</span> <span class="title class_">MetaObjectHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;createTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">        <span class="built_in">this</span>.strictInsertFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateFill</span><span class="params">(MetaObject metaObject)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.strictUpdateFill(metaObject, <span class="string">&quot;updateTime&quot;</span>, LocalDateTime.class, LocalDateTime.now());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7-Controller-层-1"><a href="#7-Controller-层-1" class="headerlink" title="7. Controller 层"></a>7. Controller 层</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/api/users&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 查询所有用户</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getAllUsers</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.list();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 根据ID查询用户</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">getUserById</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 新增用户</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">createUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.save(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 更新用户</span></span><br><span class="line">    <span class="meta">@PutMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">updateUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, <span class="meta">@RequestBody</span> User user)</span> &#123;</span><br><span class="line">        user.setId(id);</span><br><span class="line">        <span class="keyword">return</span> userService.updateById(user);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 删除用户（逻辑删除）</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">deleteUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> userService.removeById(id);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 分页查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/page&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> IPage&lt;User&gt; <span class="title function_">getUserPage</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;1&quot;)</span> Integer current,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(defaultValue = &quot;10&quot;)</span> Integer size)</span> &#123;</span><br><span class="line">        Page&lt;User&gt; page = <span class="keyword">new</span> <span class="title class_">Page</span>&lt;&gt;(current, size);</span><br><span class="line">        <span class="keyword">return</span> userService.page(page);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 条件查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">searchUsers</span><span class="params">(<span class="meta">@RequestParam</span> String username)</span> &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        wrapper.like(User::getUsername, username)</span><br><span class="line">               .orderByDesc(User::getCreateTime);</span><br><span class="line">        <span class="keyword">return</span> userService.list(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 复杂条件查询</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/condition&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;User&gt; <span class="title function_">getUsersByCondition</span><span class="params">(</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> String username,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> Integer minAge,</span></span><br><span class="line"><span class="params">            <span class="meta">@RequestParam(required = false)</span> Integer maxAge)</span> &#123;</span><br><span class="line">        </span><br><span class="line">        QueryWrapper&lt;User&gt; wrapper = <span class="keyword">new</span> <span class="title class_">QueryWrapper</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span> (username != <span class="literal">null</span> &amp;&amp; !username.isEmpty()) &#123;</span><br><span class="line">            wrapper.like(<span class="string">&quot;username&quot;</span>, username);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (minAge != <span class="literal">null</span>) &#123;</span><br><span class="line">            wrapper.ge(<span class="string">&quot;age&quot;</span>, minAge);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (maxAge != <span class="literal">null</span>) &#123;</span><br><span class="line">            wrapper.le(<span class="string">&quot;age&quot;</span>, maxAge);</span><br><span class="line">        &#125;</span><br><span class="line">        wrapper.orderByDesc(<span class="string">&quot;create_time&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> userService.list(wrapper);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="8-配置类（可选）"><a href="#8-配置类（可选）" class="headerlink" title="8. 配置类（可选）"></a>8. 配置类（可选）</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisPlusConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加分页插件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MybatisPlusInterceptor <span class="title function_">mybatisPlusInterceptor</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">MybatisPlusInterceptor</span> <span class="variable">interceptor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MybatisPlusInterceptor</span>();</span><br><span class="line">        interceptor.addInnerInterceptor(<span class="keyword">new</span> <span class="title class_">PaginationInnerInterceptor</span>(DbType.MYSQL));</span><br><span class="line">        <span class="keyword">return</span> interceptor;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="9-数据库表结构测试"><a href="#9-数据库表结构测试" class="headerlink" title="9. 数据库表结构测试"></a>9. 数据库表结构测试</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> mybatis_plus_demo;</span><br><span class="line"></span><br><span class="line">USE mybatis_plus_demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">    id <span class="type">BIGINT</span> <span class="keyword">PRIMARY KEY</span> COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">    username <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span> COMMENT <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">    email <span class="type">VARCHAR</span>(<span class="number">100</span>) COMMENT <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">    age <span class="type">INT</span> COMMENT <span class="string">&#x27;年龄&#x27;</span>,</span><br><span class="line">    create_time DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">    update_time DATETIME <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">    deleted TINYINT <span class="keyword">DEFAULT</span> <span class="number">0</span> COMMENT <span class="string">&#x27;逻辑删除 0:未删除 1:已删除&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 插入测试数据</span></span><br><span class="line"><span class="keyword">INSERT INTO</span> <span class="keyword">user</span> (id, username, email, age) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;zhangsan@example.com&#x27;</span>, <span class="number">25</span>),</span><br><span class="line">(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;lisi@example.com&#x27;</span>, <span class="number">30</span>),</span><br><span class="line">(<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;wangwu@example.com&#x27;</span>, <span class="number">28</span>);</span><br></pre></td></tr></table></figure><h2 id="10-测试接口"><a href="#10-测试接口" class="headerlink" title="10. 测试接口"></a>10. 测试接口</h2><p>启动应用后，可以测试以下接口：</p><ul><li><code>GET /api/users</code> - 查询所有用户</li><li><code>GET /api/users/1</code> - 根据ID查询用户</li><li><code>POST /api/users</code> - 新增用户</li><li><code>PUT /api/users/1</code> - 更新用户</li><li><code>DELETE /api/users/1</code> - 删除用户（逻辑删除）</li><li><code>GET /api/users/page?current=1&amp;size=10</code> - 分页查询</li><li><code>GET /api/users/search?username=张</code> - 条件查询</li><li><code>GET /api/users/condition?username=张&amp;minAge=20&amp;maxAge=30</code> - 复杂条件查询</li></ul><h2 id="MyBatis-Plus-特性"><a href="#MyBatis-Plus-特性" class="headerlink" title="MyBatis-Plus 特性"></a>MyBatis-Plus 特性</h2><ol><li><strong>无侵入</strong>：只做增强不做改变，引入它不会对现有工程产生影响</li><li><strong>强大的 CRUD</strong>：内置通用 Mapper、通用 Service，少量配置即可实现单表 CRUD</li><li><strong>支持 Lambda</strong>：通过 Lambda 表达式，方便的编写各类查询条件</li><li><strong>主键策略</strong>：支持多种主键策略，可自由配置</li><li><strong>分页插件</strong>：内置分页插件，基于 MyBatis 物理分页</li><li><strong>性能分析</strong>：支持 SQL 性能分析插件</li><li><strong>全局拦截</strong>：提供全表删除、更新操作智能分析阻断</li><li><strong>逻辑删除</strong>：内置逻辑删除功能</li></ol>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSM整合</title>
      <link href="/2024/06/02/SSM%E6%95%B4%E5%90%88/"/>
      <url>/2024/06/02/SSM%E6%95%B4%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="SSM整合"><a href="#SSM整合" class="headerlink" title="SSM整合"></a>SSM整合</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%80SSM%E6%95%B4%E5%90%88%E7%90%86%E8%A7%A3">一、SSM整合理解</a><ul><li><a href="#1-%E4%BB%80%E4%B9%88%E6%98%AFSSM%E6%95%B4%E5%90%88">1. 什么是SSM整合？</a></li><li><a href="#2-SSM%E6%95%B4%E5%90%88%E6%A0%B8%E5%BF%83%E7%90%86%E8%A7%A3%E4%BA%94%E8%BF%9E%E9%97%AE">2. SSM整合核心理解五连问！</a><ul><li><a href="#21-SSM%E6%95%B4%E5%90%88%E6%B6%89%E5%8F%8A%E5%87%A0%E4%B8%AAIoC%E5%AE%B9%E5%99%A8">2.1 SSM整合涉及几个IoC容器？</a></li><li><a href="#22-%E6%AF%8F%E4%B8%AAIoC%E5%AE%B9%E5%99%A8%E7%9B%9B%E6%94%BE%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6">2.2 每个IoC容器盛放哪些组件？</a></li><li><a href="#23-IoC%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E6%98%AF%E4%BB%80%E4%B9%88%E5%85%B3%E7%B3%BB">2.3 IoC容器之间是什么关系？</a></li><li><a href="#24-%E9%9C%80%E8%A6%81%E5%87%A0%E4%B8%AA%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E5%AF%B9%E5%BA%94IoC%E5%AE%B9%E5%99%A8%E5%85%B3%E7%B3%BB">2.4 需要几个配置文件和对应IoC容器关系？</a></li><li><a href="#25-IoC%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E6%96%B9%E5%BC%8F">2.5 IoC容器初始化方式？</a></li></ul></li></ul></li><li><a href="#%E4%BA%8CSSM%E6%95%B4%E5%90%88%E9%85%8D%E7%BD%AE%E5%AE%9E%E6%88%98">二、SSM整合配置实战</a><ul><li><a href="#1-%E4%BE%9D%E8%B5%96%E6%B7%BB%E5%8A%A0">1. 依赖添加</a></li><li><a href="#2-%E6%8E%A7%E5%88%B6%E5%B1%82%E9%85%8D%E7%BD%AE%E7%BC%96%E5%86%99SpringMVC%E6%95%B4%E5%90%88">2. 控制层配置编写(SpringMVC整合)</a></li><li><a href="#3-%E4%B8%9A%E5%8A%A1%E5%B1%82%E9%85%8D%E7%BD%AE%E7%BC%96%E5%86%99AOP--TX%E6%95%B4%E5%90%88">3. 业务层配置编写(AOP &#x2F; TX整合）</a></li><li><a href="#4-%E6%8C%81%E4%B9%85%E5%B1%82%E9%85%8D%E7%BD%AE%E7%BC%96%E5%86%99MyBatis%E6%95%B4%E5%90%88">4. 持久层配置编写(MyBatis整合)</a></li><li><a href="#5-%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E9%85%8D%E7%BD%AEwebxml">5. 容器初始化配置web.xml</a></li><li><a href="#6-%E6%95%B4%E5%90%88%E6%B5%8B%E8%AF%95">6. 整合测试</a></li></ul></li><li><a href="#%E4%B8%89%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BA%8F%E6%90%AD%E5%BB%BA%E5%92%8C%E8%BF%90%E8%A1%8C">三、前端程序搭建和运行</a><ul><li><a href="#1-%E6%A1%88%E4%BE%8B%E5%8A%9F%E8%83%BD%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90">1. 案例功能和接口分析</a><ul><li><a href="#11-%E6%A1%88%E4%BE%8B%E5%8A%9F%E8%83%BD%E9%A2%84%E8%A7%88">1.1 案例功能预览</a></li><li><a href="#12-%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90">1.2 接口分析</a></li></ul></li><li><a href="#2-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%AF%BC%E5%85%A5">2. 前端工程导入</a></li><li><a href="#3-%E5%90%AF%E5%8A%A8%E6%B5%8B%E8%AF%95">3. 启动测试</a></li></ul></li><li><a href="#%E5%9B%9B%E5%90%8E%E7%AB%AF%E7%A8%8B%E5%BA%8F%E5%AE%9E%E7%8E%B0%E5%92%8C%E6%B5%8B%E8%AF%95">四、后端程序实现和测试</a><ul><li><a href="#1--%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">1.  准备工作</a></li><li><a href="#2-%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0">2. 功能实现</a></li><li><a href="#3-%E5%89%8D%E5%90%8E%E8%81%94%E8%B0%83">3. 前后联调</a></li></ul></li><li><a href="#%E4%BA%94SSM%E6%8A%80%E6%9C%AF%E6%A0%88%E6%80%BB%E7%BB%93">五、SSM技术栈总结</a><ul><li><a href="#1-Spring%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93">1. Spring框架总结</a><ul><li><a href="#11-%E6%8A%80%E6%9C%AF%E7%82%B9%E6%80%BB%E7%BB%93">1.1 技术点总结</a></li><li><a href="#12-%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93">1.2 配置总结</a></li><li><a href="#13-%E6%B3%A8%E8%A7%A3%E6%80%BB%E7%BB%93">1.3 注解总结</a></li></ul></li><li><a href="#2-Spring-MVC-%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93">2. Spring MVC 框架总结</a><ul><li><a href="#21-%E6%8A%80%E6%9C%AF%E7%82%B9%E6%80%BB%E7%BB%93">2.1 技术点总结</a></li><li><a href="#22-%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93">2.2 配置总结</a></li><li><a href="#23-%E6%B3%A8%E8%A7%A3%E6%80%BB%E7%BB%93">2.3 注解总结</a></li></ul></li><li><a href="#3-MyBatis%E6%A1%86%E6%9E%B6%E6%80%BB%E7%BB%93">3. MyBatis框架总结</a><ul><li><a href="#31-%E6%8A%80%E6%9C%AF%E7%82%B9%E6%80%BB%E7%BB%93">3.1 技术点总结</a></li><li><a href="#32-%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93">3.2 配置总结</a></li><li><a href="#33-%E6%B3%A8%E8%A7%A3%E6%80%BB%E7%BB%93">3.3 注解总结</a></li></ul></li></ul></li></ul><h2 id="一、SSM整合理解"><a href="#一、SSM整合理解" class="headerlink" title="一、SSM整合理解"></a>一、SSM整合理解</h2><h3 id="1-什么是SSM整合？"><a href="#1-什么是SSM整合？" class="headerlink" title="1. 什么是SSM整合？"></a>1. 什么是SSM整合？</h3><p><strong>本质</strong>：Spring接管一切（将框架核心组件交给Spring进行IoC管理），代码更加简洁。</p><ul><li>SpringMVC管理web相关组件</li><li>Spring管理业务层、持久层、以及数据库相关（DataSource,MyBatis）的组件</li><li>SSM整合最终就是编写IoC配置文件</li></ul><h3 id="2-SSM整合核心理解五连问！"><a href="#2-SSM整合核心理解五连问！" class="headerlink" title="2. SSM整合核心理解五连问！"></a>2. SSM整合核心理解五连问！</h3><h4 id="2-1-SSM整合涉及几个IoC容器？"><a href="#2-1-SSM整合涉及几个IoC容器？" class="headerlink" title="2.1 SSM整合涉及几个IoC容器？"></a>2.1 SSM整合涉及几个IoC容器？</h4><p>我们提到过SpringMVC&#x2F;DispatcherServlet 加载 spring-mvc.xml，此时整个 Web 应用中只创建一个 IoC 容器。如果将Mybatis、配置声明式事务，全部在 spring-mvc.xml 配置文件中配置也是可以的。可是这样会导致配置文件太长，不容易维护。</p><p>通常情况下，SSM整合我们会创建两个IoC容器，分开管理SSM下的核心组件！</p><h4 id="2-2-每个IoC容器盛放哪些组件？"><a href="#2-2-每个IoC容器盛放哪些组件？" class="headerlink" title="2.2 每个IoC容器盛放哪些组件？"></a>2.2 每个IoC容器盛放哪些组件？</h4><table><thead><tr><th>容器名</th><th>创建类</th><th>盛放组件</th></tr></thead><tbody><tr><td>web容器</td><td>DispatcherServlet</td><td>web相关组件（controller,springmvc核心组件）</td></tr><tr><td>root容器</td><td>ContextLoaderListener</td><td>业务和持久层相关组件（service,aop,tx,dataSource,mybatis,mapper等）</td></tr></tbody></table><h4 id="2-3-IoC容器之间是什么关系？"><a href="#2-3-IoC容器之间是什么关系？" class="headerlink" title="2.3 IoC容器之间是什么关系？"></a>2.3 IoC容器之间是什么关系？</h4><p>结论：两个组件分别创建的 IOC 容器是<strong>父子</strong>关系。</p><ul><li>父容器：ContextLoaderListener 创建的 IOC 容器（root容器）</li><li>子容器：DispatcherServlet 创建的 IOC 容器（web容器）</li></ul><p>源码部分：</p><p>ContextLoaderListener将实例化root容器，存储到ServletContext:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Initialize Spring&#x27;s web application context for the given servlet context,</span></span><br><span class="line"><span class="comment"> * using the application context provided at construction time, or creating a new one</span></span><br><span class="line"><span class="comment"> * according to the &quot;&#123;<span class="doctag">@link</span> #CONTEXT_CLASS_PARAM contextClass&#125;&quot; and</span></span><br><span class="line"><span class="comment"> * &quot;&#123;<span class="doctag">@link</span> #CONFIG_LOCATION_PARAM contextConfigLocation&#125;&quot; context-params.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> servletContext current servlet context</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the new WebApplicationContext</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #ContextLoader(WebApplicationContext)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #CONTEXT_CLASS_PARAM</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> #CONFIG_LOCATION_PARAM</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">(ServletContext servletContext)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalStateException</span>(</span><br><span class="line">        <span class="string">&quot;Cannot initialize context because there is already a root application context present - &quot;</span> +</span><br><span class="line">        <span class="string">&quot;check whether you have multiple ContextLoader* definitions in your web.xml!&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  servletContext.log(<span class="string">&quot;Initializing Spring root WebApplicationContext&quot;</span>);</span><br><span class="line">  <span class="type">Log</span> <span class="variable">logger</span> <span class="operator">=</span> LogFactory.getLog(ContextLoader.class);</span><br><span class="line">  <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">    logger.info(<span class="string">&quot;Root WebApplicationContext: initialization started&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">long</span> <span class="variable">startTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// Store context in local instance variable, to guarantee that</span></span><br><span class="line">    <span class="comment">// it is available on ServletContext shutdown.</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.context == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="built_in">this</span>.context = createWebApplicationContext(servletContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.context <span class="keyword">instanceof</span> ConfigurableWebApplicationContext cwac &amp;&amp; !cwac.isActive()) &#123;</span><br><span class="line">      <span class="comment">// The context has not yet been refreshed -&gt; provide services such as</span></span><br><span class="line">      <span class="comment">// setting the parent context, setting the application context id, etc</span></span><br><span class="line">      <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// The context instance was injected without an explicit parent -&gt;</span></span><br><span class="line">        <span class="comment">// determine parent for root web application context, if any.</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">parent</span> <span class="operator">=</span> loadParentContext(servletContext);</span><br><span class="line">        cwac.setParent(parent);</span><br><span class="line">      &#125;</span><br><span class="line">      configureAndRefreshWebApplicationContext(cwac, servletContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将root容器存储到servletContext中</span></span><br><span class="line">    servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, <span class="built_in">this</span>.context);</span><br><span class="line"></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">ccl</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class="line">      currentContext = <span class="built_in">this</span>.context;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (ccl != <span class="literal">null</span>) &#123;</span><br><span class="line">      currentContextPerThread.put(ccl, <span class="built_in">this</span>.context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isInfoEnabled()) &#123;</span><br><span class="line">      <span class="type">long</span> <span class="variable">elapsedTime</span> <span class="operator">=</span> System.currentTimeMillis() - startTime;</span><br><span class="line">      logger.info(<span class="string">&quot;Root WebApplicationContext initialized in &quot;</span> + elapsedTime + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.context;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">catch</span> (RuntimeException | Error ex) &#123;</span><br><span class="line">    logger.error(<span class="string">&quot;Context initialization failed&quot;</span>, ex);</span><br><span class="line">    servletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class="line">    <span class="keyword">throw</span> ex;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DispatcherServlet读取root容器，并且设置为web容器的父容器：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">    Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">    <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">          <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">          <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">          <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">        (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">    wac.setEnvironment(getEnvironment());</span><br><span class="line">    <span class="comment">//将root容器取出，并设置为父容器</span></span><br><span class="line">    wac.setParent(parent);</span><br><span class="line">    <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">    <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">      wac.setConfigLocation(configLocation);</span><br><span class="line">    &#125;</span><br><span class="line">    configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> wac;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>容器访问流程：</p><p><img src="img114_NCIr6ftjXa.png"></p><p><img src="SSM%E6%95%B4%E5%90%88_m_4ZcyUS8E.png"></p><h4 id="2-4-需要几个配置文件和对应IoC容器关系？"><a href="#2-4-需要几个配置文件和对应IoC容器关系？" class="headerlink" title="2.4 需要几个配置文件和对应IoC容器关系？"></a>2.4 需要几个配置文件和对应IoC容器关系？</h4><p>文件的数量不是固定的，但是至少要两个，为了方便编写，我们可以三层架构每层对应一个配置文件，分别指定两个容器加载即可！</p><p>建议配置文件：</p><table><thead><tr><th>配置名</th><th>对应内容</th><th>对应容器</th></tr></thead><tbody><tr><td>spring-mvc.xml</td><td>controller,springmvc相关</td><td>web容器</td></tr><tr><td>spring-service.xml</td><td>service,aop,tx相关</td><td>root容器</td></tr><tr><td>spring-mapper.xml</td><td>mapper,datasource,mybatis相关</td><td>root容器</td></tr></tbody></table><h4 id="2-5-IoC容器初始化方式？"><a href="#2-5-IoC容器初始化方式？" class="headerlink" title="2.5 IoC容器初始化方式？"></a>2.5 IoC容器初始化方式？</h4><p>在一个 Web 应用中就会出现两个 IOC 容器</p><ul><li>DispatcherServlet 创建一个 IOC 容器</li><li>ContextLoaderListener 创建一个 IOC 容器</li></ul><p>配置方式：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过全局初始化参数指定 Spring 配置文件的位置  root ioc容器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-service.xml,classpath:spring-mapper.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定全类名，配置监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- web容器配置--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 配置SpringMVC中负责处理请求的核心Servlet，也被称为SpringMVC的前端控制器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- DispatcherServlet的全类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 如果不记得contextConfigLocation配置项的名称，可以到DispatcherServlet的父类FrameworkServlet中查找 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用classpath:说明这个路径从类路径的根目录开始才查找 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 作为框架的核心组件，在启动过程中有大量的初始化操作要做，这些操作放在第一次请求时才执行非常不恰当 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 我们应该将DispatcherServlet设置为随Web应用一起启动 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 对DispatcherServlet来说，url-pattern有两种方式配置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方式一：配置“/”，表示匹配整个Web应用范围内所有请求。这里有一个硬性规定：不能写成“/*”。</span></span><br><span class="line"><span class="comment">    只有这一个地方有这个特殊要求，以后我们再配置Filter还是可以正常写“/*”。 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 方式二：配置“*.扩展名”，表示匹配整个Web应用范围内部分请求 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、SSM整合配置实战"><a href="#二、SSM整合配置实战" class="headerlink" title="二、SSM整合配置实战"></a>二、SSM整合配置实战</h2><h3 id="1-依赖添加"><a href="#1-依赖添加" class="headerlink" title="1. 依赖添加"></a>1. 依赖添加</h3><ol><li><p>数据库准备</p><p>依然沿用mybatis数据库测试脚本！</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis<span class="operator">-</span>example`;</span><br><span class="line"></span><br><span class="line">USE `mybatis<span class="operator">-</span>example`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_emp`(</span><br><span class="line">  emp_id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">  emp_name <span class="type">CHAR</span>(<span class="number">100</span>),</span><br><span class="line">  emp_salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">5</span>),</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span>(emp_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;tom&quot;,<span class="number">200.33</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;jerry&quot;,<span class="number">666.66</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;andy&quot;,<span class="number">777.77</span>);</span><br></pre></td></tr></table></figure></li><li><p>准备项目</p><p>part04-ssm-integration</p><p>转成web项目</p></li><li><p>依赖导入</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.wzb<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>part04-ssm-integration<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jakarta.annotation-api.version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">jakarta.annotation-api.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jakarta.jakartaee-web-api.version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">jakarta.jakartaee-web-api.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jackson-databind.version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">jackson-databind.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hibernate-validator.version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">hibernate-validator.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">commons-fileupload.version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">commons-fileupload.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">mybatis.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pagehelper.version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">pagehelper.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring.version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">mybatis-spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jakarta.servlet.jsp.jstl-api.version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">jakarta.servlet.jsp.jstl-api.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logback.version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">logback.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.18.26<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span>  </span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span> </span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     需要依赖清单分析:</span></span><br><span class="line"><span class="comment">        spring</span></span><br><span class="line"><span class="comment">          ioc/di</span></span><br><span class="line"><span class="comment">            spring-context / 6.0.6</span></span><br><span class="line"><span class="comment">          aop</span></span><br><span class="line"><span class="comment">            spring-aop / 6.0.6</span></span><br><span class="line"><span class="comment">            spring-aspects / 6.0.6</span></span><br><span class="line"><span class="comment">          tx</span></span><br><span class="line"><span class="comment">            spring-tx  / 6.0.6</span></span><br><span class="line"><span class="comment">            spring-jdbc / 6.0.6</span></span><br><span class="line"><span class="comment">          jakarta.annotation-api / 2.1.1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        springmvc</span></span><br><span class="line"><span class="comment">           spring-webmvc 6.0.6</span></span><br><span class="line"><span class="comment">           jakarta.jakartaee-web-api 9.1.0</span></span><br><span class="line"><span class="comment">           jackson-databind 2.15.0</span></span><br><span class="line"><span class="comment">           hibernate-validator / hibernate-validator-annotation-processor 8.0.0.Final</span></span><br><span class="line"><span class="comment">           commons-fileupload / 1.3.1</span></span><br><span class="line"><span class="comment">        mybatis</span></span><br><span class="line"><span class="comment">           mybatis  / 3.5.11</span></span><br><span class="line"><span class="comment">           mysql    / 8.0.25</span></span><br><span class="line"><span class="comment">           pagehelper / 5.1.11</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        整合需要</span></span><br><span class="line"><span class="comment">           加载spring容器 spring-web / 6.0.6</span></span><br><span class="line"><span class="comment">           整合mybatis    mybatis-spring x x</span></span><br><span class="line"><span class="comment">           数据库连接池   druid / x</span></span><br><span class="line"><span class="comment">           lombok        lombok / 1.18.26</span></span><br><span class="line"><span class="comment">           logback       logback/ 1.2.3</span></span><br><span class="line"><span class="comment">  --&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring pom.xml依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jakarta.annotation-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       springmvc</span></span><br><span class="line"><span class="comment">           spring-webmvc 6.0.6</span></span><br><span class="line"><span class="comment">           jakarta.jakartaee-web-api 9.1.0</span></span><br><span class="line"><span class="comment">           jackson-databind 2.15.0</span></span><br><span class="line"><span class="comment">           hibernate-validator / hibernate-validator-annotation-processor 8.0.0.Final</span></span><br><span class="line"><span class="comment">           commons-fileupload / 1.3.1</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jakarta.jakartaee-web-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- jsp需要依赖! jstl--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jakarta.servlet.jsp.jstl-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;commons-fileupload.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;jackson-databind.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;hibernate-validator.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">      mybatis</span></span><br><span class="line"><span class="comment">           mybatis  / 3.5.11</span></span><br><span class="line"><span class="comment">           mysql    / 8.0.25</span></span><br><span class="line"><span class="comment">           pagehelper / 5.1.11</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mysql.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;pagehelper.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 整合第三方特殊依赖 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;mybatis-spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 日志 ， 会自动传递slf4j门面--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;logback.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;lombok.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;druid.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>实体类添加</p><p>com.wzb.pojo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    <span class="keyword">private</span> Double empSalary;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>logback配置</p><p>位置：resources&#x2F;logback.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置，ConsoleAppender表示输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：TRACE、DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别，可也是包名或全类名。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.wzb.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-控制层配置编写-SpringMVC整合"><a href="#2-控制层配置编写-SpringMVC整合" class="headerlink" title="2. 控制层配置编写(SpringMVC整合)"></a>2. 控制层配置编写(SpringMVC整合)</h3><p>主要配置controller,springmvc相关！ 本次先不配置文件上传！</p><p>位置：resources&#x2F;spring-mvc.xml(命名随意)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       注意: 导入mvc命名空间!</span></span><br><span class="line"><span class="comment">       mvc:annotation-driven 是一个整合标签</span></span><br><span class="line"><span class="comment">                             他会导入handlerMapping和handlerAdapter</span></span><br><span class="line"><span class="comment">                             他会导入json数据格式转化器等等</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- viewResolver 不需要配置,因为我们不需要查找逻辑视图!!! --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加入这个配置，SpringMVC 就会在遇到没有 @RequestMapping 的请求时放它过去 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所谓放它过去就是让这个请求去找它原本要访问的资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置动态页面语言jsp的视图解析器,快速查找jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-业务层配置编写-AOP-TX整合）"><a href="#3-业务层配置编写-AOP-TX整合）" class="headerlink" title="3. 业务层配置编写(AOP &#x2F; TX整合）"></a>3. 业务层配置编写(AOP &#x2F; TX整合）</h3><p>主要配置service,注解aop和声明事务相关！&#x20;</p><p>位置：resources&#x2F;spring-service.xml(命名随意)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span> <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">&lt;!-- 业务层bean,增强,切点等都在此层配置 --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.service,com.wzb.advice,com.wzb.pointcut&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">       <span class="comment">&lt;!-- 事务注解开启 </span></span><br><span class="line"><span class="comment">            注意:数据库配置将在mapper文件中,最终会被加载到同一个容器中,此处爆红运行正常!</span></span><br><span class="line"><span class="comment">       --&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> &gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">       <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-持久层配置编写-MyBatis整合"><a href="#4-持久层配置编写-MyBatis整合" class="headerlink" title="4. 持久层配置编写(MyBatis整合)"></a>4. 持久层配置编写(MyBatis整合)</h3><p>jdbc外部配置</p><p>位置：resources&#x2F;jdbc.properties</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=root</span><br><span class="line">jdbc.url=jdbc:mysql:///mybatis-example</span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><p>持久层配置</p><p>位置：resources&#x2F;spring-mapper.xml(命名随意)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 </span></span><br><span class="line"><span class="comment">         注意: dataSource被service配置文件中引用,命名为:dataSource</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置mybatis方式1：保留mybaits全局配置</strong></p><p>准备mybatis-config.xml文件：去掉数据库信息，去掉mapper包映射（xml中配置）</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰式映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启logback日志输出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--开启resultMap自动映射 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;FULL&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给实体类起别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wzb.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">                helperDialect：分页插件会自动检测当前的数据库链接，自动选择合适的分页方式。</span></span><br><span class="line"><span class="comment">                你可以配置helperDialect属性来指定分页插件使用哪种方言。配置时，可以使用下面的缩写值：</span></span><br><span class="line"><span class="comment">                oracle,mysql,mariadb,sqlite,hsqldb,postgresql,db2,sqlserver,informix,h2,sqlserver2012,derby</span></span><br><span class="line"><span class="comment">                （完整内容看 PageAutoDialect） 特别注意：使用 SqlServer2012 数据库时，</span></span><br><span class="line"><span class="comment">                https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E8%A8%80</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改spring-mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 </span></span><br><span class="line"><span class="comment">         注意: dataSource被service配置文件中引用,命名为:dataSource</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式1: 引用外部配置文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 SqlSessionFactoryBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定 Mybatis 全局配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configLocation&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mybatis-config.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定 Mapper 配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Mapper接口类型的bean的扫描器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.wzb.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置mybatis方式2：完全配置文件实现</strong></p><p>修改spring-mapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加载外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 </span></span><br><span class="line"><span class="comment">         注意: dataSource被service配置文件中引用,命名为:dataSource</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方式2: 彻底舍弃Mybatis全局配置文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置 SqlSessionFactoryBean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;sqlSessionFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.SqlSessionFactoryBean&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 舍弃 Mybatis 全局配置文件，使用 configuration 属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;configuration&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.apache.ibatis.session.Configuration&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 舍弃 Mybatis 全局配置文件，使用 typeAliasesPackage 属性配置实体类所在包 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;typeAliasesPackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.wzb.pojo&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 指定 Mapper 配置文件位置 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;mapperLocations&quot;</span> <span class="attr">value</span>=<span class="string">&quot;classpath:mappers/*Mapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;dataSource&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 分页插件 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;plugins&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 启用合理化设置。当页码为负数时，设置为1， 当页码超过最大页时设置为最大页 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;reasonable&quot;</span>&gt;</span>true<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;pageHelperDialect&quot;</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 Mapper接口类型的bean的扫描器--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mapperScannerConfigurer&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.mybatis.spring.mapper.MapperScannerConfigurer&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;basePackage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.wzb.mapper&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 也可以使用mybatis-spring名称空间 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-spring:scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.mapper&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-容器初始化配置web-xml"><a href="#5-容器初始化配置web-xml" class="headerlink" title="5. 容器初始化配置web.xml"></a>5. 容器初始化配置web.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- ContextLoaderListener --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 通过 context-param 指定 Spring 框架的配置文件位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-service.xml,classpath:spring-mapper.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 配置 ContextLoaderListener --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- DispatcherServlet --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-整合测试"><a href="#6-整合测试" class="headerlink" title="6. 整合测试"></a>6. 整合测试</h3><ol><li><p>需求</p><p>查询所有员工信息,返回对应json数据！</p></li><li><p>controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/employee&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">retList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Employee&gt; employees = employeeService.findAll();</span><br><span class="line">        log.info(<span class="string">&quot;员工数据:&#123;&#125;&quot;</span>,employees);</span><br><span class="line">        <span class="keyword">return</span> employees;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>service&#x20;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EmployeeMapper employeeMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有员工信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Employee&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Employee&gt; employeeList =  employeeMapper.queryAll();</span><br><span class="line">        <span class="keyword">return</span> employeeList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>mapper</p><p>mapper接口  包：com.wzb.mapper&#x20;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">     List&lt;Employee&gt; <span class="title function_">queryAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>mapper XML 文件位置： resources&#x2F;mappers</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace等于mapper接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wzb.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- #&#123;empId&#125;代表动态传入的参数,并且进行赋值!后面详细讲解 --&gt;</span></span><br><span class="line">        select emp_id empId,emp_name empName, emp_salary empSalary from t_emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="三、前端程序搭建和运行"><a href="#三、前端程序搭建和运行" class="headerlink" title="三、前端程序搭建和运行"></a>三、前端程序搭建和运行</h2><h3 id="1-案例功能和接口分析"><a href="#1-案例功能和接口分析" class="headerlink" title="1. 案例功能和接口分析"></a>1. 案例功能和接口分析</h3><h4 id="1-1-案例功能预览"><a href="#1-1-案例功能预览" class="headerlink" title="1.1 案例功能预览"></a>1.1 案例功能预览</h4><p><img src="SSM%E6%95%B4%E5%90%88_n6QXpZb-pl.png"></p><h4 id="1-2-接口分析"><a href="#1-2-接口分析" class="headerlink" title="1.2 接口分析"></a>1.2 接口分析</h4><ol><li>学习计划分页查询<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求说明</span></span><br><span class="line"><span class="comment">    查询全部数据页数据</span></span><br><span class="line"><span class="comment">请求uri</span></span><br><span class="line"><span class="comment">    schedule/&#123;pageSize&#125;/&#123;currentPage&#125;</span></span><br><span class="line"><span class="comment">请求方式 </span></span><br><span class="line"><span class="comment">    get   </span></span><br><span class="line"><span class="comment">响应的json</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;code&quot;:200,</span></span><br><span class="line"><span class="comment">        &quot;flag&quot;:true,</span></span><br><span class="line"><span class="comment">        &quot;data&quot;:&#123;</span></span><br><span class="line"><span class="comment">            //本页数据</span></span><br><span class="line"><span class="comment">            data:</span></span><br><span class="line"><span class="comment">            [</span></span><br><span class="line"><span class="comment">            &#123;id:1,title:&#x27;学习java&#x27;,completed:true&#125;,</span></span><br><span class="line"><span class="comment">            &#123;id:2,title:&#x27;学习html&#x27;,completed:true&#125;,</span></span><br><span class="line"><span class="comment">            &#123;id:3,title:&#x27;学习css&#x27;,completed:true&#125;,</span></span><br><span class="line"><span class="comment">            &#123;id:4,title:&#x27;学习js&#x27;,completed:true&#125;,</span></span><br><span class="line"><span class="comment">            &#123;id:5,title:&#x27;学习vue&#x27;,completed:true&#125;</span></span><br><span class="line"><span class="comment">            ], </span></span><br><span class="line"><span class="comment">            //分页参数</span></span><br><span class="line"><span class="comment">            pageSize:5, // 每页数据条数 页大小</span></span><br><span class="line"><span class="comment">            total:0 ,   // 总记录数</span></span><br><span class="line"><span class="comment">            currentPage:1 // 当前页码</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li>学习计划删除<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求说明</span></span><br><span class="line"><span class="comment">    根据id删除日程</span></span><br><span class="line"><span class="comment">请求uri</span></span><br><span class="line"><span class="comment">    schedule/&#123;id&#125;</span></span><br><span class="line"><span class="comment">请求方式 </span></span><br><span class="line"><span class="comment">    delete</span></span><br><span class="line"><span class="comment">响应的json</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;code&quot;:200,</span></span><br><span class="line"><span class="comment">        &quot;flag&quot;:true,</span></span><br><span class="line"><span class="comment">        &quot;data&quot;:null</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li>学习计划保存<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求说明</span></span><br><span class="line"><span class="comment">    增加日程</span></span><br><span class="line"><span class="comment">请求uri</span></span><br><span class="line"><span class="comment">    schedule</span></span><br><span class="line"><span class="comment">请求方式 </span></span><br><span class="line"><span class="comment">    post</span></span><br><span class="line"><span class="comment">请求体中的JSON</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        title: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">        completed: false</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">响应的json</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;code&quot;:200,</span></span><br><span class="line"><span class="comment">        &quot;flag&quot;:true,</span></span><br><span class="line"><span class="comment">        &quot;data&quot;:null</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li>学习计划修改<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求说明</span></span><br><span class="line"><span class="comment">    根据id修改数据</span></span><br><span class="line"><span class="comment">请求uri</span></span><br><span class="line"><span class="comment">    schedule</span></span><br><span class="line"><span class="comment">请求方式 </span></span><br><span class="line"><span class="comment">    put</span></span><br><span class="line"><span class="comment">请求体中的JSON</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        id: 1,</span></span><br><span class="line"><span class="comment">        title: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">        completed: false</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">响应的json</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;code&quot;:200,</span></span><br><span class="line"><span class="comment">        &quot;flag&quot;:true,</span></span><br><span class="line"><span class="comment">        &quot;data&quot;:null</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-前端工程导入"><a href="#2-前端工程导入" class="headerlink" title="2. 前端工程导入"></a>2. 前端工程导入</h3><h3 id="3-启动测试"><a href="#3-启动测试" class="headerlink" title="3. 启动测试"></a>3. 启动测试</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">npm i <span class="comment">//安装依赖</span></span><br><span class="line">npm run dev <span class="comment">//运行测试</span></span><br></pre></td></tr></table></figure><h2 id="四、后端程序实现和测试"><a href="#四、后端程序实现和测试" class="headerlink" title="四、后端程序实现和测试"></a>四、后端程序实现和测试</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1.  准备工作"></a>1.  准备工作</h3><ol><li><p>准备数据库脚本</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> schedule (</span><br><span class="line">  id <span class="type">INT</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">  title <span class="type">VARCHAR</span>(<span class="number">255</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  completed <span class="type">BOOLEAN</span> <span class="keyword">NOT NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> schedule (title, completed)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">    (<span class="string">&#x27;学习java&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Python&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习C++&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习JavaScript&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习HTML5&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习CSS3&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Vue.js&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习React&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Angular&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Node.js&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Express&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Koa&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习MongoDB&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习MySQL&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Redis&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Git&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Docker&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Kubernetes&#x27;</span>, <span class="literal">false</span>),</span><br><span class="line">    (<span class="string">&#x27;学习AWS&#x27;</span>, <span class="literal">true</span>),</span><br><span class="line">    (<span class="string">&#x27;学习Azure&#x27;</span>, <span class="literal">false</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>准备pojo</p><p>包：com.wzb.pojo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.pojo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 任务实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Schedule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> Boolean completed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>准备 R</p><p>包：com.wzb.utils</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">**</span><br><span class="line"> * projectName: com.wzb.utils</span><br><span class="line"> *</span><br><span class="line"> * description: 返回结果类</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">200</span>; <span class="comment">//200成功状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//返回状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;  <span class="comment">//返回具体数据</span></span><br></pre></td></tr></table></figure><pre><code>public  static R ok(Object data){    R r = new R();    r.data = data;    return r;}public static R  fail(Object data){    R r = new R();    r.code = 500; //错误码    r.flag = false; //错误状态    r.data = data;    return r;}public int getCode() {    return code;}public void setCode(int code) {    this.code = code;}public boolean isFlag() {    return flag;}public void setFlag(boolean flag) {    this.flag = flag;}public Object getData() {    return data;}public void setData(Object data) {    this.data = data;}</code></pre><p>}</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">4.  准备 PageBean</span><br><span class="line"></span><br><span class="line">    包：com.wzb.utils</span><br><span class="line">    ```java</span><br><span class="line">    @Data</span><br><span class="line">    @NoArgsConstructor</span><br><span class="line">    @AllArgsConstructor</span><br><span class="line">    public class PageBean&lt;T&gt; &#123;</span><br><span class="line">        private int currentPage;   // 当前页码</span><br><span class="line">        private int pageSize;      // 每页显示的数据量</span><br><span class="line">        private long total;    // 总数据条数</span><br><span class="line">        private List&lt;T&gt; data;      // 当前页的数据集合</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br></pre></td></tr></table></figure></li></ol><h3 id="2-功能实现"><a href="#2-功能实现" class="headerlink" title="2. 功能实现"></a>2. 功能实现</h3><ol><li>分页查询<ol><li><p>controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @CrossOrigin 注释在带注释的控制器方法上启用跨源请求</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;schedule&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleController</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ScheduleService scheduleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;pageSize&#125;/&#123;currentPage&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">showList</span><span class="params">(<span class="meta">@PathVariable(name = &quot;pageSize&quot;)</span> <span class="type">int</span> pageSize, <span class="meta">@PathVariable(name = &quot;currentPage&quot;)</span> <span class="type">int</span> currentPage)</span>&#123;</span><br><span class="line">        PageBean&lt;Schedule&gt; pageBean = scheduleService.findByPage(pageSize,currentPage);</span><br><span class="line">        <span class="keyword">return</span>  R.ok(pageBean);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></li><li><p>service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleServiceImpl</span>  <span class="keyword">implements</span> <span class="title class_">ScheduleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ScheduleMapper scheduleMapper;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 分页数据查询,返回分页pageBean</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> currentPage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> PageBean&lt;Schedule&gt; <span class="title function_">findByPage</span><span class="params">(<span class="type">int</span> pageSize, <span class="type">int</span> currentPage)</span> &#123;</span><br><span class="line">        <span class="comment">//1.设置分页参数</span></span><br><span class="line">        PageHelper.startPage(currentPage,pageSize);</span><br><span class="line">        <span class="comment">//2.数据库查询</span></span><br><span class="line">        List&lt;Schedule&gt; list = scheduleMapper.queryPage();</span><br><span class="line">        <span class="comment">//3.结果获取</span></span><br><span class="line">        PageInfo&lt;Schedule&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(list);</span><br><span class="line">        <span class="comment">//4.pageBean封装</span></span><br><span class="line">        PageBean&lt;Schedule&gt; pageBean = <span class="keyword">new</span> <span class="title class_">PageBean</span>&lt;&gt;(pageInfo.getPageNum(),pageInfo.getPageSize(),pageInfo.getTotal(),pageInfo.getList());</span><br><span class="line"></span><br><span class="line">        log.info(<span class="string">&quot;分页查询结果:&#123;&#125;&quot;</span>,pageBean);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pageBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper</p><p>mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ScheduleMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    List&lt;Schedule&gt; <span class="title function_">queryPage</span><span class="params">()</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure><p>mapperxml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace等于mapper接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wzb.mapper.ScheduleMapper&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryPage&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;schedule&quot;</span>&gt;</span></span><br><span class="line">        select * from schedule</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span>    </span><br></pre></td></tr></table></figure></li></ol></li><li>计划添加<ol><li><p>controller</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">saveSchedule</span><span class="params">(<span class="meta">@RequestBody</span> Schedule schedule)</span>&#123;</span><br><span class="line">    scheduleService.saveSchedule(schedule);</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 保存学习计划</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> schedule</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveSchedule</span><span class="params">(Schedule schedule)</span> &#123;</span><br><span class="line">    scheduleMapper.insert(schedule);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>mapper</p><p>mapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">insert</span><span class="params">(Schedule schedule)</span>;</span><br></pre></td></tr></table></figure><p>mapperxml文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span>&gt;</span></span><br><span class="line">    insert into schedule (title, completed)</span><br><span class="line">    values</span><br><span class="line">    (#&#123;title&#125;, #&#123;completed&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>计划删除<ol><li>controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">removeSchedule</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">    scheduleService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>service<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 移除学习计划</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">    scheduleMapper.delete(id);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>mapper<br>mapper接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br></pre></td></tr></table></figure>mapperxml文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    delete from schedule where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li>计划修改<ol><li>controller<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">changeSchedule</span><span class="params">(<span class="meta">@RequestBody</span> Schedule schedule)</span>&#123;</span><br><span class="line">    scheduleService.updateSchedule(schedule);</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>service<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 更新学习计划</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> schedule</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateSchedule</span><span class="params">(Schedule schedule)</span> &#123;</span><br><span class="line">    scheduleMapper.update(schedule);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>mapper<br>mapper接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Schedule schedule)</span>;</span><br></pre></td></tr></table></figure>mapperxml文件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update schedule set title = #&#123;title&#125; , completed = #&#123;completed&#125;</span><br><span class="line">         where id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="3-前后联调"><a href="#3-前后联调" class="headerlink" title="3. 前后联调"></a>3. 前后联调</h3><ol><li><p>后台项目根路径设计</p><p><img src="SSM%E6%95%B4%E5%90%88_Iwi_-mHUaV.png"></p></li><li><p>启动测试即可</p></li></ol><h2 id="五、SSM技术栈总结"><a href="#五、SSM技术栈总结" class="headerlink" title="五、SSM技术栈总结"></a>五、SSM技术栈总结</h2><h3 id="1-Spring框架总结"><a href="#1-Spring框架总结" class="headerlink" title="1. Spring框架总结"></a>1. Spring框架总结</h3><h4 id="1-1-技术点总结"><a href="#1-1-技术点总结" class="headerlink" title="1.1 技术点总结"></a>1.1 技术点总结</h4><ul><li>控制反转（IoC，Inversion of Control）和依赖注入（DI，Dependency Injection）</li><li>Spring AOP（Aspect-Oriented Programming）面向切面编程</li><li>Spring TX声明式事务实现</li></ul><h4 id="1-2-配置总结"><a href="#1-2-配置总结" class="headerlink" title="1.2 配置总结"></a>1.2 配置总结</h4><ul><li>IoC&#x2F;DI配置<ul><li><p>xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;petStore&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.samples.</span></span></span><br><span class="line"><span class="string"><span class="tag">                            jpetstore.services.PetStoreServiceImpl&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;accountDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;accountDao&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;itemDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;itemDao&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- additional collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>注解</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr></tbody></table><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.包要精准,提高性能!</span></span><br><span class="line"><span class="comment">         2.会扫描指定的包和子包内容</span></span><br><span class="line"><span class="comment">         3.多个包可以使用,分割 例如: com.wzb.controller,com.wzb.service等</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.components&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>配置类</p><p><img src="SSM%E6%95%B4%E5%90%88_wAn-4f9DfP.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标注当前类是配置类，替代application.xml    </span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//引入jdbc.properties文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:application.properties&quot;,&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.wzb.components&quot;&#125;)</span></span><br><span class="line"><span class="meta">@Import(其他的配置类.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果第三方类进行IoC管理,无法直接使用@Component相关注解</span></span><br><span class="line">    <span class="comment">//解决方案: xml方式可以使用&lt;bean标签</span></span><br><span class="line">    <span class="comment">//解决方案: 配置类方式,可以使用方法返回值+@Bean注解</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jdbc.user:default&#125;&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span>String password,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span>String url,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span>String driverClassName)</span>&#123;</span><br><span class="line">        <span class="comment">//使用Java代码实例化</span></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        <span class="comment">//返回结果即可</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> XxxMapper <span class="title function_">createMapper</span><span class="params">(DataSource createDataSource)</span>&#123;</span><br><span class="line">      </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li>AOP配置<ul><li>注解<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 进行包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启aspectj框架注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br><span class="line">@Aspect</span><br><span class="line">@Order 值越小优先级越高  </span><br><span class="line">@Before</span><br><span class="line">@After</span><br><span class="line">@AfterReturning</span><br><span class="line">@AfterThrowing</span><br><span class="line">@Around</span><br><span class="line">@Pointcut</span><br></pre></td></tr></table></figure></li><li>xml(了解)<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置目标类的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;calculatorPure&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.aop.imp.CalculatorPureImpl&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置切面类的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.aop.aspect.LogAspect&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;logPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- aop:aspect标签：配置切面 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：关联切面类的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aop:before标签：配置前置通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- method属性：指定前置通知的方法名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- pointcut-ref属性：引用切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLogBeforeCore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after-returning标签：配置返回通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- returning属性：指定通知方法中用来接收目标方法返回值的参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">&quot;printLogAfterCoreSuccess&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">returning</span>=<span class="string">&quot;targetMethodReturnValue&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after-throwing标签：配置异常通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- throwing属性：指定通知方法中用来接收目标方法抛出异常的异常对象的参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">&quot;printLogAfterCoreException&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">throwing</span>=<span class="string">&quot;targetMethodException&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after标签：配置后置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;printLogCoreFinallyEnd&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:around标签：配置环绕通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:around method=&quot;……&quot; pointcut-ref=&quot;logPointCut&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul></li><li>TX配置<ul><li>注解<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">    <span class="comment">&lt;!-- 事务管理器的bean只需要装配数据源，其他属性保持默认值即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 开启基于注解的声明式事务功能 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用transaction-manager属性指定当前使用是事务管理器的bean --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>@Transactional</li><li>xml（了解）<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事务管理器的bean只需要装配数据源，其他属性保持默认值即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 兜个底--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置切入点表达式，将事务功能定位到具体方法上 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPoincut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..*Service.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 将事务通知和切入点表达式关联起来 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPoincut&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="1-3-注解总结"><a href="#1-3-注解总结" class="headerlink" title="1.3 注解总结"></a>1.3 注解总结</h4><ul><li><p>&#x20;ioc&#x2F;di注解：</p><p><strong>@Autowired</strong>：自动装配 Bean，可用于构造方法、属性和方法上，配合 <code>@Qualifier</code> 使用实现按名称注入。</p><p><strong>@Qualifier</strong>：指定需要注入的 Bean 的名称，通常和 <code>@Autowired</code> 一起使用。</p><p><strong>@Resource</strong>：和 <code>@Autowired</code> 类似，可以实现按名称注入，不过是 JSR-250 规范的注解。</p><p><strong>@Value</strong>：注入 properties 文件中的属性值，还可以注入 SpEL 表达式的值。</p><p><strong>@Component</strong>：通用的组件注解，通常用于标记 Spring 管理的 Bean。</p><p><strong>@Controller</strong>：标记 Spring MVC 控制器，也是 <code>@Component</code> 的一种。</p><p><strong>@Service</strong>：标记 Service 层组件，也是 <code>@Component</code> 的一种。</p><p><strong>@Repository</strong>：标记数据访问层组件，是 <code>@Component</code> 的一种。</p></li><li><p>aop注解：</p><p><strong>@Aspect</strong>：声明一个切面类。</p><p><strong>@Pointcut</strong>：定义切入点表达式。</p><p><strong>@Before</strong>：前置通知，在目标方法执行之前执行。</p><p><strong>@AfterReturning</strong>：后置通知，在目标方法执行之后执行，返回结果时执行。</p><p><strong>@AfterThrowing</strong>：异常通知，在目标方法抛出异常时执行。</p><p><strong>@After</strong>：最终通知，在目标方法执行之后执行，无论是否发生异常都执行。</p><p><strong>@Around</strong>：环绕通知，在目标方法执行前后执行，可以控制目标方法的执行。</p></li><li><p>tx注解：</p><p><strong>@Transactional</strong>：声明一个事务方法，可以配置事务的属性，如传播行为、隔离级别、超时时间等。</p></li></ul><h3 id="2-Spring-MVC-框架总结"><a href="#2-Spring-MVC-框架总结" class="headerlink" title="2. Spring MVC 框架总结"></a>2. Spring MVC 框架总结</h3><h4 id="2-1-技术点总结"><a href="#2-1-技术点总结" class="headerlink" title="2.1 技术点总结"></a>2.1 技术点总结</h4><ul><li><p>简化参数接收</p><p>接收param &#x2F; json &#x2F; 文件 &#x2F; 原生api &#x2F; 共享域</p></li><li><p>简化数据响应</p><p>响应 页面 &#x2F; 转发和重定向 &#x2F; json &#x2F; 文件</p></li></ul><h4 id="2-2-配置总结"><a href="#2-2-配置总结" class="headerlink" title="2.2 配置总结"></a>2.2 配置总结</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描controller对应的包,将handler加入到ioc  handler--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       注意: 导入mvc命名空间!</span></span><br><span class="line"><span class="comment">       mvc:annotation-driven 是一个整合标签</span></span><br><span class="line"><span class="comment">                             他会导入handlerMapping和handlerAdapter</span></span><br><span class="line"><span class="comment">                             他会导入json数据格式转化器等等</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- viewResolver 不需要配置,因为我们不需要查找逻辑视图!!! --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加入这个配置，SpringMVC 就会在遇到没有 @RequestMapping 的请求时放它过去 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所谓放它过去就是让这个请求去找它原本要访问的资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置动态页面语言jsp的视图解析器,快速查找jsp--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-3-注解总结"><a href="#2-3-注解总结" class="headerlink" title="2.3 注解总结"></a>2.3 注解总结</h4><ul><li><p>控制器相关</p><p><code>@Controller</code>：用于定义控制器类；</p><p><code>@RestController</code>：与 <code>@Controller</code> 类似，但返回值都会被转换为 JSON 格式；</p><p><code>@RequestMapping</code>：用于定义请求 URI 与控制器方法的映射关系；</p><p><code>@CrossOrigin</code>：用于标注在 Controller 类或处理请求的方法上，表示允许跨域请求；</p></li><li><p>接收参数相关</p><p><code>@RequestParam</code>：用于获取请求参数的值；</p><p><code>@RequestBody</code>：用于获取 POST 请求的请求体（Request Body）；</p><p><code>@RequestHeader</code>：用于获取请求头信息；</p><p><code>@CookieValue</code>：用于获取 Cookie 中的值。</p><p><code>@PathVariable</code>：用于获取 URI 中的参数值；</p></li><li><p>响应数据相关</p><p><code>@ResponseBody</code>：用于将 Controller 中方法返回的对象转换成指定格式（通常是 JSON 或 XML）的对象，并将其作为响应正文返回；</p></li><li><p>校验注解相关</p><p><code>@Validate</code>：用于开启对象的数据校验；</p><p><code>@NotNull</code>：用于检验是否为 null；</p><p><code>@NotBlank</code>：用于检验是否为 null 或空字符串；</p><p><code>@Size</code>：用于检验字符串、数组、集合的长度范围；</p><p><code>@Min</code>：用于检验数字的最小值；</p><p><code>@Max</code>：用于检验数字的最大值；</p><p><code>@DecimalMin</code>：用于检验 BigDecimal 和 BigInteger 的最小值；</p><p><code>@DecimalMax</code>：用于检验 BigDecimal 和 BigInteger 的最大值；</p><p><code>@Pattern</code>：用于检验正则表达式。</p></li></ul><h3 id="3-MyBatis框架总结"><a href="#3-MyBatis框架总结" class="headerlink" title="3. MyBatis框架总结"></a>3. MyBatis框架总结</h3><h4 id="3-1-技术点总结"><a href="#3-1-技术点总结" class="headerlink" title="3.1 技术点总结"></a>3.1 技术点总结</h4><ul><li>映射文件及 SQL 语句编写</li><li>MyBatis 动态 SQL</li><li>MyBatis 多表映射</li><li>MyBatis 逆向工程</li></ul><h4 id="3-2-配置总结"><a href="#3-2-配置总结" class="headerlink" title="3.2 配置总结"></a>3.2 配置总结</h4><ul><li>mapper配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。</span><br><span class="line"></span><br><span class="line">SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</span><br><span class="line"></span><br><span class="line">    resultMap – 描述如何从数据库结果集中加载对象，是最复杂也是最强大的元素。</span><br><span class="line">    sql – 可被其它语句引用的可重用语句块。</span><br><span class="line">    insert – 映射插入语句。</span><br><span class="line">    update – 映射更新语句。</span><br><span class="line">    delete – 映射删除语句。</span><br><span class="line">    select – 映射查询语句。</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>mybatis配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">MyBatis 的配置文件包含了会深深影响 MyBatis 行为的设置和属性信息。 配置文档的顶层结构如下：</span><br><span class="line">    configuration（配置）</span><br><span class="line">        properties（属性）</span><br><span class="line">        settings（设置）</span><br><span class="line">        typeAliases（类型别名）</span><br><span class="line">        typeHandlers（类型处理器） String []  ,  varchar()</span><br><span class="line">        objectFactory（对象工厂）</span><br><span class="line">        plugins（插件）</span><br><span class="line">        environments（环境配置）</span><br><span class="line">            environment（环境变量）</span><br><span class="line">                transactionManager（事务管理器）</span><br><span class="line">                dataSource（数据源）</span><br><span class="line">        databaseIdProvider（数据库厂商标识）</span><br><span class="line">        mappers（映射器）</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ul><h4 id="3-3-注解总结"><a href="#3-3-注解总结" class="headerlink" title="3.3 注解总结"></a>3.3 注解总结</h4><p>​<code>@Param</code></p>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis持久层框架</title>
      <link href="/2024/05/23/MyBatis%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/05/23/MyBatis%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="MyBatis持久层框架"><a href="#MyBatis持久层框架" class="headerlink" title="MyBatis持久层框架"></a>MyBatis持久层框架</h2><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%80Mybatis%E7%AE%80%E4%BB%8B">一、Mybatis简介</a><ul><li><a href="#1-%E7%AE%80%E4%BB%8B">1. 简介</a></li><li><a href="#2-%E6%8C%81%E4%B9%85%E5%B1%82%E6%A1%86%E6%9E%B6%E5%AF%B9%E6%AF%94">2. 持久层框架对比</a></li><li><a href="#3-%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8%E5%9F%BA%E4%BA%8EMybatis3%E6%96%B9%E5%BC%8F">3. 快速入门（基于Mybatis3方式）</a></li></ul></li><li><a href="#%E4%BA%8C%E6%97%A5%E5%BF%97%E6%A1%86%E6%9E%B6%E6%89%A9%E5%B1%95">二、日志框架扩展</a><ul><li><a href="#1-%E7%94%A8%E6%97%A5%E5%BF%97%E6%89%93%E5%8D%B0%E6%9B%BF%E4%BB%A3sout">1. 用日志打印替代sout</a></li><li><a href="#2-Java%E6%97%A5%E5%BF%97%E4%BD%93%E7%B3%BB%E6%BC%94%E5%8F%98">2. Java日志体系演变</a></li><li><a href="#3-%E6%9C%80%E4%BD%B3%E6%8B%8D%E6%A1%A3%E7%94%A8%E6%B3%95">3. 最佳拍档用法</a></li><li><a href="#4-Lombok%E6%8F%92%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8">4. Lombok插件的使用</a><ul><li><a href="#41-Lombok%E7%AE%80%E4%BB%8B">4.1 Lombok简介</a></li><li><a href="#42-Lombok%E5%AE%89%E8%A3%85">4.2 Lombok安装</a></li><li><a href="#43-Lombok%E4%BD%BF%E7%94%A8%E6%B3%A8%E8%A7%A3">4.3 Lombok使用注解</a></li></ul></li></ul></li><li><a href="#%E4%B8%89MyBatis%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8">三、MyBatis基本使用</a><ul><li><a href="#1-%E5%90%91SQL%E8%AF%AD%E5%8F%A5%E4%BC%A0%E5%8F%82">1. 向SQL语句传参</a><ul><li><a href="#11-mybatis%E6%97%A5%E5%BF%97%E8%BE%93%E5%87%BA%E9%85%8D%E7%BD%AE">1.1 mybatis日志输出配置</a></li><li><a href="#12-%E5%BD%A2%E5%BC%8F">1.2 #{}形式</a></li><li><a href="#13-%E5%BD%A2%E5%BC%8F">1.3 ${}形式</a></li></ul></li><li><a href="#2-%E6%95%B0%E6%8D%AE%E8%BE%93%E5%85%A5">2. 数据输入</a><ul><li><a href="#21-Mybatis%E6%80%BB%E4%BD%93%E6%9C%BA%E5%88%B6%E6%A6%82%E6%8B%AC">2.1 Mybatis总体机制概括</a></li><li><a href="#22-%E6%A6%82%E5%BF%B5%E8%AF%B4%E6%98%8E">2.2 概念说明</a></li><li><a href="#23-%E5%8D%95%E4%B8%AA%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0">2.3 单个简单类型参数</a></li><li><a href="#24-%E5%AE%9E%E4%BD%93%E7%B1%BB%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0">2.4 实体类类型参数</a></li><li><a href="#25-%E9%9B%B6%E6%95%A3%E7%9A%84%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B%E6%95%B0%E6%8D%AE">2.5 零散的简单类型数据</a></li><li><a href="#26-Map%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0">2.6 Map类型参数</a></li></ul></li><li><a href="#3-%E6%95%B0%E6%8D%AE%E8%BE%93%E5%87%BA">3. 数据输出</a><ul><li><a href="#31-%E8%BE%93%E5%87%BA%E6%A6%82%E8%BF%B0">3.1 输出概述</a></li><li><a href="#32-%E5%8D%95%E4%B8%AA%E7%AE%80%E5%8D%95%E7%B1%BB%E5%9E%8B">3.2 单个简单类型</a></li><li><a href="#33-%E8%BF%94%E5%9B%9E%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%AF%B9%E8%B1%A1">3.3 返回实体类对象</a></li><li><a href="#34-%E8%BF%94%E5%9B%9EMap%E7%B1%BB%E5%9E%8B">3.4 返回Map类型</a></li><li><a href="#35-%E8%BF%94%E5%9B%9EList%E7%B1%BB%E5%9E%8B">3.5 返回List类型</a></li><li><a href="#36-%E8%BF%94%E5%9B%9E%E4%B8%BB%E9%94%AE%E5%80%BC">3.6 返回主键值</a></li><li><a href="#37-%E5%AE%9E%E4%BD%93%E7%B1%BB%E5%B1%9E%E6%80%A7%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AD%97%E6%AE%B5%E5%AF%B9%E5%BA%94%E5%85%B3%E7%B3%BB">3.7 实体类属性和数据库字段对应关系</a></li></ul></li><li><a href="#4-CRUD%E5%BC%BA%E5%8C%96%E7%BB%83%E4%B9%A0">4. CRUD强化练习</a></li><li><a href="#5-mapperXML%E6%A0%87%E7%AD%BE%E6%80%BB%E7%BB%93">5. mapperXML标签总结</a></li></ul></li><li><a href="#%E5%9B%9BMyBatis%E5%A4%9A%E8%A1%A8%E6%98%A0%E5%B0%84">四、MyBatis多表映射</a><ul><li><a href="#1-%E5%A4%9A%E8%A1%A8%E6%98%A0%E5%B0%84%E6%A6%82%E5%BF%B5">1. 多表映射概念</a></li><li><a href="#2-%E5%AF%B9%E4%B8%80%E6%98%A0%E5%B0%84">2. 对一映射</a></li><li><a href="#3-%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84">3. 对多映射</a></li><li><a href="#4-%E5%A4%9A%E5%AF%B9%E5%A4%9A%E6%98%A0%E5%B0%84">4. 多对多映射</a></li><li><a href="#5-%E5%A4%9A%E8%A1%A8%E6%98%A0%E5%B0%84%E6%80%BB%E7%BB%93">5. 多表映射总结</a><ul><li><a href="#51-%E5%A4%9A%E8%A1%A8%E6%98%A0%E5%B0%84%E4%BC%98%E5%8C%96">5.1 多表映射优化</a></li><li><a href="#52-%E5%A4%9A%E8%A1%A8%E6%98%A0%E5%B0%84%E6%80%BB%E7%BB%93">5.2 多表映射总结</a></li></ul></li></ul></li><li><a href="#%E4%BA%94MyBatis%E5%8A%A8%E6%80%81%E8%AF%AD%E5%8F%A5">五、MyBatis动态语句</a><ul><li><a href="#1-%E5%8A%A8%E6%80%81%E8%AF%AD%E5%8F%A5%E9%9C%80%E6%B1%82%E5%92%8C%E7%AE%80%E4%BB%8B">1. 动态语句需求和简介</a></li><li><a href="#2-if%E5%92%8Cwhere%E6%A0%87%E7%AD%BE">2. if和where标签</a></li><li><a href="#3-set%E6%A0%87%E7%AD%BE">3. set标签</a></li><li><a href="#4-trim%E6%A0%87%E7%AD%BE%E4%BA%86%E8%A7%A3">4. trim标签(了解)</a></li><li><a href="#5-choosewhenotherwise%E6%A0%87%E7%AD%BE">5. choose&#x2F;when&#x2F;otherwise标签</a></li><li><a href="#6-foreach%E6%A0%87%E7%AD%BE">6. foreach标签</a></li><li><a href="#7-sql%E7%89%87%E6%AE%B5">7. sql片段</a></li></ul></li><li><a href="#%E5%85%ADMyBatis%E9%AB%98%E7%BA%A7%E6%89%A9%E5%B1%95">六、MyBatis高级扩展</a><ul><li><a href="#1-Mapper%E6%89%B9%E9%87%8F%E6%98%A0%E5%B0%84%E4%BC%98%E5%8C%96">1. Mapper批量映射优化</a></li><li><a href="#2-%E6%8F%92%E4%BB%B6%E5%92%8C%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper">2. 插件和分页插件PageHelper</a><ul><li><a href="#21-%E6%8F%92%E4%BB%B6%E6%9C%BA%E5%88%B6%E5%92%8CPageHelper%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D">2.1 插件机制和PageHelper插件介绍</a></li><li><a href="#22-PageHelper%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8">2.2 PageHelper插件使用</a></li></ul></li><li><a href="#3-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%92%8CMybatisX%E6%8F%92%E4%BB%B6">3. 逆向工程和MybatisX插件</a><ul><li><a href="#31-ORM%E6%80%9D%E7%BB%B4%E4%BB%8B%E7%BB%8D">3.1 ORM思维介绍</a></li><li><a href="#31-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B">3.1 逆向工程</a></li><li><a href="#32-%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E6%8F%92%E4%BB%B6MyBatisX%E4%BD%BF%E7%94%A8">3.2 逆向工程插件MyBatisX使用</a></li></ul></li></ul></li><li><a href="#%E4%B8%83MyBatis%E6%80%BB%E7%BB%93">七、MyBatis总结</a></li></ul><h2 id="一、Mybatis简介"><a href="#一、Mybatis简介" class="headerlink" title="一、Mybatis简介"></a>一、Mybatis简介</h2><h3 id="1-简介"><a href="#1-简介" class="headerlink" title="1. 简介"></a>1. 简介</h3><p><a href="https://mybatis.org/mybatis-3/zh/index.html">https://mybatis.org/mybatis-3/zh/index.html</a></p><p>MyBatis最初是Apache的一个开源项目iBatis, 2010年6月这个项目由Apache Software Foundation迁移到了Google Code。随着开发团队转投Google Code旗下， iBatis3.x正式更名为MyBatis。代码于2013年11月迁移到Github。</p><p>MyBatis 是一款优秀的持久层框架，它支持自定义 SQL、存储过程以及高级映射。MyBatis 免除了几乎所有的 JDBC 代码以及设置参数和获取结果集的工作。MyBatis 可以通过简单的 XML 或注解来配置和映射原始类型、接口和 Java POJO（Plain Old Java Objects，普通老式 Java 对象）为数据库中的记录。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">MyBatis是持久层的一个半自动化的ORM框架</span><br><span class="line">ORM：Object RelationalShip Mapping  对象关系映射</span><br><span class="line">BaseDao: executeUpdate(),executeQuery()-&gt;解析结果集-&gt;通过反射技术再封装成实体类</span><br></pre></td></tr></table></figure><p><img src="image_6z_rPg5vfi.png"></p><blockquote><p>社区会持续更新开源项目，版本会不断变化，我们不必每个小版本都追，关注重大更新的大版本升级即可。</p></blockquote><p>本课程使用：3.5.11版本</p><h3 id="2-持久层框架对比"><a href="#2-持久层框架对比" class="headerlink" title="2. 持久层框架对比"></a>2. 持久层框架对比</h3><ul><li>JDBC<ul><li>SQL 夹杂在Java代码中耦合度高，导致硬编码内伤</li><li>维护不易且实际开发需求中 SQL 有变化，频繁修改的情况多见</li><li>代码冗长，开发效率低</li></ul></li><li>Hibernate 和 JPA     SSH:Struts  spring  Hibernate<ul><li>操作简便，开发效率高</li><li>程序中的长难复杂 SQL 需要绕过框架</li><li>内部自动生成的 SQL，不容易做特殊优化</li><li>基于全映射的全自动框架，大量字段的 POJO 进行部分映射时比较困难。</li><li>反射操作太多，导致数据库性能下降</li></ul></li><li>MyBatis<ul><li>轻量级，性能出色</li><li>SQL 和 Java 编码分开，功能边界清晰。Java代码专注业务、SQL语句专注数据</li><li>开发效率稍逊于 Hibernate，但是完全能够接收</li></ul></li></ul><p>开发效率：Hibernate&gt;Mybatis&gt;JDBC</p><p>运行效率：JDBC&gt;Mybatis&gt;Hibernate</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">封装程度越高，开发效率就会越高，但是性能就会越差</span><br></pre></td></tr></table></figure><h3 id="3-快速入门（基于Mybatis3方式）"><a href="#3-快速入门（基于Mybatis3方式）" class="headerlink" title="3. 快速入门（基于Mybatis3方式）"></a>3. 快速入门（基于Mybatis3方式）</h3><ol><li><p>准备数据模型</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE `mybatis<span class="operator">-</span>example`;</span><br><span class="line"></span><br><span class="line">USE `mybatis<span class="operator">-</span>example`;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_emp`(</span><br><span class="line">  emp_id <span class="type">INT</span> AUTO_INCREMENT,</span><br><span class="line">  emp_name <span class="type">CHAR</span>(<span class="number">100</span>),</span><br><span class="line">  emp_salary <span class="keyword">DOUBLE</span>(<span class="number">10</span>,<span class="number">5</span>),</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span>(emp_id)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;tom&quot;,<span class="number">200.33</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;jerry&quot;,<span class="number">666.66</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_emp`(emp_name,emp_salary) <span class="keyword">VALUES</span>(&quot;andy&quot;,<span class="number">777.77</span>);</span><br></pre></td></tr></table></figure></li><li><p>项目搭建和准备</p><ol><li><p>项目搭建</p><p><img src="image_aTxxzrw9eO.png"></p></li><li><p>依赖导入</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- mybatis依赖 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- MySQL驱动 mybatis底层依赖jdbc驱动实现,本次不需要导入连接池,mybatis自带! --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>实体类准备</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Double empSalary;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//getter | setter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>准备Mapper接口和MapperXML文件</p><p>MyBatis 框架下，SQL语句编写位置发生改变，从原来的Java类，改成XML或者注解定义！</p><p>推荐在XML文件中编写SQL语句，让用户能更专注于 SQL 代码，不用关注其他的JDBC代码。</p><p>如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码！！</p><p>一般编写SQL语句的文件命名：XxxMapper.xml  Xxx一般取表名！！</p><p>Mybatis 中的 Mapper 接口相当于以前的 Dao。但是区别在于，Mapper 仅仅只是建接口即可，我们不需要提供实现类，具体的SQL写到对应的Mapper文件，该用法的思路如下图所示：</p><p><img src="image_b2QPM-sxTg.png"></p><ol><li><p>定义mapper接口</p><p>包：com.wzb.mapper</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wzb.pojo.Employee;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * t_emp表对应数据库SQL语句映射接口!</span></span><br><span class="line"><span class="comment"> *    接口只规定方法,参数和返回值!</span></span><br><span class="line"><span class="comment"> *    mapper.xml中编写具体SQL语句!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">EmployeeMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 根据员工id查询员工数据方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> empId  员工id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 员工实体对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>定义mapper xml</p><p>位置： resources&#x2F;mappers&#x2F;EmployeeMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace等于mapper接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wzb.mapper.EmployeeMapper&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 查询使用 select标签</span></span><br><span class="line"><span class="comment">            id = 方法名</span></span><br><span class="line"><span class="comment">            resultType = 返回值类型</span></span><br><span class="line"><span class="comment">            标签内编写SQL语句</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wzb.pojo.Employee&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- #&#123;empId&#125;代表动态传入的参数,并且进行赋值!后面详细讲解 --&gt;</span></span><br><span class="line">        select emp_id empId,emp_name empName, emp_salary empSalary from </span><br><span class="line">           t_emp where emp_id = #&#123;empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>方法名和SQL的id一致</li><li>方法返回值和resultType一致</li><li>方法的参数和SQL的参数一致</li><li>接口的全类名和映射配置文件的名称空间一致</li></ul></li></ol></li><li><p>准备MyBatis配置文件</p><p>mybatis框架配置文件： 数据库连接信息，性能配置，mapper.xml配置等！</p><p>习惯上命名为 mybatis-config.xml，这个文件名仅仅只是建议，并非强制要求。将来整合 Spring 之后，这个配置文件可以省略，所以大家操作时可以直接复制、粘贴。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">  <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/EmployeeMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>运行和测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 测试类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectEmployee</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1.创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="comment">// ①声明Mybatis全局配置文件的路径</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">mybatisConfigFilePath</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ②以输入流的形式加载Mybatis配置文件</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(mybatisConfigFilePath);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ③基于读取Mybatis配置文件的输入流创建SqlSessionFactory对象</span></span><br><span class="line">        <span class="type">SqlSessionFactory</span> <span class="variable">sessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2.使用SqlSessionFactory对象开启一个会话</span></span><br><span class="line">        <span class="type">SqlSession</span> <span class="variable">session</span> <span class="operator">=</span> sessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.根据EmployeeMapper接口的Class对象获取Mapper接口类型的对象(动态代理技术)</span></span><br><span class="line">        <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 调用代理类方法既可以触发对应的SQL语句</span></span><br><span class="line">        <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> employeeMapper.selectEmployee(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.关闭SqlSession</span></span><br><span class="line">        session.commit(); <span class="comment">//提交事务 [DQL不需要,其他需要]</span></span><br><span class="line">        session.close(); <span class="comment">//关闭会话</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>SqlSession：代表Java程序和数据库之间的会话。（HttpSession是Java程序和浏览器之间的会话）</li><li>SqlSessionFactory：是“生产”SqlSession的“工厂”。</li><li>工厂模式：如果创建某一个对象，使用的过程基本固定，那么我们就可以把创建这个对象的相关代码封装到一个“工厂类”中，以后都使用这个工厂类来“生产”我们需要的对象。</li></ul></li><li><p>SqlSession和HttpSession区别</p><ul><li>HttpSession：工作在Web服务器上，属于表述层。<ul><li>代表浏览器和Web服务器之间的会话。</li></ul></li><li>SqlSession：不依赖Web服务器，属于持久化层。<ul><li>代表Java程序和数据库之间的会话。<br><img src="image_EhZwteiZyj.png"></li></ul></li></ul></li></ol><h2 id="二、日志框架扩展"><a href="#二、日志框架扩展" class="headerlink" title="二、日志框架扩展"></a>二、日志框架扩展</h2><h3 id="1-用日志打印替代sout"><a href="#1-用日志打印替代sout" class="headerlink" title="1. 用日志打印替代sout"></a>1. 用日志打印替代sout</h3><ol><li>sout有什么问题<ol><li><p>问题1：I&#x2F;O影响性能</p><p>System.out对象是一个输出流对象，所以控制台输出信息本质上是I&#x2F;O操作。而I&#x2F;O操作是项目运行过程中两大性能瓶颈之一。</p><p><img src="image_1eSjjIde_q.png"></p></li><li><p>问题2：无法统一管理</p><p>项目上线时，希望把所有（或一部分）sout打印关闭，但是只能手动一个一个查找，耗费开发人员的极大精力，因为sout的无度使用会使它分散在项目的各个角落。</p></li><li><p>问题3：显得你很low</p><p>想看某个变量的值，只会使用sout在控制台打印出来，不会debug，这只能被人鄙视。</p></li></ol></li><li>使用[日志框架]的好处<ol><li><p>设定级别，统一管理</p><p>日志框架会按照事件的严重程度来划分级别，例如：</p><ul><li>错误（Error）：表示程序运行出错，比如抛异常等情况。</li><li>警告（Warning）：表示程序运行过程中有潜在风险，但此时并没有报错。</li><li>信息（Info）：表示程序运行过程中完成了一个关键动作，需要以程序运行信息的形式告知开发者。</li><li>调试（Debug）：表示程序运行过程中更加细致的信息，协助程序员调试程序。<blockquote><p>📌Tips：各种不同的具体日志系统会使用不同的日志级别名称，也可能有更多个级别设定。但是思想是一致的。<br>通过在配置文件中指定某一个日志级别来控制系统要打印的内容。日志框架会打印<strong>当前指定级别</strong>的日志和比当前指定级别<strong>更严重</strong>的级别的日志。<br>例如在开发阶段，我们指定debug级别，项目上线修改成info级别，那么所有debug级别的日志就都不打印了，不需要到项目代码中一个一个修改，非常方便。</p></blockquote></li></ul></li><li><p>灵活指定输出位置</p><p>使用日志框架不一定是打印到控制台，也可以保存到文件中或者保存到数据库。这就看具体的项目维护需求。</p></li><li><p>自定义日志格式</p><p>打印日志数据可以使用日志框架的默认格式，也可以根据需要定制。</p><p><img src="image_1K6lhufTYa.png"></p></li><li><p>基于日志分析问题</p><p>将来我们开发的应用系统中，不仅包含Java代码，还有很多中间件服务器。任何子系统出现故障我们都是通过日志来定位问题、分析故障原因。甚至更复杂的系统还会专门开发日志子系统，在主系统出现问题时抓取日志数据供维护人员参考。</p><p>而日志数据必须要有确定格式才便于格式化和抓取，这肯定不是随意写sout就能实现的。</p></li></ol></li></ol><h3 id="2-Java日志体系演变"><a href="#2-Java日志体系演变" class="headerlink" title="2. Java日志体系演变"></a>2. Java日志体系演变</h3><p>1996年早期，欧洲安全电子市场项目组决定编写它自己的程序跟踪API(Tracing API)。经过不断的完善，这个API终于成为一个十分受欢迎的Java日志软件包，即Log4j（由Ceki创建）。后来Log4j成为Apache基金会项目中的一员,Ceki也加入Apache组织。​ 后来Log4j近乎成了Java社区的日志标准。据说Apache基金会还曾经建议Sun引入Log4j到java的标准库中，但Sun拒绝了。​ 2002年Java1.4发布，Sun推出了自己的日志库JUL(Java Util Logging),其实现基本模仿了Log4j的实现。在JUL出来以前，Log4j就已经成为一项成熟的技术，使得Log4j在选择上占据了一定的优势。​ 接着，Apache推出了Jakarta Commons Logging门面，看来Apache想统一日志江湖了，JCL只是定义了一套日志接口(其内部也提供一个Simple Log的简单实现)，支持运行时动态加载日志组件的实现，也就是说，在你应用代码里，只需调用Commons Logging的接口，底层实现可以是Log4j，也可以是JUL(Java实现)。​ 后来(2006年)，Ceki不适应Apache的工作方式，离开了Apache。然后先后创建了Slf4j(日志门面接口，类似于Commons Logging)和Logback(Slf4j的实现)两个项目，并回瑞典创建了QOS公司，QOS官网上是这样描述Logback的：The Generic，Reliable Fast&amp;Flexible Logging Framework(一个通用，可靠，快速且灵活的日志框架)。</p><p>门面：类似于标准层、接口层</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>JCL（Jakarta Commons Logging）</td><td>陈旧</td></tr><tr><td>SLF4J（Simple Logging Facade for Java）</td><td>适合（<strong>同一作者</strong>）</td></tr><tr><td>jboss-logging</td><td>特殊专业领域使用</td></tr></tbody></table><p>实现</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>log4j</td><td>最初版（<strong>同一作者</strong>）</td></tr><tr><td>JUL（java.util.logging）</td><td>JDK自带</td></tr><tr><td>log4j2</td><td>Apache收购log4j后全面重构，内部实现和log4j完全不同</td></tr><tr><td>logback</td><td>优雅、强大（<strong>同一作者</strong>）</td></tr></tbody></table><p><strong>最佳拍档</strong></p><ul><li>门面：SLF4J</li><li>实现：logback</li></ul><h3 id="3-最佳拍档用法"><a href="#3-最佳拍档用法" class="headerlink" title="3. 最佳拍档用法"></a>3. 最佳拍档用法</h3><ol><li><p>依赖导入</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- 日志 ， 会自动传递slf4j门面--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>代码测试</p><p>代码图解</p><p><img src="image_HasKvwKkFt.png"></p><p>测试结果</p><p><img src="image_rM7o5_JxMx.png"></p></li><li><p>引入配置</p><p>Logback要求配置文件名称必须是logback.xml，存放路径在main&#x2F;resources目录下。</p><p><img src="image_1yTJ2l_3CU.png"></p><p>通过配置文件，可以配置输出格式、输出级别、输出位置等！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置，ConsoleAppender表示输出到控制台 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：TRACE、DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别，可以是包名或全类名。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.wzb.mybatis&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mybatis日志输出配置</p><p>我们可以在mybatis的配置文件使用<strong>settings标签</strong>设置，输出运行过程SQL日志！</p><p>日志配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- SLF4J 选择slf4j输出！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-Lombok插件的使用"><a href="#4-Lombok插件的使用" class="headerlink" title="4. Lombok插件的使用"></a>4. Lombok插件的使用</h3><h4 id="4-1-Lombok简介"><a href="#4-1-Lombok简介" class="headerlink" title="4.1 Lombok简介"></a>4.1 Lombok简介</h4><p>传统实体类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Integer empId;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String empName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Double empSalary;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getEmpId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpId</span><span class="params">(Integer empId)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empId = empId;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmpName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpName</span><span class="params">(String empName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empName = empName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Double <span class="title function_">getEmpSalary</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> empSalary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmpSalary</span><span class="params">(Double empSalary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empSalary = empSalary;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Employee&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;empId=&quot;</span> + empId +</span><br><span class="line">                <span class="string">&quot;, empName=&#x27;&quot;</span> + empName + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, empSalary=&quot;</span> + empSalary +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Employee</span><span class="params">(Integer empId, String empName, Double empSalary)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.empId = empId;</span><br><span class="line">        <span class="built_in">this</span>.empName = empName;</span><br><span class="line">        <span class="built_in">this</span>.empSalary = empSalary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用Lombok</p><p>既然getXxx()、setXxx()方法、toString()方法、构造器都是按照固定格式生成的，那能否由程序自动生成呢？</p><p><img src="image_etk1A3OTpm.png"></p><p>使用Lombok注解就可以省略生成getXxx()、setXxx()方法、toString()方法、构造器等固定格式代码的繁琐操作，提高开发效率。包括Logger日志对象。</p><p>Lombok原理</p><p>Lombok是将自动生成的代码织入字节码文件中，从而实现：源代码没有，但是字节码文件有——毕竟我们最终运行的是字节码文件，只要字节码文件中有即可。而这个过程因为要参与源文件编译，所以需要安装IDEA插件。</p><h4 id="4-2-Lombok安装"><a href="#4-2-Lombok安装" class="headerlink" title="4.2 Lombok安装"></a>4.2 Lombok安装</h4><p><img src="image_CCXiQR1OtY.png"></p><p><img src="image_KSrGd0biVQ.png"></p><p><img src="image_PoEh-9GVrR.png"></p><h4 id="4-3-Lombok使用注解"><a href="#4-3-Lombok使用注解" class="headerlink" title="4.3 Lombok使用注解"></a>4.3 Lombok使用注解</h4><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.18.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解功能</p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>注解</td><td>作用</td></tr><tr><td>@Data</td><td>生成getXxx()方法、setXxx()方法、toString()、equals()、canEqual()、hashCode()方法</td></tr><tr><td>@AllArgsConstructor</td><td>生成全参构造器</td></tr><tr><td>@NoArgsConstructor</td><td>生成无参构造器</td></tr><tr><td>@Slf4j</td><td>生成日志对象</td></tr><tr><td>@Getter</td><td>生成getXxx()方法</td></tr><tr><td>@Setter</td><td>生成setXxx()方法</td></tr><tr><td>@ToString</td><td>生成toString()方法</td></tr></tbody></table><h2 id="三、MyBatis基本使用"><a href="#三、MyBatis基本使用" class="headerlink" title="三、MyBatis基本使用"></a>三、MyBatis基本使用</h2><h3 id="1-向SQL语句传参"><a href="#1-向SQL语句传参" class="headerlink" title="1. 向SQL语句传参"></a>1. 向SQL语句传参</h3><h4 id="1-2-形式"><a href="#1-2-形式" class="headerlink" title="1.2 #{}形式"></a>1.2 <strong>#{}形式</strong></h4><p>Mybatis会将SQL语句中的#{}转换为问号占位符。</p><p><img src="image_8RlmGCLaBQ.png"></p><h4 id="1-3-形式"><a href="#1-3-形式" class="headerlink" title="1.3 ${}形式"></a>1.3 <strong>${}形式</strong></h4><p>${}形式传参，底层Mybatis做的是字符串拼接操作。</p><p><img src="image__ojXNgTyaD.png"></p><p>通常不会采用${}的方式传值。一个特定的适用场景是：通过Java程序动态生成数据库表，表名部分需要Java程序通过参数传入；而JDBC对于表名部分是不能使用问号占位符的，此时只能使用</p><p>结论：实际开发中，能用#{}实现的，肯定不用${}。</p><p>特殊情况： 动态的不是值，是列名或者关键字，需要使用${}拼接</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注解方式传入参数！！</span></span><br><span class="line"><span class="meta">@Select(&quot;select * from user where $&#123;column&#125; = #&#123;value&#125;&quot;)</span></span><br><span class="line">User <span class="title function_">findByColumn</span><span class="params">(<span class="meta">@Param(&quot;column&quot;)</span> String column, </span></span><br><span class="line"><span class="params">                                <span class="meta">@Param(&quot;value&quot;)</span> String value)</span>;</span><br></pre></td></tr></table></figure><h3 id="2-数据输入"><a href="#2-数据输入" class="headerlink" title="2. 数据输入"></a>2. 数据输入</h3><h4 id="2-1-Mybatis总体机制概括"><a href="#2-1-Mybatis总体机制概括" class="headerlink" title="2.1 Mybatis总体机制概括"></a>2.1 <strong>Mybatis总体机制概括</strong></h4><p>MyBatis 是一个 ORM 框架，核心工作是做 Java对象 和 数据库数据 之间的映射和转换。它通过配置和映射，将 JDBC 的复杂操作封装起来，让你能像操作对象一样操作数据库。</p><h4 id="2-2-概念说明"><a href="#2-2-概念说明" class="headerlink" title="2.2 概念说明"></a>2.2 <strong>概念说明</strong></h4><p>这里数据输入具体是指上层方法（例如Service方法）调用Mapper接口时，数据传入的形式。</p><ul><li>简单类型：只包含一个值的数据类型<ul><li>基本数据类型：int、byte、short、double、……</li><li>基本数据类型的包装类型：Integer、Character、Double、……</li><li>字符串类型：String</li></ul></li><li>复杂类型：包含多个值的数据类型<ul><li>实体类类型：Employee、Department、……</li><li>集合类型：List、Set、Map、……</li><li>数组类型：int[]、String[]、……</li><li>复合类型：List&lt;Employee&gt;、实体类中包含集合……</li></ul></li></ul><h4 id="2-3-单个简单类型参数"><a href="#2-3-单个简单类型参数" class="headerlink" title="2.3 单个简单类型参数"></a>2.3 <strong>单个简单类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wzb.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>单个简单类型参数，在#{}中可以随意命名，但是没有必要。通常还是使用和接口方法参数同名。</p></blockquote><h4 id="2-4-实体类类型参数"><a href="#2-4-实体类类型参数" class="headerlink" title="2.4 实体类类型参数"></a>2.4 <strong>实体类类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary) values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应关系</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img006.f9958c52.png"></p><p>结论</p><p>Mybatis会根据#{}中传入的数据，加工成getXxx()方法，通过反射在实体类对象中调用这个方法，从而获取到对应的数据。填充到#{}解析后的问号占位符这个位置。</p><h4 id="2-5-零散的简单类型数据"><a href="#2-5-零散的简单类型数据" class="headerlink" title="2.5 零散的简单类型数据"></a>2.5 <strong>零散的简单类型数据</strong></h4><p>零散的多个简单类型参数，如果没有特殊处理，那么Mybatis无法识别自定义名称：</p><p><img src="image_eE-zzn7oRy.png"></p><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateEmployee</span><span class="params">(<span class="meta">@Param(&quot;empId&quot;)</span> Integer empId,<span class="meta">@Param(&quot;empSalary&quot;)</span> Double empSalary)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployee&quot;</span>&gt;</span></span><br><span class="line">  update t_emp set emp_salary=#&#123;empSalary&#125; where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应关系</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img007.976da128.png"></p><h4 id="2-6-Map类型参数"><a href="#2-6-Map类型参数" class="headerlink" title="2.6 Map类型参数"></a>2.6 <strong>Map类型参数</strong></h4><p>Mapper接口中抽象方法的声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">updateEmployeeByMap</span><span class="params">(Map&lt;String, Object&gt; paramMap)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeByMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  update t_emp set emp_salary=#&#123;empSalaryKey&#125; where emp_id=#&#123;empIdKey&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> SqlSession session;</span><br><span class="line"><span class="comment">//junit5会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">            .build(</span><br><span class="line">                    Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">            .openSession();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdateEmpNameByMap</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">mapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  Map&lt;String, Object&gt; paramMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">  paramMap.put(<span class="string">&quot;empSalaryKey&quot;</span>, <span class="number">999.99</span>);</span><br><span class="line">  paramMap.put(<span class="string">&quot;empIdKey&quot;</span>, <span class="number">5</span>);</span><br><span class="line">  <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> mapper.updateEmployeeByMap(paramMap);</span><br><span class="line">  log.info(<span class="string">&quot;result = &quot;</span> + result);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//junit5会在每一个@Test方法后执行@@AfterEach方法</span></span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    session.commit();</span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>对应关系</strong></p><p>#{}中写Map中的key</p><p><strong>使用场景</strong></p><p>有很多零散的参数需要传递，但是没有对应的实体类类型可以使用。使用@Param注解一个一个传入又太麻烦了。所以都封装到Map中。</p><h3 id="3-数据输出"><a href="#3-数据输出" class="headerlink" title="3. 数据输出"></a>3. 数据输出</h3><h4 id="3-1-输出概述"><a href="#3-1-输出概述" class="headerlink" title="3.1 输出概述"></a>3.1 输出概述</h4><p>数据输出总体上有两种形式：</p><ul><li>增删改操作返回的受影响行数：直接使用 int 或 long 类型接收即可</li><li>查询操作的查询结果</li></ul><p>我们需要做的是，指定查询的输出数据类型即可！</p><p>并且插入场景下，实现主键数据回显示！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">psmt</span> <span class="operator">=</span> <span class="literal">null</span> ;</span><br><span class="line">        <span class="comment">// Statement  PreparedStatement  CallableStatement</span></span><br><span class="line">        psmt = conn.prepareStatement(<span class="string">&quot;sql&quot;</span> , Statement.RETURN_GENERATED_KEYS);</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> psmt.executeUpdate(); <span class="comment">//返回的是影响行数</span></span><br><span class="line">        <span class="comment">//如果是insert，而且数据库是自增列。如何获取自增列的值呢？</span></span><br><span class="line">        <span class="type">ResultSet</span> <span class="variable">rs</span> <span class="operator">=</span> psmt.getGeneratedKeys();</span><br><span class="line">        <span class="type">long</span> <span class="variable">id</span> <span class="operator">=</span> rs.getLong(<span class="number">1</span>); <span class="comment">//获取自增列的值</span></span><br><span class="line">        <span class="comment">//为什么需要获取自增列的值？</span></span><br><span class="line">        <span class="comment">//场景： 确认订单这个动作中，至少包含两大操作：1) 向订单表insert一条记录    2) 向订单详情表添加n条记录</span></span><br><span class="line">        <span class="comment">// 订单详情表中有一列：订单id号，是一个外键，指向订单表的id</span></span><br><span class="line">        <span class="comment">// 因此第二步操作时，必须知道第一步返回的自增列的值</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        订单表：</span></span><br><span class="line"><span class="comment">        id    userid    money   orderDate</span></span><br><span class="line"><span class="comment">        1     u001      99      2023-10-07 13:50:30</span></span><br><span class="line"><span class="comment">        2     u002      15      2023-10-07 13:51:35</span></span><br><span class="line"><span class="comment">        订单详情表：</span></span><br><span class="line"><span class="comment">        id    productId   price    productCount     orderId</span></span><br><span class="line"><span class="comment">        1     p001        9        2                1</span></span><br><span class="line"><span class="comment">        2     p002        5        1                1</span></span><br><span class="line"><span class="comment">        3     p006        8        5                1</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure><h4 id="3-2-单个简单类型"><a href="#3-2-单个简单类型" class="headerlink" title="3.2 单个简单类型"></a>3.2 单个简单类型</h4><p>Mapper接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">selectEmpCount</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpCount&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;int&quot;</span>&gt;</span></span><br><span class="line">  select count(*) from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>Mybatis 内部给常用的数据类型设定了很多别名。 以 int 类型为例，可以写的名称有：int、integer、Integer、java.lang.Integer、Int、INT、INTEGER 等等。</p></blockquote><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testEmpCount</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> employeeMapper.selectEmpCount();</span><br><span class="line"></span><br><span class="line">  log.info(<span class="string">&quot;count = &quot;</span> + count);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>细节解释：</strong></p><p>select标签，通过resultType指定查询返回值类型！</p><p>resultType &#x3D; “全限定符 ｜ 别名 ｜ 如果是返回集合类型，写范型类型即可”</p><p>别名问题：</p><p><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" title="https:&#x2F;&#x2F;mybatis.org&#x2F;mybatis-3&#x2F;zh&#x2F;configuration.html#typeAliases">https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases</a></p><p>类型别名可为 Java 类型设置一个缩写名字。 它仅用于 XML 配置，意在降低冗余的全限定类名书写。例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Author&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Author&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">&quot;Blog&quot;</span> <span class="attr">type</span>=<span class="string">&quot;domain.blog.Blog&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当这样配置时，<code>Blog</code> 可以用在任何使用 <code>domain.blog.Blog</code> 的地方。</p><p>也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;domain.blog&quot;</span>/&gt;</span> <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><p>每一个在包 <code>domain.blog</code> 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 <code>domain.blog.Author</code> 的别名为 <code>author</code>；若有注解，则别名为其注解值。见下面的例子：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Alias(&quot;author&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Author</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是Mybatis为常见的 Java 类型内建的类型别名。它们都是不区分大小写的，注意，为了应对原始类型的命名重复，采取了特殊的命名风格。</p><table><thead><tr><th>别名</th><th>映射的类型</th></tr></thead><tbody><tr><td>_byte</td><td>byte</td></tr><tr><td>_char (since 3.5.10)</td><td>char</td></tr><tr><td>_character (since 3.5.10)</td><td>char</td></tr><tr><td>_long</td><td>long</td></tr><tr><td>_short</td><td>short</td></tr><tr><td>_int</td><td>int</td></tr><tr><td>_integer</td><td>int</td></tr><tr><td>_double</td><td>double</td></tr><tr><td>_float</td><td>float</td></tr><tr><td>_boolean</td><td>boolean</td></tr><tr><td>string</td><td>String</td></tr><tr><td>byte</td><td>Byte</td></tr><tr><td>char (since 3.5.10)</td><td>Character</td></tr><tr><td>character (since 3.5.10)</td><td>Character</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>integer</td><td>Integer</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>date</td><td>Date</td></tr><tr><td>decimal</td><td>BigDecimal</td></tr><tr><td>bigdecimal</td><td>BigDecimal</td></tr><tr><td>biginteger</td><td>BigInteger</td></tr><tr><td>object</td><td>Object</td></tr><tr><td>object[]</td><td>Object[]</td></tr><tr><td>map</td><td>Map</td></tr><tr><td>hashmap</td><td>HashMap</td></tr><tr><td>list</td><td>List</td></tr><tr><td>arraylist</td><td>ArrayList</td></tr><tr><td>collection</td><td>Collection</td></tr></tbody></table><h4 id="3-3-返回实体类对象"><a href="#3-3-返回实体类对象" class="headerlink" title="3.3 返回实体类对象"></a>3.3 返回实体类对象</h4><p>Mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee <span class="title function_">selectEmployee</span><span class="params">(Integer empId)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wzb.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;maomi&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过给数据库表字段加别名，让查询结果的每一列都和Java实体类中属性对应起来。</p><p>增加全局配置自动识别对应关系</p><p>在 Mybatis 全局配置文件中，做了下面的配置，select语句中可以不给字段设置别名</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在全局范围内对Mybatis进行配置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 具体配置 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 从org.apache.ibatis.session.Configuration类中可以查看能使用的配置项 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 将mapUnderscoreToCamelCase属性配置为true，表示开启自动映射驼峰式命名规则 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求数据库表字段命名方式：单词_单词 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 规则要求Java实体类属性名命名方式：首字母小写的驼峰式命名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-4-返回Map类型"><a href="#3-4-返回Map类型" class="headerlink" title="3.4 返回Map类型"></a>3.4 返回Map类型</h4><p>适用于SQL查询返回的各个字段综合起来并不和任何一个现有的实体类对应，没法封装到实体类对象中。能够封装成实体类类型的，就不使用Map类型。</p><p>Mapper接口的抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,Object&gt; <span class="title function_">selectEmpNameAndMaxSalary</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Map&lt;String,Object&gt; selectEmpNameAndMaxSalary(); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 返回工资最高的员工的姓名和他的工资 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmpNameAndMaxSalary&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">  SELECT</span><br><span class="line">    emp_name 员工姓名,</span><br><span class="line">    emp_salary 员工工资,</span><br><span class="line">    (SELECT AVG(emp_salary) FROM t_emp) 部门平均工资</span><br><span class="line">  FROM t_emp WHERE emp_salary=(</span><br><span class="line">    SELECT MAX(emp_salary) FROM t_emp</span><br><span class="line">  )</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者：  查询部门ID号以及部门的平均薪资 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> select deptNo , avg(sal) as avg_sal from emp group by deptNo</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> deptNo , avg_sal</span></span><br><span class="line"><span class="comment"> d001     1500</span></span><br><span class="line"><span class="comment"> d002     1750</span></span><br><span class="line"><span class="comment"> d003     1600</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testQueryEmpNameAndSalary</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line"></span><br><span class="line">  Map&lt;String, Object&gt; resultMap = employeeMapper.selectEmpNameAndMaxSalary();</span><br><span class="line"></span><br><span class="line">  Set&lt;Map.Entry&lt;String, Object&gt;&gt; entrySet = resultMap.entrySet();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : entrySet) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> entry.getKey();</span><br><span class="line"></span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> entry.getValue();</span><br><span class="line"></span><br><span class="line">    log.info(key + <span class="string">&quot;=&quot;</span> + value);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-5-返回List类型"><a href="#3-5-返回List类型" class="headerlink" title="3.5 返回List类型"></a>3.5 返回List类型</h4><p>查询结果返回多个实体类对象，希望把多个实体类对象放在List集合中返回。此时不需要任何特殊处理，在resultType属性中还是设置实体类类型即可。</p><p>Mapper接口中抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Employee&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectAll(); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wzb.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary</span><br><span class="line">  from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  List&lt;Employee&gt; employeeList = employeeMapper.selectAll();</span><br><span class="line">  <span class="keyword">for</span> (Employee employee : employeeList) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;employee = &quot;</span> + employee);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-6-返回主键值"><a href="#3-6-返回主键值" class="headerlink" title="3.6 返回主键值"></a>3.6 返回主键值</h4><ol><li><p><strong>自增长类型主键</strong></p><p>Mapper接口中的抽象方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">insertEmployee</span><span class="params">(Employee employee)</span>;</span><br></pre></td></tr></table></figure><p>SQL语句</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int insertEmployee(Employee employee); --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- useGeneratedKeys属性字面意思就是“使用生成的主键” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- keyProperty属性可以指定主键在实体类对象中对应的属性名，Mybatis会将拿到的主键值存入这个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertEmployee&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;empId&quot;</span>&gt;</span></span><br><span class="line">  insert into t_emp(emp_name,emp_salary)</span><br><span class="line">  values(#&#123;empName&#125;,#&#123;empSalary&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><p>junit测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSaveEmp</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">EmployeeMapper</span> <span class="variable">employeeMapper</span> <span class="operator">=</span> session.getMapper(EmployeeMapper.class);</span><br><span class="line">  <span class="type">Employee</span> <span class="variable">employee</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Employee</span>();</span><br><span class="line">  employee.setEmpName(<span class="string">&quot;john&quot;</span>);</span><br><span class="line">  employee.setEmpSalary(<span class="number">666.66</span>);</span><br><span class="line">  employeeMapper.insertEmployee(employee);</span><br><span class="line">  log.info(<span class="string">&quot;employee.getEmpId() = &quot;</span> + employee.getEmpId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意</p><p>Mybatis是将自增主键的值设置到实体类对象中，而不是以Mapper接口方法返回值的形式返回。</p></li><li><p><strong>非自增长类型主键</strong></p><p>而对于不支持自增型主键的数据库（例如 Oracle）或者字符串类型主键，则可以使用 selectKey 子元素：selectKey 元素将会首先运行，id 会被设置，然后插入语句会被调用！</p><p>使用 <code>selectKey</code> 帮助插入UUID作为字符串类型主键示例：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertUser&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">selectKey</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;java.lang.String&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">order</span>=<span class="string">&quot;BEFORE&quot;</span>&gt;</span></span><br><span class="line">        SELECT UUID() as id</span><br><span class="line">    <span class="tag">&lt;/<span class="name">selectKey</span>&gt;</span></span><br><span class="line">    INSERT INTO user (id, username, password) </span><br><span class="line">    VALUES (</span><br><span class="line">        #&#123;id&#125;,</span><br><span class="line">        #&#123;username&#125;,</span><br><span class="line">        #&#123;password&#125;</span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在上例中，我们定义了一个 <code>insertUser</code> 的插入语句来将 <code>User</code> 对象插入到 <code>user</code> 表中。我们使用 <code>selectKey</code> 来查询 UUID 并设置到 <code>id</code> 字段中。</p><p>通过 <code>keyProperty</code> 属性来指定查询到的 UUID 赋值给对象中的 <code>id</code> 属性，而 <code>resultType</code> 属性指定了 UUID 的类型为 <code>java.lang.String</code>。</p><p>需要注意的是，我们将 <code>selectKey</code> 放在了插入语句的前面，这是因为 MySQL 在 <code>insert</code> 语句中只支持一个 <code>select</code> 子句，而 <code>selectKey</code> 中查询 UUID 的语句就是一个 <code>select</code> 子句，因此我们需要将其放在前面。</p><p>最后，在将 <code>User</code> 对象插入到 <code>user</code> 表中时，我们直接使用对象中的 <code>id</code> 属性来插入主键值。</p><p>使用这种方式，我们可以方便地插入 UUID 作为字符串类型主键。当然，还有其他插入方式可以使用，如使用Java代码生成UUID并在类中显式设置值等。需要根据具体应用场景和需求选择合适的插入方式。</p></li></ol><h4 id="3-7-实体类属性和数据库字段对应关系"><a href="#3-7-实体类属性和数据库字段对应关系" class="headerlink" title="3.7 实体类属性和数据库字段对应关系"></a>3.7 实体类属性和数据库字段对应关系</h4><ol><li><p>别名对应</p><p>将字段的别名设置成和实体类属性一致。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 编写具体的SQL语句，使用id属性唯一的标记一条SQL语句 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- resultType属性：指定封装查询结果的Java实体类的全类名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wzb.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- Mybatis负责把SQL语句中的#&#123;&#125;部分替换成“?”占位符 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 给每一个字段设置一个别名，让别名和Java实体类中属性名一致 --&gt;</span></span><br><span class="line">  select emp_id empId,emp_name empName,emp_salary empSalary from t_emp where emp_id=#&#123;maomi&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>关于实体类属性的约定：<br>getXxx()方法、setXxx()方法把方法名中的get或set去掉，首字母小写。</p></blockquote></li><li><p>全局配置自动识别驼峰式命名规则</p><p>在Mybatis全局配置文件加入如下配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用settings对Mybatis全局进行设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 将xxx_xxx这样的列名自动映射到xxXxx这样驼峰式命名的属性名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><p>SQL语句中可以不使用别名</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Employee selectEmployee(Integer empId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployee&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wzb.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>使用resultMap</p><p>使用resultMap标签定义对应关系，再在后面的SQL语句中引用这个对应关系</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 专门声明一个resultMap设定column到property之间的对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRMResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.wzb.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 使用id标签设置主键列和主键属性之间的对应关系 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- column属性用于指定字段名；property属性用于指定Java实体类属性名 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;emp_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!-- 使用result标签设置普通字段和Java实体类属性之间的关系 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;emp_salary&quot;</span> <span class="attr">property</span>=<span class="string">&quot;empSalary&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- Employee selectEmployeeByRM(Integer empId); --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByRM&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectEmployeeByRMResultMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      select emp_id,emp_name,emp_salary from t_emp where emp_id=#&#123;empId&#125;</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="4-CRUD强化练习"><a href="#4-CRUD强化练习" class="headerlink" title="4. CRUD强化练习"></a>4. CRUD强化练习</h3><ol><li><p>准备数据库数据</p><p>首先，我们需要准备一张名为 <code>user</code> 的表。该表包含字段 id（主键）、username、password。创建SQL如下：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `<span class="keyword">user</span>` (</span><br><span class="line">  `id` <span class="type">INT</span>(<span class="number">11</span>) <span class="keyword">NOT NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `username` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  `password` <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY KEY</span> (`id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>INNODB AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span> <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>实体类准备</p><p>接下来，我们需要定义一个实体类 <code>User</code>，来对应 user 表的一行数据。</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="variable">@Data</span></span><br><span class="line">public class <span class="keyword">User</span> &#123;</span><br><span class="line">  private <span class="type">Integer</span> id;</span><br><span class="line">  private String username;</span><br><span class="line">  private String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Mapper接口定义</p><p>定义一个 Mapper 接口 <code>UserMapper</code>，并在其中添加 user 表的增、删、改、查方法。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">update</span><span class="params">(User user)</span>;</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">  User <span class="title function_">selectById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">  List&lt;User&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>MapperXML编写</p><p>在 resources &#x2F;mappers目录下创建一个名为 <code>UserMapper.xml</code> 的 XML 文件，包含与 Mapper 接口中相同的五个 SQL 语句，并在其中，将查询结果映射到 <code>User</code> 实体中。</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;https://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- namespace等于mapper接口类的全限定名,这样实现对应 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.wzb.mapper.UserMapper&quot;</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 定义一个插入语句，并获取主键值 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insert&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    INSERT INTO user(username, password)</span><br><span class="line">                VALUES(#&#123;username&#125;, #&#123;password&#125;)</span><br><span class="line">  <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    UPDATE user SET username=#&#123;username&#125;, password=#&#123;password&#125;</span><br><span class="line">    WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">    DELETE FROM user WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- resultType使用user别名，稍后需要配置！--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, username, password FROM user WHERE id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- resultType返回值类型为集合，所以只写范型即可！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">    SELECT id, username, password FROM user</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>MyBatis配置文件</p><p>位置：resources: mybatis-config.xml&#x20;</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启驼峰式映射--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;mapUnderscoreToCamelCase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 开启logback日志输出--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;SLF4J&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 给实体类起别名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wzb.pojo&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- environments表示配置Mybatis的开发环境，可以配置多个环境，在众多具体环境中，使用default属性指定实际运行时使用的环境。default属性的取值是environment标签的id属性的值。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- environment表示配置Mybatis的一个具体的环境 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- Mybatis的内置的事务管理器 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 建立数据库连接的具体信息 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.cj.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/mybatis-example&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- Mapper注册：指定Mybatis映射文件的具体位置 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- mapper标签：配置一个具体的Mapper映射文件 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- resource属性：指定Mapper映射文件的实际存储位置，这里需要使用一个以类路径根目录为基准的相对路径 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--    对Maven工程的目录结构来说，resources目录下的内容会直接放入类路径，所以这里我们可以以resources目录为基准 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/UserMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wzb.mapper.UserMapper;</span><br><span class="line"><span class="keyword">import</span> com.wzb.pojo.User;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.AfterEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.BeforeEach;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.test</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">                .build(</span><br><span class="line">                        Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">                .openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">createTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">        user.setUsername(<span class="string">&quot;admin&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;123456&quot;</span>);</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        userMapper.insert(user);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        user.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        user.setPassword(<span class="string">&quot;111111&quot;</span>);</span><br><span class="line">        userMapper.update(user);</span><br><span class="line">        user = userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        userMapper.delete(<span class="number">1</span>);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectByIdTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userMapper.selectById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">selectAllTest</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> session.getMapper(UserMapper.class);</span><br><span class="line">        List&lt;User&gt; userList = userMapper.selectAll();</span><br><span class="line">        System.out.println(<span class="string">&quot;userList = &quot;</span> + userList);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法后执行@@AfterEach方法</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="5-mapperXML标签总结"><a href="#5-mapperXML标签总结" class="headerlink" title="5. mapperXML标签总结"></a>5. mapperXML标签总结</h3><p>MyBatis 的真正强大在于它的语句映射，这是它的魔力所在。由于它的异常强大，映射器的 XML 文件就显得相对简单。如果拿它跟具有相同功能的 JDBC 代码进行对比，你会立即发现省掉了将近 95% 的代码。MyBatis 致力于减少使用成本，让用户能更专注于 SQL 代码。</p><p>SQL 映射文件只有很少的几个顶级元素（按照应被定义的顺序列出）：</p><ul><li><code>insert</code> – 映射插入语句。</li><li><code>update</code> – 映射更新语句。</li><li><code>delete</code> – 映射删除语句。</li><li><code>select</code> – 映射查询语句。</li></ul><p><strong>select标签：</strong></p><p>MyBatis 在查询和结果映射做了相当多的改进。一个简单查询的 select 元素是非常简单：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectPerson&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">resultType</span>=<span class="string">&quot;hashmap&quot;</span>&gt;</span> SELECT * FROM PERSON WHERE ID = #&#123;id&#125; <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个语句名为 selectPerson，接受一个 int（或 Integer）类型的参数，并返回一个 HashMap 类型的对象，其中的键是列名，值便是结果行中的对应值。</p><p>注意参数符号：#{id}</p><p>MyBatis 创建一个预处理语句（PreparedStatement）参数，在 JDBC 中，这样的一个参数在 SQL 中会由一个“?”来标识，并被传递到一个新的预处理语句中，就像这样：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 近似的 JDBC 代码，非 MyBatis 代码...</span></span><br><span class="line"><span class="type">String</span> <span class="variable">selectPerson</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM PERSON WHERE ID=?&quot;</span>;</span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">ps</span> <span class="operator">=</span> conn.prepareStatement(selectPerson);</span><br><span class="line">ps.setInt(<span class="number">1</span>,id);</span><br></pre></td></tr></table></figure><p>select 元素允许你配置很多属性来配置每条语句的行为细节：</p><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>resultType</code></td><td>期望从这条语句中返回结果的类全限定名或别名。 注意，如果返回的是集合，那应该设置为集合包含的类型，而不是集合本身的类型。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>resultMap</code></td><td>对外部 resultMap 的命名引用。结果映射是 MyBatis 最强大的特性，如果你对其理解透彻，许多复杂的映射问题都能迎刃而解。 resultType 和 resultMap 之间只能同时使用一个。</td></tr><tr><td><code>timeout</code></td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr></tbody></table><p><strong>insert, update 和 delete标签：</strong></p><p>数据变更语句 insert，update 和 delete 的实现非常接近：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;insertAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyProperty</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">keyColumn</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;updateAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">delete</span></span></span><br><span class="line"><span class="tag">  <span class="attr">id</span>=<span class="string">&quot;deleteAuthor&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">statementType</span>=<span class="string">&quot;PREPARED&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">timeout</span>=<span class="string">&quot;20&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>id</code></td><td>在命名空间中唯一的标识符，可以被用来引用这条语句。</td></tr><tr><td><code>timeout</code></td><td>这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为未设置（unset）（依赖数据库驱动）。</td></tr><tr><td><code>statementType</code></td><td>可选 STATEMENT，PREPARED 或 CALLABLE。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。</td></tr><tr><td><code>useGeneratedKeys</code></td><td>（仅适用于 insert 和 update）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键（比如：像 MySQL 和 SQL Server 这样的关系型数据库管理系统的自动递增字段），默认值：false。</td></tr><tr><td><code>keyProperty</code></td><td>（仅适用于 insert 和 update）指定能够唯一识别对象的属性，MyBatis 会使用 getGeneratedKeys 的返回值或 insert 语句的 selectKey 子元素设置它的值，默认值：未设置（<code>unset</code>）。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr><tr><td><code>keyColumn</code></td><td>（仅适用于 insert 和 update）设置生成键值在表中的列名，在某些数据库（像 PostgreSQL）中，当主键列不是表中的第一列的时候，是必须设置的。如果生成列不止一个，可以用逗号分隔多个属性名称。</td></tr></tbody></table><h3 id="6-mybatis配置文件设计标签和顶层结构如下："><a href="#6-mybatis配置文件设计标签和顶层结构如下：" class="headerlink" title="6.mybatis配置文件设计标签和顶层结构如下："></a>6.mybatis配置文件设计标签和顶层结构如下：</h3><ul><li>configuration（配置）<ul><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#properties" title="properties（属性）">properties（属性）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#settings" title="settings（设置）">settings（设置）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeAliases" title="typeAliases（类型别名）">typeAliases（类型别名）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#typeHandlers" title="typeHandlers（类型处理器）">typeHandlers（类型处理器）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#objectFactory" title="objectFactory（对象工厂）">objectFactory（对象工厂）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#plugins" title="plugins（插件）">plugins（插件）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#environments" title="environments（环境配置）">environments（环境配置）</a><ul><li>environment（环境变量）<ul><li>transactionManager（事务管理器）</li><li>dataSource（数据源）</li></ul></li></ul></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#databaseIdProvider" title="databaseIdProvider（数据库厂商标识）">databaseIdProvider（数据库厂商标识）</a></li><li><a href="https://mybatis.org/mybatis-3/zh/configuration.html#mappers" title="mappers（映射器）">mappers（映射器）</a></li></ul></li></ul><p>settings设置项：</p><table><thead><tr><th>设置名</th><th>描述</th><th>有效值</th><th>默认值</th></tr></thead><tbody><tr><td>cacheEnabled</td><td>全局性地开启或关闭所有映射器配置文件中已配置的任何缓存。</td><td>true | false</td><td>true</td></tr><tr><td>lazyLoadingEnabled</td><td>延迟加载的全局开关。当开启时，所有关联对象都会延迟加载。 特定关联关系中可通过设置 <code>fetchType</code> 属性来覆盖该项的开关状态。</td><td>true | false</td><td>false</td></tr><tr><td>aggressiveLazyLoading</td><td>开启时，任一方法的调用都会加载该对象的所有延迟加载属性。 否则，每个延迟加载属性会按需加载（参考 <code>lazyLoadTriggerMethods</code>)。</td><td>true | false</td><td>false （在 3.4.1 及之前的版本中默认为 true）</td></tr><tr><td>multipleResultSetsEnabled</td><td>是否允许单个语句返回多结果集（需要数据库驱动支持）。</td><td>true | false</td><td>true</td></tr><tr><td>useColumnLabel</td><td>使用列标签代替列名。实际表现依赖于数据库驱动，具体可参考数据库驱动的相关文档，或通过对比测试来观察。</td><td>true | false</td><td>true</td></tr><tr><td>useGeneratedKeys</td><td>允许 JDBC 支持自动生成主键，需要数据库驱动支持。如果设置为 true，将强制使用自动生成主键。尽管一些数据库驱动不支持此特性，但仍可正常工作（如 Derby）。</td><td>true | false</td><td>False</td></tr><tr><td>autoMappingBehavior</td><td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr><tr><td>autoMapping UnknownColumnBehavior</td><td>指定发现自动映射目标未知列（或未知属性类型）的行为。 *   <code>NONE</code>: 不做任何反应 *   <code>WARNING</code>: 输出警告日志（<code>&#39;org.apache.ibatis.session.AutoMappingUnknownColumnBehavior&#39;</code> 的日志等级必须设置为 <code>WARN</code>） *   <code>FAILING</code>: 映射失败 (抛出 <code>SqlSessionException</code>)</td><td>NONE, WARNING, FAILING</td><td>NONE</td></tr><tr><td>safeRowBoundsEnabled</td><td>是否允许在嵌套语句中使用分页（RowBounds）。如果允许使用则设置为 false。</td><td>true | false</td><td>False</td></tr><tr><td>safeResultHandlerEnabled</td><td>是否允许在嵌套语句中使用结果处理器（ResultHandler）。如果允许使用则设置为 false。</td><td>true | false</td><td>True</td></tr><tr><td>mapUnderscoreToCamelCase</td><td>是否开启驼峰命名自动映射，即从经典数据库列名 A_COLUMN 映射到经典 Java 属性名 aColumn。</td><td>true | false</td><td>False</td></tr><tr><td>localCacheScope</td><td>MyBatis 利用本地缓存机制（Local Cache）防止循环引用和加速重复的嵌套查询。 默认值为 SESSION，会缓存一个会话中执行的所有查询。 若设置值为 STATEMENT，本地缓存将仅用于执行语句，对相同 SqlSession 的不同查询将不会进行缓存。</td><td>SESSION | STATEMENT</td><td>SESSION</td></tr><tr><td>jdbcTypeForNull</td><td>当没有为参数指定特定的 JDBC 类型时，空值的默认 JDBC 类型。 某些数据库驱动需要指定列的 JDBC 类型，多数情况直接用一般类型即可，比如 NULL、VARCHAR 或 OTHER。</td><td>JdbcType 常量，常用值：NULL、VARCHAR 或 OTHER。</td><td>OTHER</td></tr><tr><td>lazyLoadTriggerMethods</td><td>指定对象的哪些方法触发一次延迟加载。</td><td>用逗号分隔的方法列表。</td><td>equals,clone,hashCode,toString</td></tr><tr><td>defaultScriptingLanguage</td><td>指定动态 SQL 生成使用的默认脚本语言。</td><td>一个类型别名或全限定类名。</td><td>org.apache.ibatis.scripting.xmltags.XMLLanguageDriver</td></tr><tr><td>defaultEnumTypeHandler</td><td>指定 Enum 使用的默认 <code>TypeHandler</code> 。（新增于 3.4.5）</td><td>一个类型别名或全限定类名。</td><td>org.apache.ibatis.type.EnumTypeHandler</td></tr><tr><td>callSettersOnNulls</td><td>指定当结果集中值为 null 的时候是否调用映射对象的 setter（map 对象时为 put）方法，这在依赖于 Map.keySet() 或 null 值进行初始化时比较有用。注意基本类型（int、boolean 等）是不能设置成 null 的。</td><td>true | false</td><td>false</td></tr><tr><td>returnInstanceForEmptyRow</td><td>当返回行的所有列都是空时，MyBatis默认返回 <code>null</code>。 当开启这个设置时，MyBatis会返回一个空实例。 请注意，它也适用于嵌套的结果集（如集合或关联）。（新增于 3.4.2）</td><td>true | false</td><td>false</td></tr><tr><td>logPrefix</td><td>指定 MyBatis 增加到日志名称的前缀。</td><td>任何字符串</td><td>未设置</td></tr><tr><td>logImpl</td><td>指定 MyBatis 所用日志的具体实现，未指定时将自动查找。</td><td>SLF4J | LOG4J（3.5.9 起废弃） | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING</td><td>未设置</td></tr><tr><td>proxyFactory</td><td>指定 Mybatis 创建可延迟加载对象所用到的代理工具。</td><td>CGLIB （3.5.10 起废弃） | JAVASSIST</td><td>JAVASSIST （MyBatis 3.3 以上）</td></tr><tr><td>vfsImpl</td><td>指定 VFS 的实现</td><td>自定义 VFS 的实现的类全限定名，以逗号分隔。</td><td>未设置</td></tr><tr><td>useActualParamName</td><td>允许使用方法签名中的名称作为语句参数名称。 为了使用该特性，你的项目必须采用 Java 8 编译，并且加上 <code>-parameters</code> 选项。（新增于 3.4.1）</td><td>true | false</td><td>true</td></tr><tr><td>configurationFactory</td><td>指定一个提供 <code>Configuration</code> 实例的类。 这个被返回的 Configuration 实例用来加载被反序列化对象的延迟加载属性值。 这个类必须包含一个签名为<code>static Configuration getConfiguration()</code> 的方法。（新增于 3.2.3）</td><td>一个类型别名或完全限定类名。</td><td>未设置</td></tr><tr><td>shrinkWhitespacesInSql</td><td>从SQL中删除多余的空格字符。请注意，这也会影响SQL中的文字字符串。 (新增于 3.5.5)</td><td>true | false</td><td>false</td></tr><tr><td>defaultSqlProviderType</td><td>指定一个拥有 provider 方法的 sql provider 类 （新增于 3.5.6）. 这个类适用于指定 sql provider 注解上的<code>type</code>（或 <code>value</code>） 属性（当这些属性在注解中被忽略时）。 (e.g. <code>@SelectProvider</code>)</td><td>类型别名或者全限定名</td><td>未设置</td></tr><tr><td>nullableOnForEach</td><td>为 ‘foreach’ 标签的 ‘nullable’ 属性指定默认值。（新增于 3.5.9）</td><td>true | false</td><td>false</td></tr><tr><td>argNameBased ConstructorAutoMapping</td><td>当应用构造器自动映射时，参数名称被用来搜索要映射的列，而不再依赖列的顺序。（新增于 3.5.10）</td><td>true | false</td><td>false</td></tr></tbody></table><h2 id="四、MyBatis多表映射"><a href="#四、MyBatis多表映射" class="headerlink" title="四、MyBatis多表映射"></a>四、MyBatis多表映射</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">回顾数据库知识：</span><br><span class="line">1) 实体(Entity)和实体之间的关系</span><br><span class="line">   一对一、一对多、多对多</span><br><span class="line">   一对一主键关联:</span><br><span class="line">   人员基本信息表 、  身份证信息维护表</span><br><span class="line">   id(pk)  name        id(pk)    cardNo  </span><br><span class="line">   1       jim         1         321281199910011232</span><br><span class="line">   2       tom         2     </span><br><span class="line">   一对一唯一外键关联</span><br><span class="line">   男生表       、  女生表</span><br><span class="line">   boyid   boyname       girlid   girlname   bodyID(unique)</span><br><span class="line">   1       jim           5        lina        1</span><br><span class="line">   2       tom           6        rose        2</span><br><span class="line">2) 数据库的设计范式</span><br><span class="line">   第一范式：列不可再分</span><br><span class="line">           假设有一列：收货地址。这一列的值是：广东省深圳市宝安区航城街道西部硅谷尚某谷分谷</span><br><span class="line">   第二范式：一张表只描述一件事</span><br><span class="line">           假设有学员表，其中包含如下的列： 学号、姓名、出生年月、性别、籍贯、父母姓名、血型</span><br><span class="line">           我认为学号、姓名、出生年月、性别 这四个作为学员表是必备的。但是父母姓名、父母学历、父母的工作性质等这些信息并不是学员本身的信息。因此这张学员表不符合第二范式。应该拆分成两张表。</span><br><span class="line">   第三范式：表中的每一列和主键是直接相关，而不是间接相关。</span><br><span class="line">          假设有学员成绩表，不符合第三范式的表设计如下： </span><br><span class="line">          id    stuid    stuname  subjectid   subjectname   score</span><br><span class="line">          1     s001     jim      sub001      语文           90</span><br><span class="line">          上面这张表不符合第三范式，因为学员的姓名以及科目名称都可以通过他们的id和学员表以及科目表进行表连接查询到。</span><br><span class="line">          符合第三范式的设计方案应该如下：</span><br><span class="line">          id    stuid     subid    score</span><br><span class="line">          1     s001      sub001    90</span><br><span class="line">3) 数据库范式和数据库的查询性能之间的权衡</span><br><span class="line">   我们到底是想让数据库设计的更规范，还是想让数据库的查询性能更高？</span><br><span class="line">   就拿上面的成绩表的例子来说，我们应该降低数据库的范式，从而获得更好的查询性能。</span><br><span class="line">   相反的，对于一些固定不变的，数据量较小的，我们应该尽可能的提高数据库的规范度，从而最大程度减少冗余(性能方面可以通过其他技术手段解决，例如缓存)</span><br><span class="line">4) 表连接的基础知识点：</span><br><span class="line">   左外连接、右外连接、内连接、全连接（mysql不支持）</span><br><span class="line">   </span><br><span class="line">   mysql&gt; create database mydb charset utf8;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.03 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use mydb;</span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; show tables;</span><br><span class="line">Empty set (0.01 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table t1</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; c1 varchar(5),</span><br><span class="line">    -&gt; c2 varchar(5)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.07 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; create table t2</span><br><span class="line">    -&gt; (</span><br><span class="line">    -&gt; c3 varchar(5),</span><br><span class="line">    -&gt; c4 varchar(5)</span><br><span class="line">    -&gt; );</span><br><span class="line">Query OK, 0 rows affected (0.04 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t1 values</span><br><span class="line">    -&gt; (&#x27;a&#x27;,&#x27;b&#x27;),(&#x27;b&#x27;,&#x27;c&#x27;),(&#x27;c&#x27;,&#x27;d&#x27;);</span><br><span class="line">Query OK, 3 rows affected (0.02 sec)</span><br><span class="line">Records: 3  Duplicates: 0  Warnings: 0</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into t2 values</span><br><span class="line">    -&gt; (&#x27;b&#x27;,&#x27;d&#x27;),(&#x27;e&#x27;,&#x27;f&#x27;);</span><br><span class="line">Query OK, 2 rows affected (0.02 sec)</span><br><span class="line">Records: 2  Duplicates: 0  Warnings: 0</span><br><span class="line">   </span><br><span class="line">表连接的基本语句如下：</span><br><span class="line">mysql&gt; select * from t1 , t2 ;</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| c1   | c2   | c3   | c4   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| a    | b    | e    | f    |</span><br><span class="line">| a    | b    | b    | d    |</span><br><span class="line">| b    | c    | e    | f    |</span><br><span class="line">| b    | c    | b    | d    |</span><br><span class="line">| c    | d    | e    | f    |</span><br><span class="line">| c    | d    | b    | d    |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1 inner join t2 on 1 = 1 ;</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| c1   | c2   | c3   | c4   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| a    | b    | e    | f    |</span><br><span class="line">| a    | b    | b    | d    |</span><br><span class="line">| b    | c    | e    | f    |</span><br><span class="line">| b    | c    | b    | d    |</span><br><span class="line">| c    | d    | e    | f    |</span><br><span class="line">| c    | d    | b    | d    |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">6 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1 inner join t2 on c1 = c3 ;</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| c1   | c2   | c3   | c4   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| b    | c    | b    | d    |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1 left join t2 on c1 = c3 ;</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| c1   | c2   | c3   | c4   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| a    | b    | NULL | NULL |</span><br><span class="line">| b    | c    | b    | d    |</span><br><span class="line">| c    | d    | NULL | NULL |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1 right join t2 on c1 = c3 ;</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| c1   | c2   | c3   | c4   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| b    | c    | b    | d    |</span><br><span class="line">| NULL | NULL | e    | f    |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">2 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1 full join t2 on c1 = c3 ;</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| c1   | c2   | c3   | c4   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| b    | c    | b    | d    |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">1 row in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t1 left join t2 on c1 = c3</span><br><span class="line">    -&gt; union</span><br><span class="line">    -&gt; select * from t1 right join t2 on c1 = c3 ;</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| c1   | c2   | c3   | c4   |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">| a    | b    | NULL | NULL |</span><br><span class="line">| b    | c    | b    | d    |</span><br><span class="line">| c    | d    | NULL | NULL |</span><br><span class="line">| NULL | NULL | e    | f    |</span><br><span class="line">+------+------+------+------+</span><br><span class="line">4 rows in set (0.01 sec)</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mybatis中对于对象关联分为两大类：对一关联、对多关联</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对多关联： 一个学员拥有多本书。 </span><br><span class="line">Student、Book</span><br><span class="line">Student：sid , sname , bookList</span><br><span class="line">Book: bid , bname</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">对一关联：一本书只属于一个学员</span><br><span class="line">Student、Book</span><br><span class="line">Student：sid , sname , bookList</span><br><span class="line">Book: bid , bname , student</span><br></pre></td></tr></table></figure><h3 id="1-多表映射概念"><a href="#1-多表映射概念" class="headerlink" title="1. 多表映射概念"></a>1. 多表映射概念</h3><ol><li><p><strong>多表查询结果映射思路</strong></p><p>上面课程中，我全面讲解了单表的mybatis操作！但是开发中更多的是<strong>多表查询</strong>需求，这种情况我们如何让进行处理？</p><p>MyBatis 思想是：数据库不可能永远是你所想或所需的那个样子。 我们希望每个数据库都具备良好的第三范式或 BCNF 范式，可惜它们并不都是那样。 如果能有一种数据库映射模式，完美适配所有的应用程序查询需求，那就太好了，而 ResultMap 就是 MyBatis 的完美答案。&#x20;</p><p>官方例子：我们如何映射下面这个语句？&#x20;</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 非常复杂的语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectBlogDetails&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;detailedBlogResultMap&quot;</span>&gt;</span></span><br><span class="line">  select</span><br><span class="line">       B.id as blog_id,</span><br><span class="line">       B.title as blog_title,</span><br><span class="line">       B.author_id as blog_author_id,</span><br><span class="line">       A.id as author_id,</span><br><span class="line">       A.username as author_username,</span><br><span class="line">       A.password as author_password,</span><br><span class="line">       A.email as author_email,</span><br><span class="line">       A.bio as author_bio,</span><br><span class="line">       A.favourite_section as author_favourite_section,</span><br><span class="line">       P.id as post_id,</span><br><span class="line">       P.blog_id as post_blog_id,</span><br><span class="line">       P.author_id as post_author_id,</span><br><span class="line">       P.created_on as post_created_on,</span><br><span class="line">       P.section as post_section,</span><br><span class="line">       P.subject as post_subject,</span><br><span class="line">       P.draft as draft,</span><br><span class="line">       P.body as post_body,</span><br><span class="line">       C.id as comment_id,</span><br><span class="line">       C.post_id as comment_post_id,</span><br><span class="line">       C.name as comment_name,</span><br><span class="line">       C.comment as comment_text,</span><br><span class="line">       T.id as tag_id,</span><br><span class="line">       T.name as tag_name</span><br><span class="line">  from Blog B</span><br><span class="line">       left outer join Author A on B.author_id = A.id</span><br><span class="line">       left outer join Post P on B.id = P.blog_id</span><br><span class="line">       left outer join Comment C on P.id = C.post_id</span><br><span class="line">       left outer join Post_Tag PT on PT.post_id = P.id</span><br><span class="line">       left outer join Tag T on PT.tag_id = T.id</span><br><span class="line">  where B.id = #&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>你可能想把它映射到一个智能的对象模型，这个对象表示了一篇博客，它由某位作者所写，有很多的博文，每篇博文有零或多条的评论和标签。 我们先来看看下面这个完整的例子，它是一个非常复杂的结果映射（假设作者，博客，博文，评论和标签都是类型别名）。 虽然它看起来令人望而生畏，但其实非常简单。&#x20;</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 非常复杂的结果映射 --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">&quot;detailedBlogResultMap&quot;</span> type=<span class="string">&quot;Blog&quot;</span>&gt;</span><br><span class="line">  &lt;constructor&gt;</span><br><span class="line">    &lt;idArg column=<span class="string">&quot;blog_id&quot;</span> javaType=<span class="string">&quot;int&quot;</span>/&gt;</span><br><span class="line">  &lt;/constructor&gt;</span><br><span class="line">  &lt;result property=<span class="string">&quot;title&quot;</span> column=<span class="string">&quot;blog_title&quot;</span>/&gt;</span><br><span class="line">  &lt;association property=<span class="string">&quot;author&quot;</span> javaType=<span class="string">&quot;Author&quot;</span>&gt;</span><br><span class="line">    &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;author_id&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;username&quot;</span> column=<span class="string">&quot;author_username&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;password&quot;</span> column=<span class="string">&quot;author_password&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;email&quot;</span> column=<span class="string">&quot;author_email&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;bio&quot;</span> column=<span class="string">&quot;author_bio&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;favouriteSection&quot;</span> column=<span class="string">&quot;author_favourite_section&quot;</span>/&gt;</span><br><span class="line">  &lt;/association&gt;</span><br><span class="line">  &lt;collection property=<span class="string">&quot;posts&quot;</span> ofType=<span class="string">&quot;Post&quot;</span>&gt;</span><br><span class="line">    &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;post_id&quot;</span>/&gt;</span><br><span class="line">    &lt;result property=<span class="string">&quot;subject&quot;</span> column=<span class="string">&quot;post_subject&quot;</span>/&gt;</span><br><span class="line">    &lt;association property=<span class="string">&quot;author&quot;</span> javaType=<span class="string">&quot;Author&quot;</span>/&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;comments&quot;</span> ofType=<span class="string">&quot;Comment&quot;</span>&gt;</span><br><span class="line">      &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;comment_id&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">    &lt;collection property=<span class="string">&quot;tags&quot;</span> ofType=<span class="string">&quot;Tag&quot;</span> &gt;</span><br><span class="line">      &lt;id property=<span class="string">&quot;id&quot;</span> column=<span class="string">&quot;tag_id&quot;</span>/&gt;</span><br><span class="line">    &lt;/collection&gt;</span><br><span class="line">  &lt;/collection&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br></pre></td></tr></table></figure><p>你现在可能看不懂，接下来我们要学习将多表查询结果使用ResultMap标签映射到实体类对象上！</p><p><strong>我们的学习目标：</strong></p><p>多表查询语句复习</p><p>多表结果承接实体类设计</p><p>使用ResultMap完成多表结果映射</p></li><li><p><strong>实体类设计方案</strong></p><p>多表关系回顾：（双向查看）</p><ul><li><p>一对一</p><p>夫妻关系，人和身份证号</p></li></ul></li></ol><ul><li><p>一对多</p><pre><code>用户和用户的订单，锁和钥匙</code></pre><ul><li><p>多对多</p><p>老师和学生，部门和员工</p></li></ul><p>实体类设计关系：（单向查看）</p></li><li><p>对一 ： 夫妻一方对应另一方，订单对应用户都是对一关系</p><pre><code>实体类设计：对一关系下，类中只要包含单个对方对象类型属性即可！</code></pre><p>例如：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br></pre></td></tr></table></figure><br><br>  private Integer customerId;<br>  private String customerName;</p><p>}</p><pre><code>public class Order {</code></pre><p>  private Integer orderId;<br>  private String orderName;<br>  private Customer customer;&#x2F;&#x2F; 体现的是对一的关系</p><pre><code>}  </code></pre><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- 对多: 用户对应的订单，讲师对应的学生或者学生对应的讲师都是对多关系：</span><br><span class="line"></span><br><span class="line">  实体类设计：对多关系下，类中只要包含对方类型集合属性即可！</span><br><span class="line">  ```java</span><br><span class="line">  public class Customer &#123;</span><br><span class="line">  </span><br><span class="line">    private Integer customerId;</span><br><span class="line">    private String customerName;</span><br><span class="line">    private List&lt;Order&gt; orderList;// 体现的是对多的关系</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public class Order &#123;</span><br><span class="line">  </span><br><span class="line">    private Integer orderId;</span><br><span class="line">    private String orderName;</span><br><span class="line">    </span><br><span class="line">    private Customer customer;// 体现的是对一的关系</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></li></ul>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">多表结果实体类设计小技巧：</span><br><span class="line">  </span><br><span class="line">​对一，属性中包含对方对象</span><br><span class="line">  </span><br><span class="line">​对多，属性中包含对方对象集合</span><br><span class="line">  </span><br><span class="line">  只有真实发生多表查询时，才需要设计和修改实体类，否则不提前设计和修改实体类！</span><br><span class="line">    </span><br><span class="line">  ​无论多少张表联查，实体类设计都是两两考虑!</span><br><span class="line">    </span><br><span class="line">  ​在查询映射的时候，只需要关注本次查询相关的属性！例如：查询订单和对应的客户，就不要关注客户中的订单集合！</span><br><span class="line">  </span><br></pre></td></tr></table></figure>  <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  </span><br></pre></td></tr></table></figure><ol start="3"><li><p><strong>多表映射案例准备</strong></p><p>数据库：</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE TABLE</span> `t_customer` (`customer_id` <span class="type">INT</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT, `customer_name` <span class="type">CHAR</span>(<span class="number">100</span>), <span class="keyword">PRIMARY KEY</span> (`customer_id`) );</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> `t_order` ( `order_id` <span class="type">INT</span> <span class="keyword">NOT NULL</span> AUTO_INCREMENT, `order_name` <span class="type">CHAR</span>(<span class="number">100</span>), `customer_id` <span class="type">INT</span>, <span class="keyword">PRIMARY KEY</span> (`order_id`) ); </span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_customer` (`customer_name`) <span class="keyword">VALUES</span> (<span class="string">&#x27;c01&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o1&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o2&#x27;</span>, <span class="string">&#x27;1&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT INTO</span> `t_order` (`order_name`, `customer_id`) <span class="keyword">VALUES</span> (<span class="string">&#x27;o3&#x27;</span>, <span class="string">&#x27;1&#x27;</span>); </span><br></pre></td></tr></table></figure><p>实际开发时，一般在开发过程中，不给数据库表设置外键约束。<br>原因是避免调试不方便。<br>一般是功能开发完成，再加外键约束检查是否有bug。</p><p>实体类设计：</p><p>稍后会进行订单关联客户查询，也会进行客户关联订单查询，所以在这先练习设计</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Customer</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer customerId;</span><br><span class="line">  <span class="keyword">private</span> String customerName;</span><br><span class="line">  <span class="keyword">private</span> List&lt;Order&gt; orderList;<span class="comment">// 体现的是对多的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Order</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> Integer orderId;</span><br><span class="line">  <span class="keyword">private</span> String orderName;</span><br><span class="line">  <span class="keyword">private</span> Customer customer;<span class="comment">// 体现的是对一的关系</span></span><br><span class="line">  </span><br><span class="line">&#125;  </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-对一映射"><a href="#2-对一映射" class="headerlink" title="2. 对一映射"></a>2. 对一映射</h3><ol><li><p>需求说明</p><p>根据ID查询订单，以及订单关联的用户的信息！</p></li><li><p>OrderMapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderMapper</span> &#123;</span><br><span class="line">  Order <span class="title function_">selectOrderWithCustomer</span><span class="params">(Integer orderId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>OrderMapper.xml配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 创建resultMap实现“对一”关联关系映射 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- id属性：通常设置为这个resultMap所服务的那条SQL语句的id加上“ResultMap” --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- type属性：要设置为这个resultMap所服务的那条SQL语句最终要返回的类型 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderWithCustomerResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;order&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 先设置Order自身属性和字段的对应关系 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;order_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderId&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;order_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;orderName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 使用association标签配置“对一”关联关系 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- property属性：在Order类中对一的一端进行引用时使用的属性名 --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- javaType属性：一的一端类的全类名 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">&quot;customer&quot;</span> <span class="attr">javaType</span>=<span class="string">&quot;customer&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置Customer类的属性和字段名之间的对应关系 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">&quot;customer_id&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerId&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;customer_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;customerName&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">association</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Order selectOrderWithCustomer(Integer orderId); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectOrderWithCustomer&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;selectOrderWithCustomerResultMap&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  SELECT order_id,order_name,c.customer_id,customer_name</span><br><span class="line">  FROM t_order o</span><br><span class="line">  LEFT JOIN t_customer c</span><br><span class="line">  ON o.customer_id=c.customer_id</span><br><span class="line">  WHERE o.order_id=#&#123;orderId&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>对应关系可以参考下图：</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img018.6c3cfc17.png"></p></li><li><p>Mybatis全局注册Mapper文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>junit测试程序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SqlSession session;</span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法前执行@BeforeEach方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        session = <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>()</span><br><span class="line">                .build(</span><br><span class="line">                        Resources.getResourceAsStream(<span class="string">&quot;mybatis-config.xml&quot;</span>))</span><br><span class="line">                .openSession();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRelationshipToOne</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="type">OrderMapper</span> <span class="variable">orderMapper</span> <span class="operator">=</span> session.getMapper(OrderMapper.class);</span><br><span class="line">      <span class="comment">// 查询Order对象，检查是否同时查询了关联的Customer对象</span></span><br><span class="line">      <span class="type">Order</span> <span class="variable">order</span> <span class="operator">=</span> orderMapper.selectOrderWithCustomer(<span class="number">2</span>);</span><br><span class="line">      log.info(<span class="string">&quot;order = &quot;</span> + order);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// junit会在每一个@Test方法后执行@@AfterEach方法</span></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        session.commit();</span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关键词</p><p>在“对一”关联关系中，我们的配置比较多，但是关键词就只有：<strong>association</strong>和<strong>javaType</strong></p></li></ol><h3 id="3-对多映射"><a href="#3-对多映射" class="headerlink" title="3. 对多映射"></a>3. 对多映射</h3><ol><li><p>需求说明</p><p>查询客户和客户关联的订单信息！</p></li><li><p>CustomerMapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">CustomerMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">  Customer <span class="title function_">selectCustomerWithOrderList</span><span class="params">(Integer customerId)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>CustomerMapper.xml文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!-- 配置resultMap实现从Customer到OrderList的“对多”关联关系 --&gt;</span><br><span class="line">&lt;resultMap id=<span class="string">&quot;selectCustomerWithOrderListResultMap&quot;</span></span><br><span class="line"></span><br><span class="line">  type=<span class="string">&quot;customer&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 映射Customer本身的属性 --&gt;</span><br><span class="line">  &lt;id column=<span class="string">&quot;customer_id&quot;</span> property=<span class="string">&quot;customerId&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;result column=<span class="string">&quot;customer_name&quot;</span> property=<span class="string">&quot;customerName&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- collection标签：映射“对多”的关联关系 --&gt;</span><br><span class="line">  &lt;!-- property属性：在Customer类中，关联“多”的一端的属性名 --&gt;</span><br><span class="line">  &lt;!-- ofType属性：集合属性中元素的类型 --&gt;</span><br><span class="line">  &lt;collection property=<span class="string">&quot;orderList&quot;</span> ofType=<span class="string">&quot;order&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 映射Order的属性 --&gt;</span><br><span class="line">    &lt;id column=<span class="string">&quot;order_id&quot;</span> property=<span class="string">&quot;orderId&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;result column=<span class="string">&quot;order_name&quot;</span> property=<span class="string">&quot;orderName&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/collection&gt;</span><br><span class="line"></span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Customer <span class="title function_">selectCustomerWithOrderList</span><span class="params">(Integer customerId)</span>; --&gt;</span><br><span class="line">&lt;select id=<span class="string">&quot;selectCustomerWithOrderList&quot;</span> resultMap=<span class="string">&quot;selectCustomerWithOrderListResultMap&quot;</span>&gt;</span><br><span class="line">  SELECT c.customer_id,c.customer_name,o.order_id,o.order_name</span><br><span class="line">  FROM t_customer c</span><br><span class="line">  LEFT JOIN t_order o</span><br><span class="line">  ON c.customer_id=o.customer_id</span><br><span class="line">  WHERE c.customer_id=#&#123;customerId&#125;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>对应关系可以参考下图：</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img019.dba418c1.png"></p></li><li><p>Mybatis全局注册Mapper文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/CustomerMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>junit测试程序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="type">CustomerMapper</span> <span class="variable">customerMapper</span> <span class="operator">=</span> session.getMapper(CustomerMapper.class);</span><br><span class="line">  <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">  <span class="type">Customer</span> <span class="variable">customer</span> <span class="operator">=</span> customerMapper.selectCustomerWithOrderList(<span class="number">1</span>);</span><br><span class="line">  log.info(<span class="string">&quot;customer.getCustomerId() = &quot;</span> + customer.getCustomerId());</span><br><span class="line">  log.info(<span class="string">&quot;customer.getCustomerName() = &quot;</span> + customer.getCustomerName());</span><br><span class="line">  List&lt;Order&gt; orderList = customer.getOrderList();</span><br><span class="line">  <span class="keyword">for</span> (Order order : orderList) &#123;</span><br><span class="line">    log.info(<span class="string">&quot;order = &quot;</span> + order);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>关键词</p><p>在“对多”关联关系中，同样有很多配置，但是提炼出来最关键的就是：“collection”和“ofType”</p></li></ol><h3 id="4-多对多映射"><a href="#4-多对多映射" class="headerlink" title="4. 多对多映射"></a>4. 多对多映射</h3><blockquote><p>多对多其实就是两个对多</p></blockquote><p>多对多是表关系，实体关系单向来看就是对多！只不过需要三表查询（中间表）！！！</p><p>多对多表关系示意图：</p><p><img src="image_2LrhO3TtMz.png"></p><p>多对多具体业务实现：</p><ol><li><p>数据库脚本</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">-- 创建讲师表</span><br><span class="line">CREATE TABLE <span class="title function_">t_teacher</span> <span class="params">(</span></span><br><span class="line"><span class="params">  t_id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">  t_name VARCHAR(<span class="number">50</span>)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建学生表</span><br><span class="line">CREATE TABLE <span class="title function_">t_student</span> <span class="params">(</span></span><br><span class="line"><span class="params">  s_id INT PRIMARY KEY,</span></span><br><span class="line"><span class="params">  s_name VARCHAR(<span class="number">50</span>)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 创建中间表</span><br><span class="line">CREATE TABLE <span class="title function_">t_inner</span> <span class="params">(</span></span><br><span class="line"><span class="params">  t_id INT,</span></span><br><span class="line"><span class="params">  s_id INT,</span></span><br><span class="line"><span class="params">  PRIMARY KEY (t_id, s_id)</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">-- 向讲师表中插入测试数据</span><br><span class="line">INSERT INTO t_teacher <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO t_teacher <span class="title function_">VALUES</span> <span class="params">(<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO t_teacher <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">-- 向学生表中插入测试数据</span><br><span class="line">INSERT INTO t_student <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="string">&#x27;小明&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO t_student <span class="title function_">VALUES</span> <span class="params">(<span class="number">2</span>, <span class="string">&#x27;小红&#x27;</span>)</span>;</span><br><span class="line">INSERT INTO t_student <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="string">&#x27;小刚&#x27;</span>)</span>;</span><br><span class="line"></span><br><span class="line">-- 向中间表中插入测试数据</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="number">1</span>)</span>;</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">1</span>, <span class="number">3</span>)</span>;</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span>;</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="number">1</span>)</span>;</span><br><span class="line">INSERT INTO t_inner <span class="title function_">VALUES</span> <span class="params">(<span class="number">3</span>, <span class="number">3</span>)</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>查询需求分析</p><p>查询讲师信息，并且查询每名讲师关联的学生信息！</p></li><li><p>实体类设计</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Teacher</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer tId;</span><br><span class="line">    <span class="keyword">private</span> String tName;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Student&gt; students;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer sId;</span><br><span class="line">    <span class="keyword">private</span> String sName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TeacherMapper接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">TeacherMapper</span> &#123;</span><br><span class="line">    List&lt;Teacher&gt; <span class="title function_">findAllTeachers</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>TeacherMapperXML文件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;mapper namespace=<span class="string">&quot;com.example.mapper.TeacherMapper&quot;</span>&gt;</span><br><span class="line">    &lt;select id=<span class="string">&quot;findAllTeachers&quot;</span> resultMap=<span class="string">&quot;teacherMap&quot;</span>&gt;</span><br><span class="line">        SELECT t.t_id, t.t_name, s.s_id, s.s_name</span><br><span class="line">        FROM t_teacher t LEFT OUTER JOIN t_inner i ON t.t_id = i.t_id</span><br><span class="line">        LEFT OUTER JOIN t_student s ON i.s_id = s.s_id</span><br><span class="line">    &lt;/select&gt;</span><br><span class="line"></span><br><span class="line">    &lt;resultMap id=<span class="string">&quot;teacherMap&quot;</span> type=<span class="string">&quot;teacher&quot;</span>&gt;</span><br><span class="line">        &lt;id property=<span class="string">&quot;tId&quot;</span> column=<span class="string">&quot;t_id&quot;</span> /&gt;</span><br><span class="line">        &lt;result property=<span class="string">&quot;tName&quot;</span> column=<span class="string">&quot;t_name&quot;</span> /&gt;</span><br><span class="line">        &lt;collection property=<span class="string">&quot;students&quot;</span> ofType=<span class="string">&quot;student&quot;</span> &gt;</span><br><span class="line">          &lt;id property=<span class="string">&quot;sId&quot;</span> column=<span class="string">&quot;s_id&quot;</span> /&gt;</span><br><span class="line">          &lt;result property=<span class="string">&quot;sName&quot;</span> column=<span class="string">&quot;s_name&quot;</span> /&gt;</span><br><span class="line">        &lt;/collection&gt;</span><br><span class="line">    &lt;/resultMap&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>Mybatis全局注册Mapper文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 注册Mapper配置文件：告诉Mybatis我们的Mapper配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 在mapper标签的resource属性中指定Mapper配置文件以“类路径根目录”为基准的相对路径 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/OrderMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/CustomerMapper.xml&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;mappers/TeacherMapper.xml&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>junit测试程序</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTeacherRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">TeacherMapper</span> <span class="variable">teacherMapper</span> <span class="operator">=</span> session.getMapper(TeacherMapper.class);</span><br><span class="line">    <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">    List&lt;Teacher&gt; allTeachers = teacherMapper.findAllTeachers();</span><br><span class="line">    log.info(<span class="string">&quot;allTeachers = &quot;</span> + allTeachers);</span><br><span class="line">    <span class="keyword">for</span> (Teacher teacher : allTeachers) &#123;</span><br><span class="line">        log.info(<span class="string">&quot;teacher = &quot;</span> + teacher);</span><br><span class="line">        log.info(<span class="string">&quot;teacher.students = &quot;</span> + teacher.getStudents());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-多表映射总结"><a href="#5-多表映射总结" class="headerlink" title="5. 多表映射总结"></a>5. 多表映射总结</h3><h4 id="5-1-多表映射优化"><a href="#5-1-多表映射优化" class="headerlink" title="5.1 多表映射优化"></a>5.1 多表映射优化</h4><table><thead><tr><th>setting属性</th><th>属性含义</th><th>可选值</th><th>默认值</th></tr></thead><tbody><tr><td>autoMappingBehavior</td><td>指定 MyBatis 应如何自动映射列到字段或属性。 NONE 表示关闭自动映射；PARTIAL 只会自动映射没有定义嵌套结果映射的字段。 FULL 会自动映射任何复杂的结果集（无论是否嵌套）。</td><td>NONE, PARTIAL, FULL</td><td>PARTIAL</td></tr></tbody></table><p>我们可以将autoMappingBehavior设置为full,进行多表resultMap映射的时候，可以省略符合列和属性命名映射规则（列名&#x3D;属性名，或者开启驼峰映射也可以自定映射）的result标签！</p><p>修改mybati-sconfig.xml:</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--开启resultMap自动映射 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;autoMappingBehavior&quot;</span> <span class="attr">value</span>=<span class="string">&quot;FULL&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>修改teacherMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;teacherMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;teacher&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;tId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;t_id&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启自动映射,并且开启驼峰式支持!可以省略 result!--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;result property=&quot;tName&quot; column=&quot;t_name&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;students&quot;</span> <span class="attr">ofType</span>=<span class="string">&quot;student&quot;</span> &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sId&quot;</span> <span class="attr">column</span>=<span class="string">&quot;s_id&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!--            &lt;result property=&quot;sName&quot; column=&quot;s_name&quot; /&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-多表映射总结"><a href="#5-2-多表映射总结" class="headerlink" title="5.2 多表映射总结"></a>5.2 多表映射总结</h4><table><thead><tr><th>关联关系</th><th>配置项关键词</th><th>所在配置文件和具体位置</th></tr></thead><tbody><tr><td>对一</td><td>association标签&#x2F;javaType属性&#x2F;property属性</td><td>Mapper配置文件中的resultMap标签内</td></tr><tr><td>对多</td><td>collection标签&#x2F;ofType属性&#x2F;property属性</td><td>Mapper配置文件中的resultMap标签内</td></tr></tbody></table><h4 id="5-3-分步查询"><a href="#5-3-分步查询" class="headerlink" title="5.3 分步查询"></a>5.3 分步查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 在StudentMapper中添加一个方法：</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentMapper</span> &#123;</span><br><span class="line">    <span class="comment">//演示分步查询,根据sid查询特定的Student信息，包含Book集合</span></span><br><span class="line">    Student <span class="title function_">getStudentWithBookList</span><span class="params">(String sid )</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 在StudentMapper.xml文件中添加如下配置: --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 演示分步查询 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    根据sid查询特定的学员信息，包括他关联的book集合。</span></span><br><span class="line"><span class="comment">    上面这个功能其实可以分为两个步骤：</span></span><br><span class="line"><span class="comment">    1. 根据sid查询特定学员本身的信息 - 查学员表</span></span><br><span class="line"><span class="comment">       select * from t_stu where sid = 1</span></span><br><span class="line"><span class="comment">    2. 根据sid查询book集合        - 查图书表</span></span><br><span class="line"><span class="comment">       select * from t_book where stuid = 1</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getStudentWithBookList&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;studentWithBookListResultMap3&quot;</span>&gt;</span></span><br><span class="line">    select * from t_stu where sid = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;studentWithBookListResultMap3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;Student&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;sid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">&quot;bookList&quot;</span> <span class="attr">select</span>=<span class="string">&quot;com.wzb.mybatis.mapper.BookMapper.getBookListBySid&quot;</span> <span class="attr">column</span>=<span class="string">&quot;sid&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 新知识点仅仅是上面的两个属性： select , column --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上面的select引入的是如下的查询配置： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在BookMapper.xml文件中添加如下配置： --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 查询特定学员的图书列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;getBookListBySid&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;Book&quot;</span>&gt;</span></span><br><span class="line">    select * from t_book where stuid = #&#123;value&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="5-4-延迟加载"><a href="#5-4-延迟加载" class="headerlink" title="5.4 延迟加载"></a>5.4 延迟加载</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--  为什么需要延迟加载 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  如何设置延迟加载：--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在mybatis-config.xml文件中开启全局的延迟加载 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;lazyLoadingEnabled&quot;</span> <span class="attr">value</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单元测试方法如下：</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">//System.out.println(studentMapper.getStudentWithBookList(&quot;s001&quot;));</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> studentMapper.getStudentWithBookList(<span class="string">&quot;s001&quot;</span>);</span><br><span class="line">    System.out.println(student.getSid()+<span class="string">&quot;-&quot;</span>+student.getSname());</span><br><span class="line">    <span class="comment">//下面这句话如果注释，那么就不会查询t_book表</span></span><br><span class="line">    System.out.println(student.getBookList().size());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>延迟加载的前提条件是：分步查询。</p></blockquote><h2 id="五、MyBatis动态语句-动态SQL"><a href="#五、MyBatis动态语句-动态SQL" class="headerlink" title="五、MyBatis动态语句(动态SQL)"></a>五、MyBatis动态语句(动态SQL)</h2><h3 id="1-动态语句需求和简介"><a href="#1-动态语句需求和简介" class="headerlink" title="1. 动态语句需求和简介"></a>1. 动态语句需求和简介</h3><p>经常遇到很多按照很多查询条件进行查询的情况，比如智联招聘的职位搜索等。其中经常出现很多条件不取值的情况，在后台应该如何完成最终的SQL语句呢？</p><p><img src="image_vfoh_vetQw.png"></p><p>动态 SQL 是 MyBatis 的强大特性之一。如果你使用过 JDBC 或其它类似的框架，你应该能理解根据不同条件拼接 SQL 语句有多痛苦，例如拼接时要确保不能忘记添加必要的空格，还要注意去掉列表最后一个列名的逗号。利用动态 SQL，可以彻底摆脱这种痛苦。</p><p>使用动态 SQL 并非一件易事，但借助可用于任何 SQL 映射语句中的强大的动态 SQL 语言，MyBatis 显著地提升了这一特性的易用性。</p><p>如果你之前用过 JSTL 或任何基于类 XML 语言的文本处理器，你对动态 SQL 元素可能会感觉似曾相识。在 MyBatis 之前的版本中，需要花时间了解大量的元素。借助功能强大的基于 OGNL 的表达式，MyBatis 3 替换了之前的大部分元素，大大精简了元素种类，现在要学习的元素种类比原来的一半还要少。</p><h3 id="2-if和where标签"><a href="#2-if和where标签" class="headerlink" title="2. if和where标签"></a>2. if和where标签</h3><p>使用动态 SQL 最常见情景是根据条件包含 where  &#x2F; if 子句的一部分。比如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByCondition(Employee employee); --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByCondition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    <span class="comment">&lt;!-- where标签会自动去掉“标签体内前面多余的and/or” --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 使用if标签，让我们可以有选择的加入SQL语句的片段。这个SQL语句片段是否要加入整个SQL语句，就看if标签判断的结果是否为true --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在if标签的test属性中，可以访问实体类的属性，不可以访问数据库表的字段 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 在if标签内部，需要访问接口的参数时还是正常写#&#123;&#125; --&gt;</span></span><br><span class="line">            or emp_name=#&#123;empName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 2000&quot;</span>&gt;</span></span><br><span class="line">            or emp_salary&gt;#&#123;empSalary&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 WHERE emp_name=? or emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 WHERE emp_salary&gt;?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 没有where子句</span></span><br><span class="line"><span class="comment">         --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-set标签"><a href="#3-set标签" class="headerlink" title="3. set标签"></a>3. set标签</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- void updateEmployeeDynamic(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeDynamic&quot;</span>&gt;</span></span><br><span class="line">    update t_emp</span><br><span class="line">    <span class="comment">&lt;!-- set emp_name=#&#123;empName&#125;,emp_salary=#&#123;empSalary&#125; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用set标签动态管理set子句，并且动态去掉两端多余的逗号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary=#&#123;empSalary&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where emp_id=#&#123;empId&#125;</span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">         第一种情况：所有条件都满足 SET emp_name=?, emp_salary=?</span></span><br><span class="line"><span class="comment">         第二种情况：部分条件满足 SET emp_salary=?</span></span><br><span class="line"><span class="comment">         第三种情况：所有条件都不满足 update t_emp where emp_id=?</span></span><br><span class="line"><span class="comment">            没有set子句的update语句会导致SQL语法错误</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-trim标签-了解"><a href="#4-trim标签-了解" class="headerlink" title="4. trim标签(了解)"></a>4. trim标签(了解)</h3><p>使用trim标签控制条件部分两端是否包含某些字符</p><ul><li>prefix属性：指定要动态添加的前缀</li><li>suffix属性：指定要动态添加的后缀</li><li>prefixOverrides属性：指定要动态去掉的前缀，使用“|”分隔有可能的多个值</li><li>suffixOverrides属性：指定要动态去掉的后缀，使用“|”分隔有可能的多个值</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByTrim(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByTrim&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wzb.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender</span><br><span class="line">    from t_emp</span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- prefix属性指定要动态添加的前缀 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suffix属性指定要动态添加的后缀 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- prefixOverrides属性指定要动态去掉的前缀，使用“|”分隔有可能的多个值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- suffixOverrides属性指定要动态去掉的后缀，使用“|”分隔有可能的多个值 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 当前例子用where标签实现更简洁，但是trim标签更灵活，可以用在任何有需要的地方 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">&quot;where&quot;</span> <span class="attr">suffixOverrides</span>=<span class="string">&quot;and|or&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span></span><br><span class="line">            emp_name=#&#123;empName&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;gt;</span> 3000&quot;</span>&gt;</span></span><br><span class="line">            emp_salary&gt;#&#123;empSalary&#125; and</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empAge <span class="symbol">&amp;lt;</span>= 20&quot;</span>&gt;</span></span><br><span class="line">            emp_age=#&#123;empAge&#125; or</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;empGender==&#x27;male&#x27;&quot;</span>&gt;</span></span><br><span class="line">            emp_gender=#&#123;empGender&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-choose-when-otherwise标签"><a href="#5-choose-when-otherwise标签" class="headerlink" title="5. choose&#x2F;when&#x2F;otherwise标签"></a>5. choose&#x2F;when&#x2F;otherwise标签</h3><p>在多个分支条件中，仅执行一个。</p><ul><li>从上到下依次执行条件判断</li><li>遇到的第一个满足条件的分支会被采纳</li><li>被采纳分支后面的分支都将不被考虑</li><li>如果所有的when分支都不满足，那么就执行otherwise分支</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List&lt;Employee&gt; selectEmployeeByConditionByChoose(Employee employee) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectEmployeeByConditionByChoose&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.wzb.mybatis.entity.Employee&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_salary from t_emp</span><br><span class="line">    where</span><br><span class="line">    <span class="tag">&lt;<span class="name">choose</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empName != null&quot;</span>&gt;</span>emp_name=#&#123;empName&#125;<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;empSalary <span class="symbol">&amp;lt;</span> 3000&quot;</span>&gt;</span>emp_salary <span class="symbol">&amp;lt;</span> 3000<span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">otherwise</span>&gt;</span>1=1<span class="tag">&lt;/<span class="name">otherwise</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">     第一种情况：第一个when满足条件 where emp_name=?</span></span><br><span class="line"><span class="comment">     第二种情况：第二个when满足条件 where emp_salary &lt; 3000</span></span><br><span class="line"><span class="comment">     第三种情况：两个when都不满足 where 1=1 执行了otherwise</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="6-foreach标签"><a href="#6-foreach标签" class="headerlink" title="6. foreach标签"></a>6. foreach标签</h3><p><strong>基本用法</strong></p><p>用批量插入举例</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    collection属性：要遍历的集合</span></span><br><span class="line"><span class="comment">    item属性：遍历集合的过程中能得到每一个具体对象，在item属性中设置一个名字，将来通过这个名字引用遍历出来的对象</span></span><br><span class="line"><span class="comment">    separator属性：指定当foreach标签的标签体重复拼接字符串时，各个标签体字符串之间的分隔符</span></span><br><span class="line"><span class="comment">    open属性：指定整个循环把字符串拼好后，字符串整体的前面要添加的字符串</span></span><br><span class="line"><span class="comment">    close属性：指定整个循环把字符串拼好后，字符串整体的后面要添加的字符串</span></span><br><span class="line"><span class="comment">    index属性：这里起一个名字，便于后面引用</span></span><br><span class="line"><span class="comment">        遍历List集合，这里能够得到List集合的索引值</span></span><br><span class="line"><span class="comment">        遍历Map集合，这里能够得到Map集合的key</span></span><br><span class="line"><span class="comment"> --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;values&quot;</span> <span class="attr">index</span>=<span class="string">&quot;myIndex&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在foreach标签内部如果需要引用遍历得到的具体的一个对象，需要使用item属性声明的名称 --&gt;</span></span><br><span class="line">    (#&#123;emp.empName&#125;,#&#123;myIndex&#125;,#&#123;emp.empSalary&#125;,#&#123;emp.empGender&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>批量更新时需要注意</strong></p><p>上面批量插入的例子本质上是一条SQL语句，而实现批量更新则需要多条SQL语句拼起来，用分号分开。也就是一次性发送多条SQL语句让数据库执行。此时需要在数据库连接信息的URL地址中设置：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wzb.dev.url=jdbc:mysql:///mybatis-example?allowMultiQueries=true</span><br></pre></td></tr></table></figure><p>对应的foreach标签如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- int updateEmployeeBatch(@Param(&quot;empList&quot;) List&lt;Employee&gt; empList) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;updateEmployeeBatch&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;empList&quot;</span> <span class="attr">item</span>=<span class="string">&quot;emp&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;;&quot;</span>&gt;</span></span><br><span class="line">        update t_emp set emp_name=#&#123;emp.empName&#125; where emp_id=#&#123;emp.empId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>关于foreach标签的collection属性</strong></p><p>如果没有给接口中List类型的参数使用@Param注解指定一个具体的名字，那么在collection属性中默认可以使用collection或list来引用这个list集合。这一点可以通过异常信息看出来：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">Parameter &#x27;empList&#x27; not found. Available parameters are [arg0, collection, list]</span><br></pre></td></tr></table></figure><p>在实际开发中，为了避免隐晦的表达造成一定的误会，建议使用@Param注解明确声明变量的名称，然后在foreach标签的collection属性中按照@Param注解指定的名称来引用传入的参数。</p><h3 id="7-sql片段"><a href="#7-sql片段" class="headerlink" title="7. sql片段"></a>7. sql片段</h3><p><strong>抽取重复的SQL片段</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用sql标签抽取重复出现的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;mySelectSql&quot;</span>&gt;</span></span><br><span class="line">    select emp_id,emp_name,emp_age,emp_salary,emp_gender from t_emp</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用已抽取的SQL片段</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用include标签引用声明的SQL片段 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;mySelectSql&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、MyBatis高级扩展"><a href="#六、MyBatis高级扩展" class="headerlink" title="六、MyBatis高级扩展"></a>六、MyBatis高级扩展</h2><h3 id="1-Mapper批量映射优化"><a href="#1-Mapper批量映射优化" class="headerlink" title="1. Mapper批量映射优化"></a>1. Mapper批量映射优化</h3><ol><li><p>需求</p><p>Mapper 配置文件很多时，在全局配置文件中一个一个注册太麻烦，希望有一个办法能够一劳永逸。</p></li><li><p>配置方式</p><p>Mybatis 允许在指定 Mapper 映射文件时，只指定其所在的包：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.wzb.mapper&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时这个包下的所有 Mapper 配置文件将被自动加载、注册，比较方便。</p></li><li><p>资源创建要求</p></li></ol><ul><li>Mapper 接口和 Mapper 配置文件名称一致<ul><li>Mapper 接口：EmployeeMapper.java</li><li>Mapper 配置文件：EmployeeMapper.xml</li></ul></li><li>Mapper 配置文件放在 Mapper 接口所在的包内<ul><li><p>可以将mapperxml文件放在mapper接口所在的包！</p></li><li><p>可以在sources下创建mapper接口包一致的文件夹结构存放mapperxml文件</p><p><img src="image_sYJdBGnrob.png"></p><p><img src="image_LHdRXUdP5D.png"></p></li></ul></li></ul><h3 id="2-插件和分页插件PageHelper"><a href="#2-插件和分页插件PageHelper" class="headerlink" title="2. 插件和分页插件PageHelper"></a>2. 插件和分页插件PageHelper</h3><h4 id="2-1-插件机制和PageHelper插件介绍"><a href="#2-1-插件机制和PageHelper插件介绍" class="headerlink" title="2.1 插件机制和PageHelper插件介绍"></a>2.1 插件机制和PageHelper插件介绍</h4><p>MyBatis 对插件进行了标准化的设计，并提供了一套可扩展的插件机制。插件可以在用于语句执行过程中进行拦截，并允许通过自定义处理程序来拦截和修改 SQL 语句、映射语句的结果等。</p><p>具体来说，MyBatis 的插件机制包括以下三个组件：</p><ol><li><code>Interceptor</code>（拦截器）：定义一个拦截方法 <code>intercept</code>，该方法在执行 SQL 语句、执行查询、查询结果的映射时会被调用。</li><li><code>Invocation</code>（调用）：实际上是对被拦截的方法的封装，封装了 <code>Object target</code>、<code>Method method</code> 和 <code>Object[] args</code> 这三个字段。</li><li><code>InterceptorChain</code>（拦截器链）：对所有的拦截器进行管理，包括将所有的 Interceptor 链接成一条链，并在执行 SQL 语句时按顺序调用。</li></ol><p>插件的开发非常简单，只需要实现 Interceptor 接口，并使用注解 <code>@Intercepts</code> 来标注需要拦截的对象和方法，然后在 MyBatis 的配置文件中添加插件即可。</p><p>PageHelper 是 MyBatis 中比较著名的分页插件，它提供了多种分页方式（例如 MySQL 和 Oracle 分页方式），支持多种数据库，并且使用非常简单。下面就介绍一下 PageHelper 的使用方式。</p><p><a href="https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#%E5%A6%82%E4%BD%95%E9%85%8D%E7%BD%AE%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E8%A8%80">https://github.com/pagehelper/Mybatis-PageHelper/blob/master/wikis/zh/HowToUse.md#如何配置数据库方言</a></p><h4 id="2-2-PageHelper插件使用"><a href="#2-2-PageHelper插件使用" class="headerlink" title="2.2 PageHelper插件使用"></a>2.2 PageHelper插件使用</h4><ol><li><p>pom.xml引入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mybatis-config.xml配置分页插件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.PageInterceptor&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;helperDialect&quot;</span> <span class="attr">value</span>=<span class="string">&quot;mysql&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>其中，<code>com.github.pagehelper.PageInterceptor</code> 是 PageHelper 插件的名称，<code>dialect</code> 属性用于指定数据库类型（支持多种数据库）</p></blockquote></li><li><p>页插件使用</p><p>在查询方法中使用分页：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTeacherRelationshipToMulti</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">TeacherMapper</span> <span class="variable">teacherMapper</span> <span class="operator">=</span> session.getMapper(TeacherMapper.class);</span><br><span class="line"></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 查询Customer对象同时将关联的Order集合查询出来</span></span><br><span class="line">    List&lt;Teacher&gt; allTeachers = teacherMapper.findAllTeachers();</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    PageInfo&lt;Teacher&gt; pageInfo = <span class="keyword">new</span> <span class="title class_">PageInfo</span>&lt;&gt;(allTeachers);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;pageInfo = &quot;</span> + pageInfo);</span><br><span class="line">    <span class="type">long</span> <span class="variable">total</span> <span class="operator">=</span> pageInfo.getTotal(); <span class="comment">// 获取总记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;total = &quot;</span> + total);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pages</span> <span class="operator">=</span> pageInfo.getPages();  <span class="comment">// 获取总页数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pages = &quot;</span> + pages);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageNum</span> <span class="operator">=</span> pageInfo.getPageNum(); <span class="comment">// 获取当前页码</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pageNum = &quot;</span> + pageNum);</span><br><span class="line">    <span class="type">int</span> <span class="variable">pageSize</span> <span class="operator">=</span> pageInfo.getPageSize(); <span class="comment">// 获取每页显示记录数</span></span><br><span class="line">    System.out.println(<span class="string">&quot;pageSize = &quot;</span> + pageSize);</span><br><span class="line">    List&lt;Teacher&gt; teachers = pageInfo.getList(); <span class="comment">//获取查询页的数据集合</span></span><br><span class="line">    System.out.println(<span class="string">&quot;teachers = &quot;</span> + teachers);</span><br><span class="line">    teachers.forEach(System.out::println);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-逆向工程和MybatisX插件"><a href="#3-逆向工程和MybatisX插件" class="headerlink" title="3. 逆向工程和MybatisX插件"></a>3. 逆向工程和MybatisX插件</h3><h4 id="3-1-ORM思维介绍"><a href="#3-1-ORM思维介绍" class="headerlink" title="3.1 ORM思维介绍"></a>3.1 ORM思维介绍</h4><p>ORM（Object-Relational Mapping，对象-关系映射）是一种将数据库和面向对象编程语言中的对象之间进行转换的技术。它将对象和关系数据库的概念进行映射，通过一系列的操作将对象关联到数据表中的一行或多行上。</p><p>让我们可以使用面向对象思维进行数据库操作！！！</p><p><strong>ORM 框架通常有半自动和全自动两种方式。</strong></p><ul><li>半自动 ORM 通常需要程序员手动编写 SQL 语句或者配置文件，将实体类和数据表进行映射，还需要手动将查询的结果集转换成实体对象。</li><li>全自动 ORM 则是将实体类和数据表进行自动映射，使用 API 进行数据库操作时，ORM 框架会自动执行 SQL 语句并将查询结果转换成实体对象，程序员无需再手动编写 SQL 语句和转换代码。</li></ul><p><strong>下面是半自动和全自动 ORM 框架的区别：</strong></p><ol><li>映射方式：半自动 ORM 框架需要程序员手动指定实体类和数据表之间的映射关系，通常使用 XML 文件或注解方式来指定；全自动 ORM 框架则可以自动进行实体类和数据表的映射，无需手动干预。</li><li>查询方式：半自动 ORM 框架通常需要程序员手动编写 SQL 语句并将查询结果集转换成实体对象；全自动 ORM 框架可以自动组装 SQL 语句、执行查询操作，并将查询结果转换成实体对象。</li><li>性能：由于半自动 ORM 框架需要手动编写 SQL 语句，因此程序员必须对 SQL 语句和数据库的底层知识有一定的了解，才能编写高效的 SQL 语句；而全自动 ORM 框架通过自动优化生成的 SQL 语句来提高性能，程序员无需进行优化。</li><li>学习成本：半自动 ORM 框架需要程序员手动编写 SQL 语句和映射配置，要求程序员具备较高的数据库和 SQL 知识；全自动 ORM 框架可以自动生成 SQL 语句和映射配置，程序员无需了解过多的数据库和 SQL 知识。</li></ol><p>常见的半自动 ORM 框架包括 MyBatis 等；常见的全自动 ORM 框架包括 Hibernate、Spring Data JPA、MyBatis-Plus 等。</p><h4 id="3-2-逆向工程"><a href="#3-2-逆向工程" class="headerlink" title="3.2 逆向工程"></a>3.2 逆向工程</h4><p>&#x20;   MyBatis 的逆向工程是一种自动化生成持久层代码和映射文件的工具，它可以根据数据库表结构和设置的参数生成对应的实体类、Mapper.xml 文件、Mapper 接口等代码文件，简化了开发者手动生成的过程。逆向工程使开发者可以快速地构建起 DAO 层，并快速上手进行业务开发。<br>&#x20;  MyBatis 的逆向工程有两种方式：通过 MyBatis Generator 插件实现和通过 Maven 插件实现。无论是哪种方式，逆向工程一般需要指定一些配置参数，例如数据库连接 URL、用户名、密码、要生成的表名、生成的文件路径等等。<br>&#x20;  总的来说，MyBatis 的逆向工程为程序员提供了一种方便快捷的方式，能够快速地生成持久层代码和映射文件，是半自动 ORM 思维像全自动发展的过程，提高程序员的开发效率。</p><p><strong>注意：逆向工程只能生成单表crud的操作，多表查询依然需要我们自己编写！</strong></p><h4 id="3-3-逆向工程插件MyBatisX使用"><a href="#3-3-逆向工程插件MyBatisX使用" class="headerlink" title="3.3 逆向工程插件MyBatisX使用"></a>3.3 逆向工程插件MyBatisX使用</h4><p>&#x20;  MyBatisX 是一个 MyBatis 的代码生成插件，可以通过简单的配置和操作快速生成 MyBatis Mapper、pojo 类和 Mapper.xml 文件。下面是使用 MyBatisX 插件实现逆向工程的步骤：</p><ol><li><p>安装插件：</p><p>在 IntelliJ IDEA 中打开插件市场，搜索 MyBatisX 并安装。</p></li><li><p>使用 IntelliJ IDEA连接数据库</p><ul><li><p>连接数据库</p><p><img src="image_fm-MFSwW33.png"></p></li><li><p>填写信息</p><p><img src="image_c54BDsubkg.png"></p></li><li><p>展示库表</p><p><img src="image_7J4tAEH5JE.png"></p></li><li><p>逆向工程使用</p><p><img src="image_AohjPJQ-7l.png"></p><p><img src="image_FIuODxPKf7.png"></p><p><img src="image_uRRJaZzTo8.png"></p></li></ul></li><li><p>查看生成结果</p><p><img src="image_xhjGu_4Ce4.png"></p></li><li><p>逆向工程案例使用</p><p>正常使用即可，自动生成单表的crud方法！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.mapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wzb.pojo.User;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> Jackiechan</span></span><br><span class="line"><span class="comment">* <span class="doctag">@description</span> 针对表【user】的数据库操作Mapper</span></span><br><span class="line"><span class="comment">* <span class="doctag">@createDate</span> 2023-06-02 16:55:32</span></span><br><span class="line"><span class="comment">* <span class="doctag">@Entity</span> com.wzb.pojo.User</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">deleteByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insert</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">insertSelective</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    User <span class="title function_">selectByPrimaryKey</span><span class="params">(Long id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKeySelective</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> <span class="title function_">updateByPrimaryKey</span><span class="params">(User record)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h2 id="七、MyBatis总结"><a href="#七、MyBatis总结" class="headerlink" title="七、MyBatis总结"></a>七、MyBatis总结</h2><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img014.4d03b574.png"></p><ul><li>Mybatis环境所需依赖 ★</li><li>配置<ul><li>Mybatis全局配置</li><li>Mapper配置 ★</li></ul></li><li>Mapper接口 ★</li><li>API<ul><li>SqlSessionFactory</li><li>SqlSession</li></ul></li><li>逆向工程&#x20;</li><li>分页插件</li></ul>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring MVC控制层框架</title>
      <link href="/2024/05/01/Spring%20MVC%E6%8E%A7%E5%88%B6%E5%B1%82%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/05/01/Spring%20MVC%E6%8E%A7%E5%88%B6%E5%B1%82%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring-MVC控制层框架"><a href="#Spring-MVC控制层框架" class="headerlink" title="Spring MVC控制层框架"></a>Spring MVC控制层框架</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%80SpringMVC%E7%AE%80%E4%BB%8B%E5%92%8C%E4%BD%93%E9%AA%8C">一、SpringMVC简介和体验</a><ul><li><a href="#1-%E4%BB%8B%E7%BB%8D">1. 介绍</a></li><li><a href="#2-%E4%B8%BB%E8%A6%81%E4%BD%9C%E7%94%A8">2. 主要作用</a></li><li><a href="#3-%E6%A0%B8%E5%BF%83%E7%BB%84%E4%BB%B6%E5%92%8C%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B%E7%90%86%E8%A7%A3">3. 核心组件和调用流程理解</a></li><li><a href="#4-%E5%BF%AB%E9%80%9F%E4%BD%93%E9%AA%8C">4. 快速体验</a></li></ul></li><li><a href="#%E4%BA%8CSpringMVC%E6%8E%A5%E6%94%B6%E6%95%B0%E6%8D%AE">二、SpringMVC接收数据</a><ul><li><a href="#1-%E8%AE%BF%E9%97%AE%E8%B7%AF%E5%BE%84%E8%AE%BE%E7%BD%AE">1. 访问路径设置</a></li><li><a href="#2-%E6%8E%A5%E6%94%B6%E5%8F%82%E6%95%B0%E9%87%8D%E7%82%B9">2. 接收参数（重点）</a><ul><li><a href="#21-param-%E5%92%8C-json%E5%8F%82%E6%95%B0%E6%AF%94%E8%BE%83">2.1 param 和 json参数比较</a></li><li><a href="#22-param%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6">2.2 param参数接收</a></li><li><a href="#23-%E8%B7%AF%E5%BE%84-%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6">2.3 路径 参数接收</a></li><li><a href="#24-json%E5%8F%82%E6%95%B0%E6%8E%A5%E6%94%B6">2.4 json参数接收</a></li></ul></li><li><a href="#3-%E6%8E%A5%E6%94%B6Cookie%E6%95%B0%E6%8D%AE">3. 接收Cookie数据</a></li><li><a href="#4-%E6%8E%A5%E6%94%B6%E8%AF%B7%E6%B1%82%E5%A4%B4%E6%95%B0%E6%8D%AE">4. 接收请求头数据</a></li><li><a href="#5-%E5%8E%9F%E7%94%9FApi%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C">5. 原生Api对象操作</a></li><li><a href="#6-%E5%85%B1%E4%BA%AB%E5%9F%9F%E5%AF%B9%E8%B1%A1%E6%93%8D%E4%BD%9C">6. 共享域对象操作</a><ul><li><a href="#61-%E5%B1%9E%E6%80%A7%E5%85%B1%E4%BA%AB%E5%9F%9F%E4%BD%9C%E7%94%A8%E5%9B%9E%E9%A1%BE">6.1 属性（共享）域作用回顾</a></li><li><a href="#62-Request%E7%BA%A7%E5%88%AB%E5%B1%9E%E6%80%A7%E5%85%B1%E4%BA%AB%E5%9F%9F">6.2 Request级别属性（共享）域</a></li><li><a href="#63-Session%E7%BA%A7%E5%88%AB%E5%B1%9E%E6%80%A7%E5%85%B1%E4%BA%AB%E5%9F%9F">6.3 Session级别属性（共享）域</a></li><li><a href="#64-Application%E7%BA%A7%E5%88%AB%E5%B1%9E%E6%80%A7%E5%85%B1%E4%BA%AB%E5%9F%9F">6.4 Application级别属性（共享）域</a></li></ul></li></ul></li><li><a href="#%E4%B8%89SpringMVC%E5%93%8D%E5%BA%94%E6%95%B0%E6%8D%AE">三、SpringMVC响应数据</a><ul><li><a href="#1-handler%E6%96%B9%E6%B3%95%E5%88%86%E6%9E%90">1. handler方法分析</a></li><li><a href="#2-%E9%A1%B5%E9%9D%A2%E8%B7%B3%E8%BD%AC%E6%8E%A7%E5%88%B6">2. 页面跳转控制</a><ul><li><a href="#21-%E5%BF%AB%E9%80%9F%E8%BF%94%E5%9B%9Ejsp%E8%A7%86%E5%9B%BE">2.1 快速返回jsp视图</a></li><li><a href="#22-%E8%BD%AC%E5%8F%91%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91">2.2 转发和重定向</a></li></ul></li><li><a href="#3-%E8%BF%94%E5%9B%9EJSON%E6%95%B0%E6%8D%AE%E9%87%8D%E7%82%B9">3. 返回JSON数据（重点）</a><ul><li><a href="#31-%E5%89%8D%E7%BD%AE%E5%87%86%E5%A4%87">3.1 前置准备</a></li><li><a href="#32-ResponseBody">3.2 @ResponseBody</a></li><li><a href="#33-RestController">3.3 @RestController</a></li></ul></li><li><a href="#4-%E8%BF%94%E5%9B%9E%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86">4. 返回静态资源处理</a></li></ul></li><li><a href="#%E5%9B%9BRESTFul%E9%A3%8E%E6%A0%BC%E8%AE%BE%E8%AE%A1">四、RESTFul风格设计</a><ul><li><a href="#1-RESTFul%E9%A3%8E%E6%A0%BC%E6%A6%82%E8%BF%B0">1. RESTFul风格概述</a><ul><li><a href="#11-RESTFul%E9%A3%8E%E6%A0%BC%E7%AE%80%E4%BB%8B">1.1 RESTFul风格简介</a></li><li><a href="#12-RESTFul%E9%A3%8E%E6%A0%BC%E7%89%B9%E7%82%B9">1.2 RESTFul风格特点</a></li><li><a href="#13-RESTFul%E9%A3%8E%E6%A0%BC%E8%AE%BE%E8%AE%A1%E8%A7%84%E8%8C%83">1.3 RESTFul风格设计规范</a></li><li><a href="#14-RESTFul%E9%A3%8E%E6%A0%BC%E5%A5%BD%E5%A4%84">1.4 RESTFul风格好处</a></li></ul></li><li><a href="#2-RESTFul%E9%A3%8E%E6%A0%BC%E5%AE%9E%E6%88%98">2. RESTFul风格实战</a><ul><li><a href="#21-%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90">2.1 需求分析</a></li><li><a href="#22-RESTFul%E9%A3%8E%E6%A0%BC%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1">2.2 RESTFul风格接口设计</a></li><li><a href="#23-%E5%90%8E%E5%8F%B0%E6%8E%A5%E5%8F%A3%E5%AE%9E%E7%8E%B0">2.3 后台接口实现</a></li></ul></li></ul></li><li><a href="#%E4%BA%94%E5%9F%BA%E4%BA%8ERESTFul%E9%A3%8E%E6%A0%BC%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E7%BB%83%E4%B9%A0">五、基于RESTFul风格增删改查练习</a><ul><li><a href="#1-%E6%A1%88%E4%BE%8B%E5%8A%9F%E8%83%BD%E5%92%8C%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90">1. 案例功能和接口分析</a><ul><li><a href="#11-%E5%8A%9F%E8%83%BD%E9%A2%84%E8%A7%88">1.1 功能预览</a></li><li><a href="#12-%E6%8E%A5%E5%8F%A3%E5%88%86%E6%9E%90">1.2 接口分析</a></li></ul></li><li><a href="#2-%E5%B7%A5%E7%A8%8B%E9%A1%B9%E7%9B%AE%E5%87%86%E5%A4%87">2. 工程项目准备</a><ul><li><a href="#21-%E5%89%8D%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA">2.1 前端项目搭建</a></li><li><a href="#22-%E5%90%8E%E7%AB%AF%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA">2.2 后端项目搭建</a></li></ul></li><li><a href="#3-%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E5%AE%9E%E7%8E%B0">3. 增删改查实现</a><ul><li><a href="#41-%E9%A1%B9%E7%9B%AE%E6%A0%B9%E8%B7%AF%E5%BE%84%E8%AE%BE%E8%AE%A1">4.1 项目根路径设计</a></li><li><a href="#42-SpringMVC%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98">4.2 SpringMVC解决跨域问题</a></li><li><a href="#43-%E4%B8%9A%E5%8A%A1%E5%AE%9E%E7%8E%B0">4.3 业务实现</a></li></ul></li></ul></li><li><a href="#%E5%85%ADSpringMVC%E5%85%B6%E4%BB%96%E6%89%A9%E5%B1%95">六、SpringMVC其他扩展</a><ul><li><a href="#1-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6">1. 异常处理机制</a><ul><li><a href="#11-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%A6%82%E5%BF%B5">1.1 异常处理概念</a></li><li><a href="#12-%E5%A3%B0%E6%98%8E%E5%BC%8F%E5%BC%82%E5%B8%B8%E5%A5%BD%E5%A4%84">1.2 声明式异常好处</a></li><li><a href="#13-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E5%BC%82%E5%B8%B8%E5%A3%B0%E6%98%8E%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86">1.3 基于注解异常声明异常处理</a></li></ul></li><li><a href="#2-%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BD%BF%E7%94%A8">2. 拦截器使用</a><ul><li><a href="#21-%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A6%82%E5%BF%B5">2.1 拦截器概念</a></li><li><a href="#22-%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BD%BF%E7%94%A8">2.2 拦截器使用</a></li><li><a href="#23-%E6%8B%A6%E6%88%AA%E5%99%A8%E4%BD%9C%E7%94%A8%E4%BD%8D%E7%BD%AE%E5%9B%BE%E8%A7%A3">2.3 拦截器作用位置图解</a></li><li><a href="#24-%E6%8B%A6%E6%88%AA%E5%99%A8%E6%A1%88%E4%BE%8B">2.4 拦截器案例</a></li></ul></li><li><a href="#3-%E5%8F%82%E6%95%B0%E6%A0%A1%E9%AA%8C">3. 参数校验</a></li><li><a href="#4%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E4%B8%8B%E8%BD%BD-">4.文件上传和下载 </a><ul><li><a href="#41-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0">4.1 文件上传</a></li><li><a href="#42-%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD">4.2 文件下载</a></li></ul></li></ul></li><li><a href="#%E4%B8%83SpringMVC%E5%BA%95%E5%B1%82%E5%8E%9F%E7%90%86">七、SpringMVC底层原理</a><ul><li><a href="#1-%E5%90%AF%E5%8A%A8%E9%85%8D%E7%BD%AE%E6%B5%81%E7%A8%8B">1. 启动配置流程</a><ul><li><a href="#11-Servlet-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%9E%E9%A1%BE">1.1 Servlet 生命周期回顾</a></li><li><a href="#12-%E5%88%9D%E5%A7%8B%E5%8C%96%E6%93%8D%E4%BD%9C%E8%B0%83%E7%94%A8%E8%B7%AF%E7%BA%BF%E5%9B%BE">1.2 初始化操作调用路线图</a></li><li><a href="#13-SpringMVC-IoC-%E5%AE%B9%E5%99%A8%E5%88%9B%E5%BB%BA">1.3 SpringMVC IoC 容器创建</a></li><li><a href="#14-%E5%B0%86-SpringMVC-IoC%E5%AE%B9%E5%99%A8%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%85%A5%E5%BA%94%E7%94%A8%E5%9F%9F">1.4 将 SpringMVC IoC容器对象存入应用域</a></li><li><a href="#15-%E8%AF%B7%E6%B1%82%E6%98%A0%E5%B0%84%E5%88%9D%E5%A7%8B%E5%8C%96">1.5 请求映射初始化</a></li><li><a href="#16-%E5%B0%8F%E7%BB%93">1.6 小结</a></li></ul></li><li><a href="#2-%E8%AF%B7%E6%B1%82%E5%A4%84%E7%90%86%E6%B5%81%E7%A8%8B%E5%8E%9F%E7%90%86">2. 请求处理流程原理</a><ul><li><a href="#21-%E6%80%BB%E4%BD%93%E9%98%B6%E6%AE%B5">2.1 总体阶段</a></li><li><a href="#22-%E8%B0%83%E7%94%A8%E5%89%8D%E9%98%B6%E6%AE%B5">2.2 调用前阶段</a></li><li><a href="#23%E8%B0%83%E7%94%A8%E5%90%8E%E9%98%B6%E6%AE%B5">2.3调用后阶段</a></li><li><a href="#24-%E6%89%80%E6%9C%89%E6%96%AD%E7%82%B9%E6%80%BB%E7%BB%93">2.4 所有断点总结</a></li></ul></li><li><a href="#3-ContextLoaderListener">3. ContextLoaderListener</a><ul><li><a href="#31-%E9%85%8D%E7%BD%AE%E5%88%86%E7%A6%BB%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98">3.1 配置分离相关问题</a></li><li><a href="#32-%E9%85%8D%E7%BD%AEContextLoaderListener">3.2 配置ContextLoaderListener</a></li><li><a href="#33-%E6%8E%A2%E8%AE%A8%E4%B8%A4%E4%B8%AAIoC%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4%E5%85%B3%E7%B3%BB">3.3 探讨两个IoC容器之间关系</a></li><li><a href="#34-%E4%B8%A4%E4%B8%AAIoC%E5%AE%B9%E5%99%A8%E4%B9%8B%E9%97%B4Bean%E8%AE%BF%E9%97%AE">3.4 两个IoC容器之间Bean访问</a></li><li><a href="#35-%E6%9C%89%E5%8F%AF%E8%83%BD%E9%87%8D%E5%A4%8D%E5%AF%B9%E8%B1%A1">3.5 有可能重复对象</a></li><li><a href="#35-%E5%B0%8F%E7%BB%93">3.5 小结</a></li></ul></li></ul></li></ul><h2 id="一、SpringMVC简介和体验"><a href="#一、SpringMVC简介和体验" class="headerlink" title="一、SpringMVC简介和体验"></a>一、SpringMVC简介和体验</h2><h3 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1. 介绍"></a>1. 介绍</h3><p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc.html">https://docs.spring.io/spring-framework/reference/web/webmvc.html</a></p><p>Spring Web MVC是基于Servlet API构建的原始Web框架，从一开始就包含在Spring Framework中。正式名称“Spring Web MVC”来自其源模块的名称（ <code>spring-webmvc</code> ），但它通常被称为“Spring MVC”。</p><p>在控制层框架历经Strust、WebWork、Strust2等诸多产品的历代更迭之后，目前业界普遍选择了SpringMVC作为Java EE项目表述层开发的<strong>首选方案</strong>。之所以能做到这一点，是因为SpringMVC具备如下显著优势：</p><ul><li><strong>Spring 家族原生产品</strong>，与IOC容器等基础设施无缝对接</li><li>表述层各细分领域需要解决的问题<strong>全方位覆盖</strong>，提供<strong>全面解决方案</strong></li><li><strong>代码清新简洁</strong>，大幅度提升开发效率</li><li>内部组件化程度高，可插拔式组件<strong>即插即用</strong>，想要什么功能配置相应组件即可</li><li><strong>性能卓著</strong>，尤其适合现代大型、超大型互联网项目要求</li></ul><p>原生Servlet API开发代码片段</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> </span><br><span class="line">                                                        <span class="keyword">throws</span> ServletException, IOException &#123;  </span><br><span class="line">    <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userName&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于SpringMVC开发代码片段</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">login</span><span class="params">(<span class="meta">@RequestParam(&quot;userName&quot;)</span> String userName,Sting password)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    log.debug(<span class="string">&quot;userName=&quot;</span>+userName);</span><br><span class="line">    <span class="comment">//调用业务即可</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;result&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-主要作用"><a href="#2-主要作用" class="headerlink" title="2. 主要作用"></a>2. 主要作用</h3><p>![](Spring MVC控制层框架&#x2F;image_s06VlXFk72.png)</p><p>SSM框架构建起单体项目的技术栈需求！其中的SpringMVC负责表述层（控制层）实现简化！</p><p>SpringMVC的作用主要覆盖的是表述层，例如：</p><ul><li>请求映射</li><li>数据输入</li><li>视图界面</li><li>请求分发</li><li>表单回显</li><li>会话控制</li><li>过滤拦截</li><li>异步交互</li><li>文件上传</li><li>文件下载</li><li>数据校验</li><li>类型转换</li><li>等等等</li></ul><p><strong>最终总结：</strong></p><ol><li>简化前端参数接收( 形参列表 )</li><li>简化后端数据响应( 返回值 )</li><li>以及其他……</li></ol><h3 id="3-核心组件和调用流程理解"><a href="#3-核心组件和调用流程理解" class="headerlink" title="3. 核心组件和调用流程理解"></a>3. 核心组件和调用流程理解</h3><p>Spring MVC与许多其他Web框架一样，是围绕前端控制器模式设计的，其中中央 <code>Servlet</code>  <code>DispatcherServlet</code> 做整体请求处理调度！</p><p>除了<code>DispatcherServlet</code>SpringMVC还会提供其他特殊的组件协作完成请求处理和响应呈现。</p><p><strong>SpringMVC处理请求流程：</strong></p><p>![](Spring MVC控制层框架&#x2F;image_IOG0UTDH–.png)</p><p><strong>SpringMVC涉及组件理解：</strong></p><ol><li>DispatcherServlet :  SpringMVC提供，我们需要使用web.xml配置使其生效，它是整个流程处理的核心，所有请求都经过它的处理和分发！</li><li>HandlerMapping :  SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它内部缓存handler(controller方法)和handler访问路径数据，被DispatcherServlet调用，用于查找路径对应的handler！</li><li>HandlerAdapter : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效，它可以处理请求参数和处理响应数据，每次DispatcherServlet都是通过handlerAdapter间接调用handler，他是handler和DispatcherServlet之间的适配器！</li><li>Handler : handler又称处理器，他是Controller类内部的方法简称，是由我们自己定义，用来接收参数，向后调用业务，最终返回响应结果！</li><li>ViewResovler : SpringMVC提供，我们需要进行IoC配置使其加入IoC容器方可生效！视图解析器主要作用简化模版视图页面查找的，但是需要注意，前后端分离项目，后端只返回JSON数据，不返回页面，那就不需要视图解析器！所以，视图解析器，相对其他的组件不是必须的！</li></ol><h3 id="4-快速体验"><a href="#4-快速体验" class="headerlink" title="4. 快速体验"></a>4. 快速体验</h3><ol><li><p>体验场景需求</p><p>![](Spring MVC控制层框架&#x2F;image_r6DxapBw-8.png)</p></li><li><p>配置分析</p><ol><li>DispatcherServlet，在web.xml配置！设置处理所有请求！</li><li>HandlerMapping,HandlerAdapter,Handler需要加入到IoC容器，供DS调用！</li><li>Handler自己声明（Controller）需要配置到HandlerMapping中供DS查找！</li></ol></li><li><p>准备项目</p><ol><li><p>创建项目</p><p>springmvc-base-quick</p><p>注意：需要转成maven&#x2F;web程序！！</p></li><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springioc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- web相关依赖  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 pom.xml 中引入 Jakarta EE Web API 的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在 Spring Web MVC 6 中，Servlet API 迁移到了 Jakarta EE API，因此在配置 DispatcherServlet 时需要使用</span></span><br><span class="line"><span class="comment">         Jakarta EE 提供的相应类库和命名空间。错误信息 “‘org.springframework.web.servlet.DispatcherServlet’</span></span><br><span class="line"><span class="comment">         is not assignable to ‘javax.servlet.Servlet,jakarta.servlet.Servlet’” 表明你使用了旧版本的</span></span><br><span class="line"><span class="comment">         Servlet API，没有更新到 Jakarta EE 规范。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- springwebmvc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol></li><li><p>Controller声明</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//handlers</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * handler就是controller内部的具体方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@RequestMapping</span>(&quot;/springmvc/hello&quot;) 就是用来向handlerMapping中注册的方法注解!</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@ResponseBody</span> 代表向浏览器直接返回数据!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/springmvc/hello&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HelloController.hello&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello springmvc!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>SpringIoC配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.controller&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 方案1: 手动配置handlerMapping 和 handlerAdapter --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- handlerMapping</span></span><br><span class="line"><span class="comment">         RequestMappingHandlerMapping 就是springmvc提供的组件</span></span><br><span class="line"><span class="comment">         支持@RequestMapping方式注册的handler</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- handlerAdapter</span></span><br><span class="line"><span class="comment">         RequestMappingHandlerAdapter 就是springmvc提供的组件</span></span><br><span class="line"><span class="comment">         支持@RequestMapping方式注册的handler</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方案2: 不配置</span></span><br><span class="line"><span class="comment">         解释: springmvc会在启动的时候,如果发现我们没有配置handlerMapping,handlerAdapter,viewResolver</span></span><br><span class="line"><span class="comment">         就会加载spring-webmvc包下的配置DispatcherServlet.properties下的组件!</span></span><br><span class="line"><span class="comment">         DispatcherServlet.properties:</span></span><br><span class="line"><span class="comment">           org.springframework.web.servlet.HandlerMapping=org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,\</span></span><br><span class="line"><span class="comment">                org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping,\</span></span><br><span class="line"><span class="comment">                org.springframework.web.servlet.function.support.RouterFunctionMapping</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            org.springframework.web.servlet.HandlerAdapter=org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,\</span></span><br><span class="line"><span class="comment">                org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,\</span></span><br><span class="line"><span class="comment">                org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter,\</span></span><br><span class="line"><span class="comment">                org.springframework.web.servlet.function.support.HandlerFunctionAdapter</span></span><br><span class="line"><span class="comment">            ........</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         所以,我们可以不同写,也会默认加载! 注意: 一旦你配置了,就不会加载对应的默认组件切记!!!</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- viewResolver 不需要配置,因为我们不需要查找逻辑视图!!! --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>  </span><br></pre></td></tr></table></figure></li><li><p>web.xml配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置SpringMVC中负责处理请求的核心Servlet，也被称为SpringMVC的前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果不记得contextConfigLocation配置项的名称，可以到DispatcherServlet的父类FrameworkServlet中查找 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用classpath:说明这个路径从类路径的根目录开始才查找 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 作为框架的核心组件，在启动过程中有大量的初始化操作要做，这些操作放在第一次请求时才执行非常不恰当 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们应该将DispatcherServlet设置为随Web应用一起启动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>100<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对DispatcherServlet来说，url-pattern有两种方式配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置“/”，表示匹配整个Web应用范围内所有请求。这里有一个硬性规定：不能写成“/*”。</span></span><br><span class="line"><span class="comment">      只有这一个地方有这个特殊要求，以后我们再配置Filter还是可以正常写“/*”。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>启动测试</p><p>注意： tomcat应该是10+版本！方可支持 Jakarta EE API!</p><p>![](Spring MVC控制层框架&#x2F;image_RmY8VOdQnq.png)</p></li></ol><h2 id="二、SpringMVC接收数据"><a href="#二、SpringMVC接收数据" class="headerlink" title="二、SpringMVC接收数据"></a>二、SpringMVC接收数据</h2><h3 id="1-访问路径设置"><a href="#1-访问路径设置" class="headerlink" title="1. 访问路径设置"></a>1. 访问路径设置</h3><p>@RequestMapping注解的作用就是将请求的 URL 地址和处理请求的方式（handler方法）关联起来，建立映射关系。</p><p>SpringMVC 接收到指定的请求，就会来找到在映射关系中对应的方法来处理这个请求。</p><ol><li><p><strong>精准路径匹配</strong></p><p>在@RequestMapping注解指定 URL 地址时，不使用任何通配符，按照请求地址进行精确匹配。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/login</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/login&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/register&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.register&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>模糊路径匹配</strong></p><p>在@RequestMapping注解指定 URL 地址时，通过使用通配符，匹配多个类似的地址。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProductController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *  路径设置为 /product/*  </span></span><br><span class="line"><span class="comment">     *    /* 为单层任意字符串  /product/a  /product/aaa 可以访问此handler  </span></span><br><span class="line"><span class="comment">     *    /product/a/a 不可以</span></span><br><span class="line"><span class="comment">     *  路径设置为 /product/** </span></span><br><span class="line"><span class="comment">     *   /** 为任意层任意字符串  /product/a  /product/aaa 可以访问此handler  </span></span><br><span class="line"><span class="comment">     *   /product/a/a 也可以访问</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/product/*&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;ProductController.show&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;product show!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">单层匹配和多层匹配：</span><br><span class="line">  /*：只能匹配URL地址中的一层，如果想准确匹配两层，那么就写“/*/*”以此类推。</span><br><span class="line">  /**：可以匹配URL地址中的多层。</span><br><span class="line">其中所谓的一层或多层是指一个URL地址字符串被“/”划分出来的各个层次</span><br><span class="line">这个知识点虽然对于@RequestMapping注解来说实用性不大，但是将来配置拦截器的时候也遵循这个规则。</span><br></pre></td></tr></table></figure></li><li><p><strong>类和方法级别区别</strong></p><p><code>@RequestMapping</code> 注解可以用于类级别和方法级别，它们之间的区别如下：</p><ol><li>设置到类级别：<code>@RequestMapping</code> 注解可以设置在控制器类上，用于映射整个控制器的通用请求路径。这样，如果控制器中的多个方法都需要映射同一请求路径，就不需要在每个方法上都添加映射路径。</li><li>设置到方法级别：<code>@RequestMapping</code> 注解也可以单独设置在控制器方法上，用于更细粒度地映射请求路径和处理方法。当多个方法处理同一个路径的不同操作时，可以使用方法级别的 <code>@RequestMapping</code> 注解进行更精细的映射。</li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1.标记到handler方法</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/login&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/register&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user/logout&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.优化标记类+handler方法</span></span><br><span class="line"><span class="comment">//类上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="comment">//handler方法上</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/register&quot;)</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/logout&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>附带请求方式限制</strong></p><p>HTTP 协议定义了八种请求方式，在 SpringMVC 中封装到了下面这个枚举类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> <span class="title class_">RequestMethod</span> &#123;</span><br><span class="line">  GET, HEAD, POST, PUT, PATCH, DELETE, OPTIONS, TRACE</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下：@RequestMapping(“&#x2F;logout”) 任何请求方式都可以访问！</p><p>如果需要特定指定：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/login</span></span><br><span class="line"><span class="comment">     * method = RequestMethod.POST 可以指定单个或者多个请求方式!</span></span><br><span class="line"><span class="comment">     * 注意:违背请求方式会出现405异常!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/login&quot;&#125; , method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">login</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 精准设置访问地址 /user/register</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/user/register&quot;&#125;,method = &#123;RequestMethod.POST,RequestMethod.GET&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">register</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;UserController.register&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;register success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：违背请求方式，会出现405异常！！！</p></li><li><p><strong>进阶注解</strong></p><p>还有 <code>@RequestMapping</code> 的 HTTP 方法特定快捷方式变体：</p><ul><li><code>@GetMapping</code></li><li><code>@PostMapping</code></li><li><code>@PutMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@PatchMapping</code></li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(value=&quot;/login&quot;,method=RequestMethod.GET)</span></span><br><span class="line">||</span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/login&quot;)</span></span><br></pre></td></tr></table></figure><p>注意：进阶注解只能添加到handler方法上，无法添加到类上！</p></li><li><p><strong>常见配置问题</strong></p><p>出现原因：多个 handler 方法映射了同一个地址，导致 SpringMVC 在接收到这个地址的请求时该找哪个 handler 方法处理。</p><blockquote><p>There is already ‘demo03MappingMethodHandler’ bean method com.wzb.mvc.handler.Demo03MappingMethodHandler#empGet() <strong>mapped</strong>.</p></blockquote></li></ol><h3 id="2-接收参数（重点）"><a href="#2-接收参数（重点）" class="headerlink" title="2. 接收参数（重点）"></a>2. 接收参数（重点）</h3><h4 id="2-1-param-和-json参数比较"><a href="#2-1-param-和-json参数比较" class="headerlink" title="2.1 param 和 json参数比较"></a>2.1 param 和 json参数比较</h4><p>在 HTTP 请求中，我们可以选择不同的参数类型，如 param 类型和 JSON 类型。下面对这两种参数类型进行区别和对比：</p><ol><li><p>参数编码： &#x20;</p><p>param 类型的参数会被编码为 ASCII 码。例如，假设 <code>name=john doe</code>，则会被编码为 <code>name=john%20doe</code>。而 JSON 类型的参数会被编码为 UTF-8。</p></li><li><p>参数顺序： &#x20;</p><p>param 类型的参数没有顺序限制。但是，JSON 类型的参数是有序的。JSON 采用键值对的形式进行传递，其中键值对是有序排列的。</p></li><li><p>数据类型： &#x20;</p><p>param 类型的参数仅支持字符串类型、数值类型和布尔类型等简单数据类型。而 JSON 类型的参数则支持更复杂的数据类型，如数组、对象等。</p></li><li><p>嵌套性： &#x20;</p><p>param 类型的参数不支持嵌套。但是，JSON 类型的参数支持嵌套，可以传递更为复杂的数据结构。</p></li><li><p>可读性： &#x20;</p><p>param 类型的参数格式比 JSON 类型的参数更加简单、易读。但是，JSON 格式在传递嵌套数据结构时更加清晰易懂。</p></li></ol><p>总的来说，param 类型的参数适用于单一的数据传递，而 JSON 类型的参数则更适用于更复杂的数据结构传递。根据具体的业务需求，需要选择合适的参数类型。在实际开发中，常见的做法是：在 GET 请求中采用 param 类型的参数，而在 POST 请求中采用 JSON 类型的参数传递。</p><h4 id="2-2-param参数接收"><a href="#2-2-param参数接收" class="headerlink" title="2.2 param参数接收"></a>2.2 param参数接收</h4><ol><li><p><strong>直接接值</strong></p><p>客户端请求</p><p>![](Spring MVC控制层框架&#x2F;image_plXEAfszjM.png)</p><p>handler接收参数</p><p>只要形参数名和类型与传递参数相同，即可自动接收!</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 前端请求: http://localhost:8080/param/value?name=xx&amp;age=18</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * 可以利用形参列表,直接接收前端传递的param参数!</span></span><br><span class="line"><span class="comment">     *    要求: 参数名 = 形参名</span></span><br><span class="line"><span class="comment">     *          类型相同</span></span><br><span class="line"><span class="comment">     * 出现乱码正常，json接收具体解决！！</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回前端数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(value=&quot;/value&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">setupForm</span><span class="params">(String name,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">        <span class="keyword">return</span> name + age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>@RequestParam注解</strong></p><p>可以使用 <code>@RequestParam</code> 注释将 Servlet 请求参数（即查询参数或表单数据）绑定到控制器中的方法参数。</p><p><code>@RequestParam</code>使用场景：</p><ul><li>指定绑定的请求参数名</li><li>要求请求参数必须传递</li><li>为请求参数提供默认值<br>基本用法：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求: http://localhost:8080/param/data?name=xx&amp;stuAge=18</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *  使用<span class="doctag">@RequestParam</span>注解标记handler方法的形参</span></span><br><span class="line"><span class="comment"> *  指定形参对应的请求参数<span class="doctag">@RequestParam</span>(请求参数名称)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">paramForm</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(&quot;stuAge&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> name+age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>默认情况下，使用此批注的方法参数是必需的，但您可以通过将 <code>@RequestParam</code> 批注的 <code>required</code> 标志设置为 <code>false</code>！</p><p>如果没有没有设置非必须，也没有传递参数会出现：</p><p>![](Spring MVC控制层框架&#x2F;image_ckLWLe8fG6.png)</p><p>将参数设置非必须，并且设置默认值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(value=&quot;/data&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">paramForm</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String name, </span></span><br><span class="line"><span class="params">                        <span class="meta">@RequestParam(value = &quot;stuAge&quot;,required = false,defaultValue = &quot;18&quot;)</span> <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name + <span class="string">&quot;, age = &quot;</span> + age);</span><br><span class="line">    <span class="keyword">return</span> name+age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>特殊场景接值</strong></p><ol><li><p>一名多值</p><p>多选框，提交的数据的时候一个key对应多个值，我们可以使用集合进行接收！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 前端请求: http://localhost:8080/param/mul?hbs=吃&amp;hbs=喝</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *  一名多值,可以使用集合接收即可!但是需要使用<span class="doctag">@RequestParam</span>注解指定</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(value=&quot;/mul&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">mulForm</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; hbs)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;hbs = &quot;</span> + hbs);</span><br><span class="line">    <span class="keyword">return</span> hbs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实体接收</p><p>Spring MVC 是 Spring 框架提供的 Web 框架，它允许开发者使用实体对象来接收 HTTP 请求中的参数。通过这种方式，可以在方法内部直接使用对象的属性来访问请求参数，而不需要每个参数都写一遍。下面是一个使用实体对象接收参数的示例：</p><p>定义一个用于接收参数的实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> <span class="variable">age</span> <span class="operator">=</span> <span class="number">18</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// getter 和 setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在控制器中，使用实体对象接收，示例代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/user&quot;, method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">addUser</span><span class="params">(User user)</span> &#123;</span><br><span class="line">        <span class="comment">// 在这里可以使用 user 对象的属性来接收请求参数</span></span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，将请求参数name和age映射到实体类属性上！要求属性名必须等于参数名！否则无法映射！</p><p>使用postman传递参数测试：</p><p>![](Spring MVC控制层框架&#x2F;image_LvGYFzl7Ij.png)</p></li></ol></li></ol><h4 id="2-3-路径-参数接收"><a href="#2-3-路径-参数接收" class="headerlink" title="2.3 路径 参数接收"></a>2.3 路径 参数接收</h4><p>路径传递参数是一种在 URL 路径中传递参数的方式。在 RESTful 的 Web 应用程序中，经常使用路径传递参数来表示资源的唯一标识符或更复杂的表示方式。而 Spring MVC 框架提供了 <code>@PathVariable</code> 注解来处理路径传递参数。</p><p><code>@PathVariable</code> 注解允许将 URL 中的占位符映射到控制器方法中的参数。</p><p>例如，如果我们想将 <code>/user/{id}</code> 路径下的 <code>{id}</code> 映射到控制器方法的一个参数中，则可以使用 <code>@PathVariable</code> 注解来实现。</p><p>下面是一个使用 <code>@PathVariable</code> 注解处理路径传递参数的示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动态路径设计: /user/&#123;动态部分&#125;/&#123;动态部分&#125;   动态部分使用&#123;&#125;包含即可! &#123;&#125;内部动态标识!</span></span><br><span class="line"><span class="comment"> * 形参列表取值: <span class="doctag">@PathVariable</span> Long id  如果形参名 = &#123;动态标识&#125; 自动赋值!</span></span><br><span class="line"><span class="comment"> *              <span class="doctag">@PathVariable</span>(&quot;动态标识&quot;) Long id  如果形参名 != &#123;动态标识&#125; 可以通过指定动态标识赋值!</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 访问测试:  /param/user/1/root  -&gt; id = 1  uname = root</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/user/&#123;id&#125;/&#123;name&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable</span> Long id, </span></span><br><span class="line"><span class="params">                      <span class="meta">@PathVariable(&quot;name&quot;)</span> String uname)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;id = &quot;</span> + id + <span class="string">&quot;, uname = &quot;</span> + uname);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;user_detail&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-4-json参数接收"><a href="#2-4-json参数接收" class="headerlink" title="2.4 json参数接收"></a>2.4 json参数接收</h4><p>前端传递 JSON 数据时，Spring MVC 框架可以使用 <code>@RequestBody</code> 注解来将 JSON 数据转换为 Java 对象。<code>@RequestBody</code> 注解表示当前方法参数的值应该从请求体中获取，并且需要指定 value 属性来指示请求体应该映射到哪个参数上。其使用方式和示例代码如下：</p><ol><li><p>前端发送 JSON 数据的示例：（使用postman测试）</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gender&quot;</span><span class="punctuation">:</span> <span class="string">&quot;男&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>定义一个用于接收 JSON 数据的 Java 类，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> String gender;</span><br><span class="line">  <span class="comment">// getter 和 setter 略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在控制器中，使用 <code>@RequestBody</code> 注解来接收 JSON 数据，并将其转换为 Java 对象，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/person&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">addPerson</span><span class="params">(<span class="meta">@RequestBody</span> Person person)</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 在这里可以使用 person 对象来操作 JSON 数据中包含的属性</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上述代码中，<code>@RequestBody</code> 注解将请求体中的 JSON 数据映射到 <code>Person</code> 类型的 <code>person</code> 参数上，并将其作为一个对象来传递给 <code>addPerson()</code> 方法进行处理。</p></li><li><p>完善配置</p><p>测试：</p><p>![](Spring MVC控制层框架&#x2F;image_XLO-MAnues.png)</p><p>问题：</p><p>org.springframework.web.HttpMediaTypeNotSupportedException: Content-Type ‘application&#x2F;json;charset&#x3D;UTF-8’ is not supported]</p><p>![](Spring MVC控制层框架&#x2F;image_T1gLO4uFgn.png)</p><p>原因：</p><ul><li>不支持json数据类型处理</li><li>没有json类型处理的工具（jackson）<br>解决：<br>spring-mvc.xml 配置json转化器</li></ul><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.controller&quot;</span> /&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">       注意: 导入mvc命名空间!</span></span><br><span class="line"><span class="comment">       mvc:annotation-driven 是一个整合标签</span></span><br><span class="line"><span class="comment">                             他会导入handlerMapping和handlerAdapter</span></span><br><span class="line"><span class="comment">                             他会导入json数据格式转化器等等!</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">&lt;!-- viewResolver 不需要配置,因为我们不需要查找逻辑视图!!! --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>pom.xml 加入jackson依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>mvc:annotation说明</p><p>&lt;mvc:annotation是一个整合配置标签，一个标签将springmvc必备组件都加入到ioc容器中！其中包含handlerMapping和handlerAdapter以及json转化器等等！</p><p>让我们来查看下&lt;mvc:annotation具体的动作！</p><ul><li><p>先查看&lt;mvc:annotation标签最终对应解析的Java类</p><p>![](Spring MVC控制层框架&#x2F;image_eU-869Kx3r.png)</p></li><li><p>查看解析类中具体的动作即可</p><p>打开源码：org.springframework.web.servlet.config.MvcNamespaceHandler</p><p>![](Spring MVC控制层框架&#x2F;image_zxx3CTng-X.png)</p><p>打开源码：org.springframework.web.servlet.config.AnnotationDrivenBeanDefinitionParser</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationDrivenBeanDefinitionParser</span> <span class="keyword">implements</span> <span class="title class_">BeanDefinitionParser</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_MAPPING_BEAN_NAME</span> <span class="operator">=</span> RequestMappingHandlerMapping.class.getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">HANDLER_ADAPTER_BEAN_NAME</span> <span class="operator">=</span> RequestMappingHandlerAdapter.class.getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> AnnotationDrivenBeanDefinitionParser.class.getClassLoader();</span><br><span class="line">    javaxValidationPresent = ClassUtils.isPresent(<span class="string">&quot;jakarta.validation.Validator&quot;</span>, classLoader);</span><br><span class="line">    romePresent = ClassUtils.isPresent(<span class="string">&quot;com.rometools.rome.feed.WireFeed&quot;</span>, classLoader);</span><br><span class="line">    jaxb2Present = ClassUtils.isPresent(<span class="string">&quot;jakarta.xml.bind.Binder&quot;</span>, classLoader);</span><br><span class="line">    jackson2Present = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.databind.ObjectMapper&quot;</span>, classLoader) &amp;&amp;</span><br><span class="line">            ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.core.JsonGenerator&quot;</span>, classLoader);</span><br><span class="line">    jackson2XmlPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.xml.XmlMapper&quot;</span>, classLoader);</span><br><span class="line">    jackson2SmilePresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.smile.SmileFactory&quot;</span>, classLoader);</span><br><span class="line">    jackson2CborPresent = ClassUtils.isPresent(<span class="string">&quot;com.fasterxml.jackson.dataformat.cbor.CBORFactory&quot;</span>, classLoader);</span><br><span class="line">    gsonPresent = ClassUtils.isPresent(<span class="string">&quot;com.google.gson.Gson&quot;</span>, classLoader);</span><br><span class="line">  &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="keyword">public</span> BeanDefinition <span class="title function_">parse</span><span class="params">(Element element, ParserContext context)</span> &#123;</span><br><span class="line">        <span class="comment">//handlerMapping加入到ioc容器</span></span><br><span class="line">        readerContext.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, handlerMappingDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//添加jackson转化器</span></span><br><span class="line">        addRequestBodyAdvice(handlerAdapterDef);</span><br><span class="line">        addResponseBodyAdvice(handlerAdapterDef);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//handlerAdapter加入到ioc容器</span></span><br><span class="line">        readerContext.getRegistry().registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//具体添加jackson转化对象方法</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addRequestBodyAdvice</span><span class="params">(RootBeanDefinition beanDef)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            beanDef.getPropertyValues().add(<span class="string">&quot;requestBodyAdvice&quot;</span>,</span><br><span class="line">                                            <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(JsonViewRequestBodyAdvice.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResponseBodyAdvice</span><span class="params">(RootBeanDefinition beanDef)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (jackson2Present) &#123;</span><br><span class="line">            beanDef.getPropertyValues().add(<span class="string">&quot;responseBodyAdvice&quot;</span>,</span><br><span class="line">                                            <span class="keyword">new</span> <span class="title class_">RootBeanDefinition</span>(JsonViewResponseBodyAdvice.class));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol><h3 id="3-接收Cookie数据"><a href="#3-接收Cookie数据" class="headerlink" title="3. 接收Cookie数据"></a>3. 接收Cookie数据</h3><p>可以使用 <code>@CookieValue</code> 注释将 HTTP Cookie 的值绑定到控制器中的方法参数。</p><p>考虑使用以下 cookie 的请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JSESSIONID=415A4AC178C59DACE0B2C9CA727CDD84</span><br></pre></td></tr></table></figure><p>下面的示例演示如何获取 cookie 值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(<span class="meta">@CookieValue(&quot;JSESSIONID&quot;)</span> String cookie)</span> &#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-接收请求头数据"><a href="#4-接收请求头数据" class="headerlink" title="4. 接收请求头数据"></a>4. 接收请求头数据</h3><p>可以使用 <code>@RequestHeader</code> 批注将请求标头绑定到控制器中的方法参数。</p><p>请考虑以下带有标头的请求：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Host                    localhost:<span class="number">8080</span></span><br><span class="line">Accept                  text/html,application/xhtml+xml,application/xml;q=<span class="number">0.9</span></span><br><span class="line">Accept-Language         fr,en-gb;q=<span class="number">0.7</span>,en;q=<span class="number">0.3</span></span><br><span class="line">Accept-Encoding         gzip,deflate</span><br><span class="line">Accept-Charset          ISO-<span class="number">8859</span>-<span class="number">1</span>,utf-<span class="number">8</span>;q=<span class="number">0.7</span>,*;q=<span class="number">0.7</span></span><br><span class="line">Keep-Alive              <span class="number">300</span></span><br></pre></td></tr></table></figure><p>下面的示例获取 <code>Accept-Encoding</code> 和 <code>Keep-Alive</code> 标头的值：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">handle</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;Accept-Encoding&quot;)</span> String encoding, </span></span><br><span class="line"><span class="params">    <span class="meta">@RequestHeader(&quot;Keep-Alive&quot;)</span> <span class="type">long</span> keepAlive)</span> &#123; </span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-原生Api对象操作"><a href="#5-原生Api对象操作" class="headerlink" title="5. 原生Api对象操作"></a>5. 原生Api对象操作</h3><p><a href="https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html">https://docs.spring.io/spring-framework/reference/web/webmvc/mvc-controller/ann-methods/arguments.html</a></p><p>下表描述了支持的控制器方法参数</p><table><thead><tr><th>Controller method argument 控制器方法参数</th><th>Description</th></tr></thead><tbody><tr><td><code>jakarta.servlet.ServletRequest</code>, <code>jakarta.servlet.ServletResponse</code></td><td>请求&#x2F;响应对象</td></tr><tr><td><code>jakarta.servlet.http.HttpSession</code></td><td>强制存在会话。因此，这样的参数永远不会为 <code>null</code> 。</td></tr><tr><td><code>java.io.InputStream</code>, <code>java.io.Reader</code></td><td>用于访问由 Servlet API 公开的原始请求正文。</td></tr><tr><td><code>java.io.OutputStream</code>, <code>java.io.Writer</code></td><td>用于访问由 Servlet API 公开的原始响应正文。</td></tr><tr><td><code>@PathVariable</code></td><td>接收路径参数注解</td></tr><tr><td><code>@RequestParam</code></td><td>用于访问 Servlet 请求参数，包括多部分文件。参数值将转换为声明的方法参数类型。</td></tr><tr><td><code>@RequestHeader</code></td><td>用于访问请求标头。标头值将转换为声明的方法参数类型。</td></tr><tr><td><code>@CookieValue</code></td><td>用于访问Cookie。Cookie 值将转换为声明的方法参数类型。</td></tr><tr><td><code>@RequestBody</code></td><td>用于访问 HTTP 请求正文。正文内容通过使用 <code>HttpMessageConverter</code> 实现转换为声明的方法参数类型。</td></tr><tr><td><code>java.util.Map</code>, <code>org.springframework.ui.Model</code>, <code>org.springframework.ui.ModelMap</code></td><td>共享域对象，并在视图呈现过程中向模板公开。</td></tr><tr><td><code>Errors</code>, <code>BindingResult</code></td><td>验证和数据绑定中的错误信息获取对象！</td></tr></tbody></table><p>获取原生对象示例：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 如果想要获取请求或者响应对象,或者会话等,可以直接在形参列表传入,并且不分先后顺序!</span></span><br><span class="line"><span class="comment"> * 注意: 接收原生对象,并不影响参数接收!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;api&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">api</span><span class="params">(HttpSession session , HttpServletRequest request,</span></span><br><span class="line"><span class="params">                  HttpServletResponse response)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">method</span> <span class="operator">=</span> request.getMethod();</span><br><span class="line">    System.out.println(<span class="string">&quot;method = &quot;</span> + method);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;api&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-共享域对象操作"><a href="#6-共享域对象操作" class="headerlink" title="6. 共享域对象操作"></a>6. 共享域对象操作</h3><h4 id="6-1-属性（共享）域作用回顾"><a href="#6-1-属性（共享）域作用回顾" class="headerlink" title="6.1 属性（共享）域作用回顾"></a>6.1 属性（共享）域作用回顾</h4><p>在 JavaWeb 中，共享域指的是在 Servlet 中存储数据，以便在同一 Web 应用程序的多个组件中进行共享和访问。常见的共享域有四种：<code>ServletContext</code>、<code>HttpSession</code>、<code>HttpServletRequest</code>、<code>PageContext</code>。</p><ol><li><code>ServletContext</code> 共享域：<code>ServletContext</code> 对象可以在整个 Web 应用程序中共享数据，是最大的共享域。一般可以用于保存整个 Web 应用程序的全局配置信息，以及所有用户都共享的数据。在 <code>ServletContext</code> 中保存的数据是线程安全的。</li><li><code>HttpSession</code> 共享域：<code>HttpSession</code> 对象可以在同一用户发出的多个请求之间共享数据，但只能在同一个会话中使用。比如，可以将用户登录状态保存在 <code>HttpSession</code> 中，让用户在多个页面间保持登录状态。</li><li><code>HttpServletRequest</code> 共享域：<code>HttpServletRequest</code> 对象可以在同一个请求的多个处理器方法之间共享数据。比如，可以将请求的参数和属性存储在 <code>HttpServletRequest</code> 中，让处理器方法之间可以访问这些数据。</li><li><code>PageContext</code> 共享域：<code>PageContext</code> 对象是在 JSP 页面Servlet 创建时自动创建的。它可以在 JSP 的各个作用域中共享数据，包括<code>pageScope</code>、<code>requestScope</code>、<code>sessionScope</code>、<code>applicationScope</code> 等作用域。</li></ol><p>共享域的作用是提供了方便实用的方式在同一 Web 应用程序的多个组件之间传递数据，并且可以将数据保存在不同的共享域中，根据需要进行选择和使用。</p><p>![](Spring MVC控制层框架&#x2F;img010_ORhRMPYJ9v.png)</p><h4 id="6-2-Request级别属性（共享）域"><a href="#6-2-Request级别属性（共享）域" class="headerlink" title="6.2 Request级别属性（共享）域"></a>6.2 Request级别属性（共享）域</h4><ol><li>使用 Model 类型的形参<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/model&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestModel</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明Model类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        Model model)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    model.addAttribute(<span class="string">&quot;requestScopeMessageModel&quot;</span>,<span class="string">&quot;i am very happy[model]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 ModelMap 类型的形参<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/model/map&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestModelMap</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明ModelMap类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        ModelMap modelMap)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    modelMap.addAttribute(<span class="string">&quot;requestScopeMessageModelMap&quot;</span>,<span class="string">&quot;i am very happy[model map]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 Map 类型的形参<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/map&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrRequestMap</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 在形参位置声明Map类型变量，用于存储模型数据</span></span><br><span class="line"><span class="params">        Map&lt;String, Object&gt; map)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 我们将数据存入模型，SpringMVC 会帮我们把模型数据存入请求域</span></span><br><span class="line">    <span class="comment">// 存入请求域这个动作也被称为暴露到请求域</span></span><br><span class="line">    map.put(<span class="string">&quot;requestScopeMessageMap&quot;</span>, <span class="string">&quot;i am very happy[map]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用原生 request 对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/original&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrOriginalRequest</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 拿到原生对象，就可以调用原生方法执行各种操作</span></span><br><span class="line"><span class="params">        HttpServletRequest request)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    request.setAttribute(<span class="string">&quot;requestScopeMessageOriginal&quot;</span>, <span class="string">&quot;i am very happy[original]&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>使用 ModelAndView 对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/request/mav&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ModelAndView <span class="title function_">testAttrByModelAndView</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.创建ModelAndView对象</span></span><br><span class="line">    <span class="type">ModelAndView</span> <span class="variable">modelAndView</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ModelAndView</span>();</span><br><span class="line">    <span class="comment">// 2.存入模型数据</span></span><br><span class="line">    modelAndView.addObject(<span class="string">&quot;requestScopeMessageMAV&quot;</span>, <span class="string">&quot;i am very happy[mav]&quot;</span>);</span><br><span class="line">    <span class="comment">// 3.设置视图名称</span></span><br><span class="line">    modelAndView.setViewName(<span class="string">&quot;target&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> modelAndView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="6-3-Session级别属性（共享）域"><a href="#6-3-Session级别属性（共享）域" class="headerlink" title="6.3 Session级别属性（共享）域"></a>6.3 Session级别属性（共享）域</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/attr/session&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">testAttrSession</span><span class="params">(HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">//直接对session对象操作,即对会话范围操作!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="6-4-Application级别属性（共享）域"><a href="#6-4-Application级别属性（共享）域" class="headerlink" title="6.4 Application级别属性（共享）域"></a>6.4 Application级别属性（共享）域</h4><p>解释：springmvc会在初始化容器的时候，讲servletContext对象存储到ioc容器中！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/attr/application&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">attrApplication</span><span class="params">()</span> &#123;</span><br><span class="line">    </span><br><span class="line">    servletContext.setAttribute(<span class="string">&quot;appScopeMsg&quot;</span>, <span class="string">&quot;i am hungry...&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;target&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、SpringMVC响应数据"><a href="#三、SpringMVC响应数据" class="headerlink" title="三、SpringMVC响应数据"></a>三、SpringMVC响应数据</h2><h3 id="1-handler方法分析"><a href="#1-handler方法分析" class="headerlink" title="1. handler方法分析"></a>1. handler方法分析</h3><p>理解handler方法的作用和组成：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> 一个controller的方法是控制层的一个处理器,我们称为handler</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler需要使用<span class="doctag">@RequestMapping</span>/<span class="doctag">@GetMapping</span>系列,声明路径,在HandlerMapping中注册,供DS查找!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler作用总结:</span></span><br><span class="line"><span class="comment"> *       1.接收请求参数(param,json,pathVariable,共享域等) </span></span><br><span class="line"><span class="comment"> *       2.调用业务逻辑 </span></span><br><span class="line"><span class="comment"> *       3.响应前端数据(页面（不讲解模版页面跳转）,json,转发和重定向等)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">TODO:</span> handler如何处理呢</span></span><br><span class="line"><span class="comment"> *       1.接收参数: handler(形参列表: 主要的作用就是用来接收参数)</span></span><br><span class="line"><span class="comment"> *       2.调用业务: &#123; 方法体  可以向后调用业务方法 service.xx() &#125;</span></span><br><span class="line"><span class="comment"> *       3.响应数据: return 返回结果,可以快速响应前端数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handler</span><span class="params">(简化请求参数接收)</span>&#123;</span><br><span class="line">    调用业务方法</span><br><span class="line">    <span class="keyword">return</span> 简化响应前端数据;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结： 请求数据接收，我们都是通过handler的形参列表</p><p>&#x20;            前端数据响应，我们都是通过handler的return关键字快速处理！</p><p>&#x20;springmvc简化了参数接收和响应！</p><h3 id="2-页面跳转控制"><a href="#2-页面跳转控制" class="headerlink" title="2. 页面跳转控制"></a>2. 页面跳转控制</h3><h4 id="2-1-快速返回jsp视图"><a href="#2-1-快速返回jsp视图" class="headerlink" title="2.1 快速返回jsp视图"></a>2.1 快速返回jsp视图</h4><ol><li><p>开发模式回顾</p><p>在 Web 开发中，有两种主要的开发模式：前后端分离和混合开发。</p><p>前后端分离模式：</p><p>指将前端的界面和后端的业务逻辑通过接口分离开发的一种方式。开发人员使用不同的技术栈和框架，前端开发人员主要负责页面的呈现和用户交互，后端开发人员主要负责业务逻辑和数据存储。前后端通信通过 API 接口完成，数据格式一般使用 JSON 或 XML。前后端分离模式可以提高开发效率，同时也有助于代码重用和维护。</p><p>混合开发模式：</p><p>指将前端和后端的代码集成在同一个项目中，共享相同的技术栈和框架。这种模式在小型项目中比较常见，可以减少学习成本和部署难度。但是，在大型项目中，这种模式会导致代码耦合性很高，维护和升级难度较大。</p><p>对于混合开发，我们就需要使用动态页面技术，动态展示Java的共享域数据！！</p></li><li><p>jsp技术了解</p><p>JSP（JavaServer Pages）是一种动态网页开发技术，它是由 Sun 公司提出的一种基于 Java 技术的 Web 页面制作技术，可以在 HTML 文件中嵌入 Java 代码，使得生成动态内容的编写更加简单。</p><p>JSP 最主要的作用是生成动态页面。它允许将 Java 代码嵌入到 HTML 页面中，以便使用 Java 进行数据库查询、处理表单数据和生成 HTML 等动态内容。另外，JSP 还可以与 Servlet 结合使用，实现更加复杂的 Web 应用程序开发。</p><p>JSP 的主要特点包括：</p><ol><li>简单：JSP 通过将 Java 代码嵌入到 HTML 页面中，使得生成动态内容的编写更加简单。</li><li>高效：JSP 首次运行时会被转换为 Servlet，然后编译为字节码，从而可以启用 Just-in-Time（JIT）编译器，实现更高效的运行。</li><li>多样化：JSP 支持多种标准标签库，包括 JSTL（JavaServer Pages 标准标签库）、EL（表达式语言）等，可以帮助开发人员更加方便的处理常见的 Web 开发需求。<br>总之，JSP 是一种简单高效、多样化的动态网页开发技术，它可以方便地生成动态页面和与 Servlet 结合使用，是 Java Web 开发中常用的技术之一。</li></ol></li><li><p>准备jsp页面和依赖</p><p>pom.xml依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- jsp需要依赖! jstl--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.servlet.jsp.jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.servlet.jsp.jstl-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>jsp页面创建</p><p>建议位置：&#x2F;WEB-INF&#x2F;下，避免外部直接访问！</p><p>位置：&#x2F;WEB-INF&#x2F;views&#x2F;home.jsp</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">&quot;text/html;charset=UTF-8&quot;</span> language=<span class="string">&quot;java&quot;</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">        &lt;!-- 可以获取共享域的数据,动态展示! jsp== 后台vue --&gt;</span><br><span class="line">        $&#123;msg&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>快速响应模版页面</p><ol><li><p>配置jsp视图解析器</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置动态页面语言jsp的视图解析器,快速查找jsp--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;viewClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;org.springframework.web.servlet.view.JstlView&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;prefix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/WEB-INF/views/&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;suffix&quot;</span> <span class="attr">value</span>=<span class="string">&quot;.jsp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>handler返回视图</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  跳转到提交文件页面  /save/jump</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> *  如果要返回jsp页面!</span></span><br><span class="line"><span class="comment"> *     1.方法返回值改成字符串类型</span></span><br><span class="line"><span class="comment"> *     2.返回逻辑视图名即可    </span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;prefix&quot; value=&quot;/WEB-INF/views/&quot;/&gt;</span></span><br><span class="line"><span class="comment"> *            + 逻辑视图名 +</span></span><br><span class="line"><span class="comment"> *         &lt;property name=&quot;suffix&quot; value=&quot;.jsp&quot;/&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;jump&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">jumpJsp</span><span class="params">(Model model)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;FileController.jumpJsp&quot;</span>);</span><br><span class="line">    model.addAttribute(<span class="string">&quot;msg&quot;</span>,<span class="string">&quot;request data!!&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="2-2-转发和重定向"><a href="#2-2-转发和重定向" class="headerlink" title="2.2 转发和重定向"></a>2.2 转发和重定向</h4><p>在 Spring MVC 中，Handler 方法返回值来实现快速转发，可以使用 <code>redirect</code> 或者 <code>forward</code> 关键字来实现重定向。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/redirect-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">redirectDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 重定向到 /demo 路径 </span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;redirect:/demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/forward-demo&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">forwardDemo</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 转发到 /demo 路径</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;forward:/demo&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意： 转发和重定向到项目下资源路径都是相同，都不需要添加项目根路径！填写项目下路径即可！</span></span><br></pre></td></tr></table></figure><p>总结：</p><ul><li>将方法的返回值，设置String类型</li><li>转发使用forward关键字，重定向使用redirect关键字</li><li>关键字: &#x2F;路径</li><li>注意：如果是项目下的资源，转发和重定向都一样都是项目下路径！都不需要添加项目根路径！</li></ul><h3 id="3-返回JSON数据（重点）"><a href="#3-返回JSON数据（重点）" class="headerlink" title="3. 返回JSON数据（重点）"></a>3. 返回JSON数据（重点）</h3><h4 id="3-1-前置准备"><a href="#3-1-前置准备" class="headerlink" title="3.1 前置准备"></a>3.1 前置准备</h4><p>导入jackson依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>添加json数据转化器</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment">   注意: 导入mvc命名空间!</span></span><br><span class="line"><span class="comment">   mvc:annotation-driven 是一个整合标签</span></span><br><span class="line"><span class="comment">                         他会导入handlerMapping和handlerAdapter</span></span><br><span class="line"><span class="comment">                         他会导入json数据格式转化器等等!</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-ResponseBody"><a href="#3-2-ResponseBody" class="headerlink" title="3.2 @ResponseBody"></a>3.2 @ResponseBody</h4><ol><li><p>方法上使用@ResponseBody</p><p>可以在方法上使用 <code>@ResponseBody</code>注解，用于将方法返回的对象序列化为 JSON 或 XML 格式的数据，并发送给客户端。在前后端分离的项目中使用！</p><p>测试方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/accounts/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handle</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体来说，<code>@ResponseBody</code> 注解可以用来标识方法或者方法返回值，表示方法的返回值是要直接返回给客户端的数据，而不是由视图解析器来解析并渲染生成响应体（viewResolver没用）。</p><p>测试方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@RequestMapping(value = &quot;/user/detail&quot;, method = RequestMethod.POST)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">getUser</span><span class="params">(<span class="meta">@RequestBody</span> User userParam)</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;userParam = &quot;</span> + userParam);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(<span class="number">18</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;John&quot;</span>);</span><br><span class="line">    <span class="comment">//返回的对象,会使用jackson的序列化工具,转成json返回给前端!</span></span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>返回结果：</p><p>![](Spring MVC控制层框架&#x2F;image_hPJueYv109.png)</p></li><li><p>类上使用@ResponseBody</p><p>如果类中每个方法上都标记了 @ResponseBody 注解，那么这些注解就可以提取到类上。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span>  <span class="comment">//responseBody可以添加到类上,代表默认类中的所有方法都生效!</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;param&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ParamController</span> &#123;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-3-RestController"><a href="#3-3-RestController" class="headerlink" title="3.3 @RestController"></a>3.3 @RestController</h4><p>类上的 @ResponseBody 注解可以和 @Controller 注解合并为 @RestController 注解。所以使用了 @RestController 注解就相当于给类中的每个方法都加了 @ResponseBody 注解。</p><p>RestController源码:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RestController &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">   * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@since</span> 4.0.1</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@AliasFor(annotation = Controller.class)</span></span><br><span class="line">  String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-返回静态资源处理"><a href="#4-返回静态资源处理" class="headerlink" title="4. 返回静态资源处理"></a>4. 返回静态资源处理</h3><ol><li><p><strong>静态资源概念</strong></p><p>资源本身已经是可以直接拿到浏览器上使用的程度了，<strong>不需要在服务器端做任何运算、处理</strong>。典型的静态资源包括：</p><ul><li>纯HTML文件</li><li>图片</li><li>CSS文件</li><li>JavaScript文件</li><li>……</li></ul></li><li><p><strong>静态资源访问和问题解决</strong></p><ul><li><p>web应用加入静态资源</p><p>![](Spring MVC控制层框架&#x2F;image_4C0oYuW6p5.png)</p></li></ul></li></ol><ul><li><p>手动构建确保编译</p><p>![](Spring MVC控制层框架&#x2F;image_rlTcHF-Uge.png)</p><p>![](Spring MVC控制层框架&#x2F;image_nJdal6tcLm.png)</p><pre><code>![](Spring MVC控制层框架/image_wsWSmj8Yfr.png)</code></pre><ul><li><p>访问静态资源</p><p>![](Spring MVC控制层框架&#x2F;image_j2NW4C8FO9.png)</p></li><li><p>问题分析</p><ul><li>DispatcherServlet 的 url-pattern 配置的是“&#x2F;”</li><li>url-pattern 配置“&#x2F;”表示整个 Web 应用范围内所有请求都由 SpringMVC 来处理</li></ul></li><li><p>对 SpringMVC 来说，必须有对应的 @RequestMapping 才能找到处理请求的方法</p><ul><li>现在 images&#x2F;mi.jpg 请求没有对应的 @RequestMapping 所以返回 404</li></ul></li><li><p>问题解决</p><p>在 SpringMVC 配置文件中增加配置：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.controller&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 加入这个配置，SpringMVC 就会在遇到没有 @RequestMapping 的请求时放它过去 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所谓放它过去就是让这个请求去找它原本要访问的资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>再次测试访问图片：</p><p>![](Spring MVC控制层框架&#x2F;image_Hi-upkttjY.png)</p><p>新的问题：其他原本正常的handler请求访问不了了</p><p>handler无法访问</p><p>解决方案：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 开启 SpringMVC 的注解驱动功能。这个配置也被称为 SpringMVC 的标配。 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 标配：因为 SpringMVC 环境下非常多的功能都要求必须打开注解驱动才能正常工作。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><h2 id="四、RESTFul风格设计"><a href="#四、RESTFul风格设计" class="headerlink" title="四、RESTFul风格设计"></a>四、RESTFul风格设计</h2><h3 id="1-RESTFul风格概述"><a href="#1-RESTFul风格概述" class="headerlink" title="1. RESTFul风格概述"></a>1. RESTFul风格概述</h3><h4 id="1-1-RESTFul风格简介"><a href="#1-1-RESTFul风格简介" class="headerlink" title="1.1 RESTFul风格简介"></a>1.1 RESTFul风格简介</h4><p>![](Spring MVC控制层框架&#x2F;image_e-dNiN_-8D.png)</p><p>RESTful（Representational State Transfer）是一种软件架构风格，用于设计网络应用程序和服务之间的通信。它是一种基于标准 HTTP 方法的简单和轻量级的通信协议，广泛应用于现代的Web服务开发。</p><p>通过遵循 RESTful 架构的设计原则，可以构建出易于理解、可扩展、松耦合和可重用的 Web 服务。RESTful API 的特点是简单、清晰，并且易于使用和理解，它们使用标准的 HTTP 方法和状态码进行通信，不需要额外的协议和中间件。</p><p>RESTful 架构通常用于构建 Web API，提供数据的传输和操作。它可以用于各种应用场景，包括客户端-服务器应用、单页应用（SPA）、移动应用程序和微服务架构等。</p><p>总而言之，RESTful 是一种基于 HTTP 和标准化的设计原则的软件架构风格，用于设计和实现可靠、可扩展和易于集成的 Web 服务和应用程序！</p><p>![](Spring MVC控制层框架&#x2F;image_xHIbi73wr9.png)</p><p>学习RESTful设计原则可以帮助我们更好去设计HTTP协议的API接口！！</p><h4 id="1-2-RESTFul风格特点"><a href="#1-2-RESTFul风格特点" class="headerlink" title="1.2 RESTFul风格特点"></a>1.2 RESTFul风格特点</h4><ol><li><p>每一个URI代表1种资源（URI 是名词）；</p></li><li><p>客户端使用GET、POST、PUT、DELETE 4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；</p></li><li><p>资源的表现形式是XML或者<strong>JSON</strong>；</p></li><li><p>客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。</p></li><li><p>小结：rest 面向的是资源、而不是功能；rest操作要求符合幂等性</p><pre><code>       幂等性：执行一次操作和执行多次操作对系统的影响是一样的</code></pre></li></ol><h4 id="1-3-RESTFul风格设计规范"><a href="#1-3-RESTFul风格设计规范" class="headerlink" title="1.3 RESTFul风格设计规范"></a>1.3 <strong>RESTFul风格设计规范</strong></h4><ol><li><p><strong>HTTP协议请求方式要求</strong></p><p>REST 风格主张在项目设计、开发过程中，具体的操作符合<strong>HTTP协议定义的请求方式的语义</strong>。</p><table><thead><tr><th>操作</th><th>请求方式</th></tr></thead><tbody><tr><td>查询操作</td><td>GET</td></tr><tr><td>保存操作</td><td>POST</td></tr><tr><td>删除操作</td><td>DELETE</td></tr><tr><td>更新操作</td><td>PUT</td></tr></tbody></table></li><li><p><strong>URL路径风格要求</strong></p><p>REST风格下每个资源都应该有一个唯一的标识符，例如一个 URI（统一资源标识符）或者一个 URL（统一资源定位符）。资源的标识符应该能明确地说明该资源的信息，同时也应该是可被理解和解释的！</p><p>使用URL+请求方式确定具体的动作，他也是一种标准的HTTP协议请求！</p><table><thead><tr><th>操作</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>保存</td><td>&#x2F;CRUD&#x2F;saveEmp</td><td>URL 地址：&#x2F;emp&#xA;请求方式：POST</td></tr><tr><td>删除</td><td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;emp&#x2F;2&#xA;请求方式：DELETE</td></tr><tr><td>更新</td><td>&#x2F;CRUD&#x2F;updateEmp</td><td>URL 地址：&#x2F;emp&#xA;请求方式：PUT</td></tr><tr><td>查询</td><td>&#x2F;CRUD&#x2F;editEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;emp&#x2F;2&#xA;请求方式：GET</td></tr></tbody></table></li></ol><ul><li><p>总结</p><p>根据接口的具体动作，选择具体的HTTP协议请求方式</p><p>路径设计从原来携带动标识，改成名词，对应资源的唯一标识即可！</p></li></ul><h4 id="1-4-RESTFul风格好处"><a href="#1-4-RESTFul风格好处" class="headerlink" title="1.4 RESTFul风格好处"></a>1.4 RESTFul风格好处</h4><ol><li><p>含蓄，安全</p><p>使用问号键值对的方式给服务器传递数据太明显，容易被人利用来对系统进行破坏。使用 REST 风格携带数据不再需要明显的暴露数据的名称。</p></li><li><p>风格统一</p><p>URL 地址整体格式统一，从前到后始终都使用斜杠划分各个单词，用简单一致的格式表达语义。</p></li><li><p>无状态</p><p>在调用一个接口（访问、操作资源）的时候，可以不用考虑上下文，不用考虑当前状态，极大的降低了系统设计的复杂度。</p></li><li><p>严谨，规范</p><p>严格按照 HTTP1.1 协议中定义的请求方式本身的语义进行操作。</p></li><li><p>简洁，优雅</p><p>过去做增删改查操作需要设计4个不同的URL，现在一个就够了。</p><table><thead><tr><th>操作</th><th>传统风格</th><th>REST 风格</th></tr></thead><tbody><tr><td>保存</td><td>&#x2F;CRUD&#x2F;saveEmp</td><td>URL 地址：&#x2F;emp&#xA;请求方式：POST</td></tr><tr><td>删除</td><td>&#x2F;CRUD&#x2F;removeEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;emp&#x2F;2&#xA;请求方式：DELETE</td></tr><tr><td>更新</td><td>&#x2F;CRUD&#x2F;updateEmp</td><td>URL 地址：&#x2F;emp&#xA;请求方式：PUT</td></tr><tr><td>查询</td><td>&#x2F;CRUD&#x2F;editEmp?empId&#x3D;2</td><td>URL 地址：&#x2F;emp&#x2F;2&#xA;请求方式：GET</td></tr></tbody></table></li><li><p>丰富的语义</p><p>通过 URL 地址就可以知道资源之间的关系。它能够把一句话中的很多单词用斜杠连起来，反过来说就是可以在 URL 地址中用一句话来充分表达语义。</p><blockquote><p><a href="http://localhost:8080/shop" title="http:&#x2F;&#x2F;localhost:8080&#x2F;shop">http://localhost:8080/shop</a> <a href="http://localhost:8080/shop/product" title="http:&#x2F;&#x2F;localhost:8080&#x2F;shop&#x2F;product">http://localhost:8080/shop/product</a> <a href="http://localhost:8080/shop/product/cellPhone" title="http:&#x2F;&#x2F;localhost:8080&#x2F;shop&#x2F;product&#x2F;cellPhone">http://localhost:8080/shop/product/cellPhone</a> <a href="http://localhost:8080/shop/product/cellPhone/iPhone" title="http:&#x2F;&#x2F;localhost:8080&#x2F;shop&#x2F;product&#x2F;cellPhone&#x2F;iPhone">http://localhost:8080/shop/product/cellPhone/iPhone</a></p></blockquote></li></ol><h3 id="2-RESTFul风格实战"><a href="#2-RESTFul风格实战" class="headerlink" title="2. RESTFul风格实战"></a>2. RESTFul风格实战</h3><h4 id="2-1-需求分析"><a href="#2-1-需求分析" class="headerlink" title="2.1 需求分析"></a>2.1 需求分析</h4><ul><li>数据结构： User {id 唯一标识,name 用户名，age 用户年龄}</li><li>功能分析<ul><li>用户数据分页展示功能（条件：page 页数 默认1，size 每页数量 默认 10）</li><li>保存用户功能</li><li>根据用户id查询用户详情功能</li><li>根据用户id更新用户数据功能</li><li>根据用户id删除用户数据功能</li><li>多条件模糊查询用户功能（条件：keyword 模糊关键字，page 页数 默认1，size 每页数量 默认 10）</li></ul></li></ul><h4 id="2-2-RESTFul风格接口设计"><a href="#2-2-RESTFul风格接口设计" class="headerlink" title="2.2 RESTFul风格接口设计"></a>2.2 RESTFul风格接口设计</h4><ol><li><p><strong>接口设计</strong></p><table><thead><tr><th>功能</th><th>接口和请求方式</th><th>请求参数</th><th>返回值</th></tr></thead><tbody><tr><td>分页查询</td><td>GET  &#x2F;user</td><td>page&#x3D;1&amp;size&#x3D;10 param</td><td>{ 响应数据 }</td></tr><tr><td>用户添加</td><td>POST &#x2F;user</td><td>{ user 数据 }</td><td>{响应数据}</td></tr><tr><td>用户详情</td><td>GET &#x2F;user&#x2F;1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>用户更新</td><td>PUT &#x2F;user</td><td>{ user 更新数据}</td><td>{响应数据}</td></tr><tr><td>用户删除</td><td>DELETE &#x2F;user&#x2F;1</td><td>路径参数</td><td>{响应数据}</td></tr><tr><td>条件模糊</td><td>GET &#x2F;user&#x2F;search</td><td>page&#x3D;1&amp;size&#x3D;10&amp;keywork&#x3D;关键字</td><td>{响应数据}</td></tr></tbody></table></li><li><p><strong>问题讨论</strong></p><p>为什么查询用户详情，就使用路径传递参数，多条件模糊查询，就使用请求参数传递？</p><p>误区：restful风格下，不是所有请求参数都是路径传递！可以使用其他方式传递！</p><p>在 RESTful API 的设计中，路径和请求参数和请求体都是用来向服务器传递信息的方式。</p><ul><li>对于查询用户详情，使用路径传递参数是因为这是一个单一资源的查询，即查询一条用户记录。使用路径参数可以明确指定所请求的资源，便于服务器定位并返回对应的资源，也符合 RESTful 风格的要求。</li><li>而对于多条件模糊查询，使用请求参数传递参数是因为这是一个资源集合的查询，即查询多条用户记录。使用请求参数可以通过组合不同参数来限制查询结果，路径参数的组合和排列可能会很多，不如使用请求参数更加灵活和简洁。<br>此外，还有一些通用的原则可以遵循：</li><li>路径参数应该用于指定资源的唯一标识或者 ID，而请求参数应该用于指定查询条件或者操作参数。</li><li>请求参数应该限制在 10 个以内，过多的请求参数可能导致接口难以维护和使用。</li><li>对于敏感信息，最好使用 POST 和请求体来传递参数。</li></ul></li></ol><h4 id="2-3-后台接口实现"><a href="#2-3-后台接口实现" class="headerlink" title="2.3 后台接口实现"></a>2.3 后台接口实现</h4><p>准备用户实体类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.pojo;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.pojo</span></span><br><span class="line"><span class="comment"> * 用户实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(Integer age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>准备用户Controller:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 用户模块的控制器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟分页查询业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryPage</span><span class="params">(<span class="meta">@RequestParam(name = &quot;page&quot;,required = false,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;size&quot;,required = false,defaultValue = &quot;10&quot;)</span><span class="type">int</span> size)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;page = &quot;</span> + page + <span class="string">&quot;, size = &quot;</span> + size);</span><br><span class="line">        System.out.println(<span class="string">&quot;分页查询业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户保存业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">saveUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户保存业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户详情业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">detailUser</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id = &quot;</span> + id);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户详情业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟用户更新业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">updateUser</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user = &quot;</span> + user);</span><br><span class="line">        System.out.println(<span class="string">&quot;用户更新业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟条件分页查询业务接口</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;search&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">queryPage</span><span class="params">(<span class="meta">@RequestParam(name = &quot;page&quot;,required = false,defaultValue = &quot;1&quot;)</span><span class="type">int</span> page,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;size&quot;,required = false,defaultValue = &quot;10&quot;)</span><span class="type">int</span> size,</span></span><br><span class="line"><span class="params">                            <span class="meta">@RequestParam(name = &quot;keyword&quot;,required= false)</span>String keyword)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;page = &quot;</span> + page + <span class="string">&quot;, size = &quot;</span> + size + <span class="string">&quot;, keyword = &quot;</span> + keyword);</span><br><span class="line">        System.out.println(<span class="string">&quot;条件分页查询业务!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;status&#x27;:&#x27;ok&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、基于RESTFul风格增删改查练习"><a href="#五、基于RESTFul风格增删改查练习" class="headerlink" title="五、基于RESTFul风格增删改查练习"></a>五、基于RESTFul风格增删改查练习</h2><h3 id="1-案例功能和接口分析"><a href="#1-案例功能和接口分析" class="headerlink" title="1. 案例功能和接口分析"></a>1. 案例功能和接口分析</h3><h4 id="1-1-功能预览"><a href="#1-1-功能预览" class="headerlink" title="1.1 功能预览"></a>1.1 功能预览</h4><p>![](Spring MVC控制层框架&#x2F;image_CloFbJri5w.png)</p><h4 id="1-2-接口分析"><a href="#1-2-接口分析" class="headerlink" title="1.2 接口分析"></a>1.2 接口分析</h4><ol><li>学习计划查询<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求说明</span></span><br><span class="line"><span class="comment">    查询全部数据页数据</span></span><br><span class="line"><span class="comment">请求uri</span></span><br><span class="line"><span class="comment">    schedule</span></span><br><span class="line"><span class="comment">请求方式 </span></span><br><span class="line"><span class="comment">    get   </span></span><br><span class="line"><span class="comment">响应的json</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;code&quot;:200,</span></span><br><span class="line"><span class="comment">        &quot;flag&quot;:true,</span></span><br><span class="line"><span class="comment">        &quot;data&quot;:[</span></span><br><span class="line"><span class="comment">            &#123;id:1,title:&#x27;学习java&#x27;,completed:true&#125;,</span></span><br><span class="line"><span class="comment">            &#123;id:2,title:&#x27;学习html&#x27;,completed:true&#125;,</span></span><br><span class="line"><span class="comment">            &#123;id:3,title:&#x27;学习css&#x27;,completed:true&#125;,</span></span><br><span class="line"><span class="comment">            &#123;id:4,title:&#x27;学习js&#x27;,completed:true&#125;,</span></span><br><span class="line"><span class="comment">            &#123;id:5,title:&#x27;学习vue&#x27;,completed:true&#125;</span></span><br><span class="line"><span class="comment">        ]</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li>学习计划删除<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求说明</span></span><br><span class="line"><span class="comment">    根据id删除日程</span></span><br><span class="line"><span class="comment">请求uri</span></span><br><span class="line"><span class="comment">    schedule/&#123;id&#125;</span></span><br><span class="line"><span class="comment">请求方式 </span></span><br><span class="line"><span class="comment">    delete</span></span><br><span class="line"><span class="comment">响应的json</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;code&quot;:200,</span></span><br><span class="line"><span class="comment">        &quot;flag&quot;:true,</span></span><br><span class="line"><span class="comment">        &quot;data&quot;:null</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li>学习计划保存<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求说明</span></span><br><span class="line"><span class="comment">    增加日程</span></span><br><span class="line"><span class="comment">请求uri</span></span><br><span class="line"><span class="comment">    schedule</span></span><br><span class="line"><span class="comment">请求方式 </span></span><br><span class="line"><span class="comment">    post</span></span><br><span class="line"><span class="comment">请求体中的JSON</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        title: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">        completed: false</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">响应的json</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;code&quot;:200,</span></span><br><span class="line"><span class="comment">        &quot;flag&quot;:true,</span></span><br><span class="line"><span class="comment">        &quot;data&quot;:null</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li><li>学习计划修改<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">需求说明</span></span><br><span class="line"><span class="comment">    根据id修改数据</span></span><br><span class="line"><span class="comment">请求uri</span></span><br><span class="line"><span class="comment">    schedule</span></span><br><span class="line"><span class="comment">请求方式 </span></span><br><span class="line"><span class="comment">    put</span></span><br><span class="line"><span class="comment">请求体中的JSON</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        id: 1,</span></span><br><span class="line"><span class="comment">        title: &#x27;&#x27;,</span></span><br><span class="line"><span class="comment">        completed: false</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">响应的json</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        &quot;code&quot;:200,</span></span><br><span class="line"><span class="comment">        &quot;flag&quot;:true,</span></span><br><span class="line"><span class="comment">        &quot;data&quot;:null</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="2-工程项目准备"><a href="#2-工程项目准备" class="headerlink" title="2. 工程项目准备"></a>2. 工程项目准备</h3><h4 id="2-1-前端项目搭建"><a href="#2-1-前端项目搭建" class="headerlink" title="2.1 前端项目搭建"></a>2.1 前端项目搭建</h4><ol><li><p>导入前端工程</p></li><li><p>安装npm依赖</p><p>进入前端工程项目文件夹下！</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm i</span><br></pre></td></tr></table></figure></li><li><p>启动前端程序</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-后端项目搭建"><a href="#2-2-后端项目搭建" class="headerlink" title="2.2 后端项目搭建"></a>2.2 后端项目搭建</h4><blockquote><p>数据库怎么办？使用HashMap模拟，所以不涉及和MyBatis、Spring的整合!</p></blockquote><ol><li><p>搭建后台项目</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>17<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springioc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- web相关依赖  --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在 pom.xml 中引入 Jakarta EE Web API 的依赖 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        在 Spring Web MVC 6 中，Servlet API 迁移到了 Jakarta EE API，因此在配置 DispatcherServlet 时需要使用</span></span><br><span class="line"><span class="comment">         Jakarta EE 提供的相应类库和命名空间。错误信息 “‘org.springframework.web.servlet.DispatcherServlet’</span></span><br><span class="line"><span class="comment">         is not assignable to ‘javax.servlet.Servlet,jakarta.servlet.Servlet’” 表明你使用了旧版本的</span></span><br><span class="line"><span class="comment">         Servlet API，没有更新到 Jakarta EE 规范。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.15.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- springwebmvc相关依赖  --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>准备实体类</p><p>包：com.wzb.pojo</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.pojo</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 任务实体类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Schedule</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean completed;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Schedule</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Schedule</span><span class="params">(Integer id, String title, Boolean completed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.completed = completed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setId</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setTitle</span><span class="params">(String title)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">getCompleted</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> completed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCompleted</span><span class="params">(Boolean completed)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.completed = completed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Schedule&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">                <span class="string">&quot;, title=&#x27;&quot;</span> + title + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, completed=&quot;</span> + completed +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>准备R结果包装类</p><p>包：com.wzb.utils</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.utils</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 返回结果类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">R</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">code</span> <span class="operator">=</span> <span class="number">200</span>; <span class="comment">//200成功状态码</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> <span class="literal">true</span>; <span class="comment">//返回状态</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;  <span class="comment">//返回具体数据</span></span><br><span class="line">    </span><br><span class="line">     <span class="keyword">public</span>  <span class="keyword">static</span> R <span class="title function_">ok</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.data = data;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> R  <span class="title function_">fail</span><span class="params">(Object data)</span>&#123;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">R</span>();</span><br><span class="line">        r.code = <span class="number">500</span>; <span class="comment">//错误码</span></span><br><span class="line">        r.flag = <span class="literal">false</span>; <span class="comment">//错误状态</span></span><br><span class="line">        r.data = data;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(<span class="type">int</span> code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isFlag</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFlag</span><span class="params">(<span class="type">boolean</span> flag)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getData</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setData</span><span class="params">(Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>准备业务类</p><p>包：com.wzb.service</p><ol><li>业务接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.service</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: schedule业务接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ScheduleService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回全部学习计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Schedule&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存学习计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedule</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">saveSchedule</span><span class="params">(Schedule schedule)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 更新学习计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> schedule</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">updateSchedule</span><span class="params">(Schedule schedule)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 移除学习计划</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">removeById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>业务实现<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.service.impl</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleServiceImpl</span>  <span class="keyword">implements</span> <span class="title class_">ScheduleService</span> &#123;</span><br><span class="line">    <span class="comment">//准备假数据</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;Integer,Schedule&gt; scheduleMap;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span>  <span class="type">int</span> <span class="variable">maxId</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">            scheduleMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            <span class="type">Schedule</span> <span class="variable">schedule</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">            schedule = <span class="keyword">new</span> <span class="title class_">Schedule</span>(<span class="number">1</span>, <span class="string">&quot;学习Java&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            scheduleMap.put(<span class="number">1</span>, schedule);</span><br><span class="line"></span><br><span class="line">            schedule = <span class="keyword">new</span> <span class="title class_">Schedule</span>(<span class="number">2</span>, <span class="string">&quot;学习H5&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            scheduleMap.put(<span class="number">2</span>, schedule);</span><br><span class="line"></span><br><span class="line">            schedule = <span class="keyword">new</span> <span class="title class_">Schedule</span>(<span class="number">3</span>, <span class="string">&quot;学习Css&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            scheduleMap.put(<span class="number">3</span>, schedule);</span><br><span class="line">            schedule = <span class="keyword">new</span> <span class="title class_">Schedule</span>(<span class="number">4</span>, <span class="string">&quot;学习JavaScript&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">            scheduleMap.put(<span class="number">4</span>, schedule);</span><br><span class="line"></span><br><span class="line">            schedule = <span class="keyword">new</span> <span class="title class_">Schedule</span>(<span class="number">5</span>, <span class="string">&quot;学习Spring&quot;</span>, <span class="literal">true</span>);</span><br><span class="line">            scheduleMap.put(<span class="number">5</span>, schedule);</span><br><span class="line"></span><br><span class="line">        &#125;    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 返回全部学习计划</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> List&lt;Schedule&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(scheduleMap.values());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 保存学习计划</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> schedule</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveSchedule</span><span class="params">(Schedule schedule)</span> &#123;</span><br><span class="line">            maxId++;</span><br><span class="line">            schedule.setId(maxId);</span><br><span class="line">            scheduleMap.put(maxId,schedule);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 更新学习计划</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> schedule</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateSchedule</span><span class="params">(Schedule schedule)</span> &#123;</span><br><span class="line">            scheduleMap.put(schedule.getId(),schedule);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 移除学习计划</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">removeById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">            scheduleMap.remove(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>准备spring-mvc.配置文件</p><p>位置：resources&#x2F;spring-mvc.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:mvc</span>=<span class="string">&quot;http://www.springframework.org/schema/mvc&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.controller,com.wzb.service&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">       注意: 导入mvc命名空间!</span></span><br><span class="line"><span class="comment">       mvc:annotation-driven 是一个整合标签</span></span><br><span class="line"><span class="comment">                             他会导入handlerMapping和handlerAdapter</span></span><br><span class="line"><span class="comment">                             他会导入json数据格式转化器等等!</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span> /&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- viewResolver 不需要配置,因为我们不需要查找逻辑视图!!! --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 加入这个配置，SpringMVC 就会在遇到没有 @RequestMapping 的请求时放它过去 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 所谓放它过去就是让这个请求去找它原本要访问的资源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>准备 web.xml配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">version</span>=<span class="string">&quot;4.0&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 配置SpringMVC中负责处理请求的核心Servlet，也被称为SpringMVC的前端控制器 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- DispatcherServlet的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 通过初始化参数指定SpringMVC配置文件位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 如果不记得contextConfigLocation配置项的名称，可以到DispatcherServlet的父类FrameworkServlet中查找 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 使用classpath:说明这个路径从类路径的根目录开始才查找 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 作为框架的核心组件，在启动过程中有大量的初始化操作要做，这些操作放在第一次请求时才执行非常不恰当 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我们应该将DispatcherServlet设置为随Web应用一起启动 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 对DispatcherServlet来说，url-pattern有两种方式配置 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式一：配置“/”，表示匹配整个Web应用范围内所有请求。这里有一个硬性规定：不能写成“/*”。</span></span><br><span class="line"><span class="comment">      只有这一个地方有这个特殊要求，以后我们再配置Filter还是可以正常写“/*”。 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式二：配置“*.扩展名”，表示匹配整个Web应用范围内部分请求 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-增删改查实现"><a href="#3-增删改查实现" class="headerlink" title="3. 增删改查实现"></a>3. 增删改查实现</h3><h4 id="4-1-项目根路径设计"><a href="#4-1-项目根路径设计" class="headerlink" title="4.1 项目根路径设计"></a>4.1 项目根路径设计</h4><p>因为前端项目设置了后台访问的项目根路径为 &#x2F;rest&#x20;</p><p>我们后台项目也对应的设置：</p><p>![](Spring MVC控制层框架&#x2F;image_fwsj8IhXZJ.png)</p><h4 id="4-2-SpringMVC解决跨域问题"><a href="#4-2-SpringMVC解决跨域问题" class="headerlink" title="4.2 SpringMVC解决跨域问题"></a>4.2 SpringMVC解决跨域问题</h4><p>假设我们有一个网站 <code>http://example.com</code>，现在需要跨域请求另外一个网站 <code>http://api.example.com</code> 中的数据。浏览器就会因为安全问题，拒绝客户端访问请求！</p><p>跨域问题是指在浏览器中发起跨域请求被浏览器拦截的问题。在同一个源域（同一协议、主机、端口），浏览器允许 JavaScript 发起跨域请求；在不同的源域下，浏览器对发起的异域请求会做出不同的限制。</p><p>常见的跨域问题的场景有：</p><ul><li>访问不同的子域名；</li><li>访问不同的端口号；</li><li>访问不同的协议（http、https）；</li><li>访问不同的域名；</li></ul><p>基于CORS方式，解决跨域思路：</p><p>CORS（Cross-Origin Resource Sharing）是 W3C 制定的一种跨域解决方案，它给出了跨域请求和响应的标准。服务器端代码需要在响应头中设置 Access-Control-Allow-Origin，并指定访问来源域名名或 * 通配符，表示允许的跨域请求。浏览器可以根据响应头信息，判断是否允许该请求。</p><p>SpringMVC基于CORS思路解决跨域方案：</p><ul><li><p>@CrossOrigin注解</p><p><code>@CrossOrigin</code> 注释在带注释的【控制器方法】 &#x2F; 【控制器类】上启用跨源请求</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountController</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@CrossOrigin</span></span><br><span class="line">  <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> Account <span class="title function_">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>默认情况下， <code>@CrossOrigin</code> 允许：</p><ul><li>All origins.</li><li>All headers.</li><li>All HTTP methods to which the controller method is mapped. &#x20;<br>注解核心设置属性讲解：</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> CrossOrigin &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置哪些客户端地址可以跨域访问! 格式为: 协议://主机地址:端口号</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@AliasFor(&quot;origins&quot;)</span></span><br><span class="line">  String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">  String[] origins() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置哪些客户端的[自定义请求头]可以跨域访问!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  String[] allowedHeaders() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 设置哪些服务端的自定义响应头,可以被客户端读取!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  String[] exposedHeaders() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   *设置哪些请求方法,可以跨域方式! </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  RequestMethod[] methods() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 值为 true 或者 false</span></span><br><span class="line"><span class="comment">   * 客户端是否可以携带cookie!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  String <span class="title function_">allowCredentials</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>xml全局跨域配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:cors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allowed-origins</span>=<span class="string">&quot;*&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allowed-methods</span>=<span class="string">&quot;GET, PUT&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allowed-headers</span>=<span class="string">&quot;header1, header2, header3&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">exposed-headers</span>=<span class="string">&quot;header1, header2&quot;</span> </span></span><br><span class="line"><span class="tag">    <span class="attr">allow-credentials</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/**&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">allowed-origins</span>=<span class="string">&quot;https://domain1.com&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:cors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="4-3-业务实现"><a href="#4-3-业务实现" class="headerlink" title="4.3 业务实现"></a>4.3 业务实现</h4><ol><li>查询业务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.controller</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 学习计划controller</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    @CrossOrigin 注释在带注释的控制器方法上启用跨源请求</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    默认情况下， </span></span><br><span class="line"><span class="comment">    @CrossOrigin 允许：</span></span><br><span class="line"><span class="comment">            All origins  任何请求主机地址</span></span><br><span class="line"><span class="comment">            All headers  任何请求头</span></span><br><span class="line"><span class="comment">            All HTTP methods to which the controller method is mapped.  任何请求方式!</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">    可以设置:</span></span><br><span class="line"><span class="comment">         @CrossOrigin(origins = &quot;https://domain2.com&quot;) 指定允许跨域请求的主机地址</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;schedule&quot;)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ScheduleController</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ScheduleService scheduleService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> R <span class="title function_">showList</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Schedule&gt; list = scheduleService.getAll();</span><br><span class="line">        <span class="keyword">return</span>  R.ok(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure></li><li>修改业务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">changeSchedule</span><span class="params">(<span class="meta">@RequestBody</span> Schedule schedule)</span>&#123;</span><br><span class="line">    scheduleService.updateSchedule(schedule);</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>删除业务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">removeSchedule</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">    scheduleService.removeById(id);</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>保存业务<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> R <span class="title function_">saveSchedule</span><span class="params">(<span class="meta">@RequestBody</span> Schedule schedule)</span>&#123;</span><br><span class="line">    scheduleService.saveSchedule(schedule);</span><br><span class="line">    <span class="keyword">return</span> R.ok(<span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="六、SpringMVC其他扩展"><a href="#六、SpringMVC其他扩展" class="headerlink" title="六、SpringMVC其他扩展"></a>六、SpringMVC其他扩展</h2><h3 id="1-异常处理机制"><a href="#1-异常处理机制" class="headerlink" title="1. 异常处理机制"></a>1. 异常处理机制</h3><h4 id="1-1-异常处理概念"><a href="#1-1-异常处理概念" class="headerlink" title="1.1 异常处理概念"></a>1.1 异常处理概念</h4><p>开发过程中是不可避免地会出现各种异常情况的，例如网络连接异常、数据格式异常、空指针异常等等。异常的出现可能导致程序的运行出现问题，甚至直接导致程序崩溃。因此，在开发过程中，合理处理异常、避免异常产生、以及对异常进行有效的调试是非常重要的。</p><p>对于异常的处理，一般分为两种方式：</p><ul><li>编程式异常处理：是指在代码中显式地编写处理异常的逻辑。它通常涉及到对异常类型的检测及其处理，例如使用 try-catch 块来捕获异常，然后在 catch 块中编写特定的处理代码，或者在 finally 块中执行一些清理操作。在编程式异常处理中，开发人员需要显式地进行异常处理，异常处理代码混杂在业务代码中，导致代码可读性较差。</li><li>声明式异常处理：则是将异常处理的逻辑从具体的业务逻辑中分离出来，通过配置等方式进行统一的管理和处理。在声明式异常处理中，开发人员只需要为方法或类标注相应的注解（如 <code>@Throws</code> 或 <code>@ExceptionHandler</code>），就可以处理特定类型的异常。相较于编程式异常处理，声明式异常处理可以使代码更加简洁、易于维护和扩展。</li></ul><p>站在宏观角度来看待声明式事务处理：</p><p>整个项目从架构这个层面设计的异常处理的统一机制和规范。</p><p>一个项目中会包含很多个模块，各个模块需要分工完成。如果张三负责的模块按照 A 方案处理异常，李四负责的模块按照 B 方案处理异常……各个模块处理异常的思路、代码、命名细节都不一样，那么就会让整个项目非常混乱。</p><p>使用声明式异常处理，可以统一项目处理异常思路，项目更加清晰明了！</p><h4 id="1-2-声明式异常好处"><a href="#1-2-声明式异常好处" class="headerlink" title="1.2 声明式异常好处"></a>1.2 声明式异常好处</h4><p>![](Spring MVC控制层框架&#x2F;image_vIgpMpZh_2.png)</p><ul><li>使用声明式代替编程式来实现异常管理<ul><li>让异常控制和核心业务解耦，二者各自维护，结构性更好</li></ul></li><li>整个项目层面使用同一套规则来管理异常<ul><li>整个项目代码风格更加统一、简洁</li><li>便于团队成员之间的彼此协作</li></ul></li></ul><h4 id="1-3-基于注解异常声明异常处理"><a href="#1-3-基于注解异常声明异常处理" class="headerlink" title="1.3 基于注解异常声明异常处理"></a>1.3 基于注解异常声明异常处理</h4><ol><li><p>声明异常处理控制器类</p><p>异常处理控制类，统一定义异常处理handler方法！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.execptionhandler</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * description: 全局异常处理器,内部可以定义异常处理Handler!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@RestControllerAdvice</span> = <span class="doctag">@ControllerAdvice</span> + <span class="doctag">@ResponseBody</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ControllerAdvice</span> 代表当前类的异常处理controller! </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GlobalExceptionHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明异常处理hander方法</p><p>异常处理handler方法和普通的handler方法参数接收和响应都一致！</p><p>只不过异常处理handler方法要映射异常，发生对应的异常会调用！</p><p>普通的handler方法要使用@RequestMapping注解映射路径，发生对应的路径调用！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 异常处理handler </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@ExceptionHandler</span>(HttpMessageNotReadableException.class) </span></span><br><span class="line"><span class="comment"> * 该注解标记异常处理Handler,并且指定发生异常调用该方法!</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e 获取异常对象!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 返回handler处理结果!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(HttpMessageNotReadableException.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerJsonDateException</span><span class="params">(HttpMessageNotReadableException e)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 当发生空指针异常会触发此方法!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(NullPointerException.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerNullException</span><span class="params">(NullPointerException e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 所有异常都会触发此方法!但是如果有具体的异常处理Handler! </span></span><br><span class="line"><span class="comment"> * 具体异常处理Handler优先级更高!</span></span><br><span class="line"><span class="comment"> * 例如: 发生NullPointerException异常!</span></span><br><span class="line"><span class="comment"> *       会触发handlerNullException方法,不会触发handlerException方法!</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> e</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">handlerException</span><span class="params">(Exception e)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>配置文件扫描控制器类配置</p><p>确保异常处理控制类被扫描</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 扫描controller对应的包,将handler加入到ioc--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.controller,</span></span></span><br><span class="line"><span class="string"><span class="tag">   com.wzb.exceptionhandler&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ol><blockquote><p>另外，如果响应的信息包含中文，则会出现中文乱码</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.http.converter.StringHttpMessageConverter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;supportedMediaTypes&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:message-converters</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:annotation-driven</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-拦截器使用"><a href="#2-拦截器使用" class="headerlink" title="2. 拦截器使用"></a>2. 拦截器使用</h3><h4 id="2-1-拦截器概念"><a href="#2-1-拦截器概念" class="headerlink" title="2.1 拦截器概念"></a>2.1 拦截器概念</h4><p>拦截器和过滤器解决问题</p><ul><li><p>生活中</p><p>为了提高乘车效率，在乘客进入站台前统一检票</p><p>![](Spring MVC控制层框架&#x2F;img008_Cu_s178zpF.png)</p></li><li><p>程序中</p><p>在程序中，使用拦截器在请求到达具体 handler 方法前，统一执行检测</p><p>![](Spring MVC控制层框架&#x2F;img009_ZoPtaL048I.png)</p></li></ul><p>拦截器 VS 过滤器：</p><ul><li>相似点<ul><li>拦截：必须先把请求拦住，才能执行后续操作</li><li>过滤：拦截器或过滤器存在的意义就是对请求进行统一处理</li><li>放行：对请求执行了必要操作后，放请求过去，让它访问原本想要访问的资源</li></ul></li><li>不同点<ul><li>工作平台不同<ul><li>过滤器工作在 Servlet 容器中</li><li>拦截器工作在 SpringMVC 的基础上</li></ul></li><li>拦截的范围<ul><li>过滤器：能够拦截到的最大范围是整个 Web 应用</li><li>拦截器：能够拦截到的最大范围是整个 SpringMVC 负责的请求</li></ul></li><li>IOC 容器支持<ul><li>过滤器：想得到 IOC 容器需要调用专门的工具方法，是间接的</li><li>拦截器：它自己就在 IOC 容器中，所以可以直接从 IOC 容器中装配组件，也就是可以直接得到 IOC 容器的支持</li></ul></li></ul></li></ul><p>选择：</p><p>功能需要如果用 SpringMVC 的拦截器能够实现，就不使用过滤器。</p><p>![](Spring MVC控制层框架&#x2F;image_h_FVVk92VB.png)</p><h4 id="2-2-拦截器使用"><a href="#2-2-拦截器使用" class="headerlink" title="2.2 拦截器使用"></a>2.2 拦截器使用</h4><ol><li><p>创建拦截器类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Process01Interceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在处理请求的目标 handler 方法前执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.preHandle&quot;</span>);</span><br><span class="line">         </span><br><span class="line">        <span class="comment">// 返回true：放行</span></span><br><span class="line">        <span class="comment">// 返回false：不放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 在目标 handler 方法之后，handler报错不执行!</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler + <span class="string">&quot;, modelAndView = &quot;</span> + modelAndView);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.postHandle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 渲染视图之后执行(最后),一定执行!</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;request = &quot;</span> + request + <span class="string">&quot;, response = &quot;</span> + response + <span class="string">&quot;, handler = &quot;</span> + handler + <span class="string">&quot;, ex = &quot;</span> + ex);</span><br><span class="line">        System.out.println(<span class="string">&quot;Process01Interceptor.afterCompletion&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>单个拦截器执行顺序:</p><ul><li>preHandle() 方法</li><li>目标 handler 方法</li><li>postHandle() 方法</li><li>渲染视图(返回json没有此步骤)</li><li>afterCompletion() 方法</li></ul></li><li><p>拦截器配置</p><p>springmvc.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 默认拦截器,拦截所有请求--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.interceptor.Process01Interceptor&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>配置详解</p><ol><li>默认拦截全部<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 拦截全部的请求地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.mvc.interceptor.Process03Interceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>精准配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 具体配置拦截器可以指定拦截的请求地址 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 精确匹配 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/common/request/one&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.mvc.interceptor.Process03Interceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /*匹配路径中的一层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/common/request/*&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.mvc.interceptor.Process04Interceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- /**匹配路径中的多层 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/common/request/**&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.mvc.interceptor.Process05Interceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>排除配置<br><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- /**匹配路径中的多层 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/common/request/**&quot;</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 使用 mvc:exclude-mapping 标签配置不拦截的地址 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mvc:exclude-mapping</span> <span class="attr">path</span>=<span class="string">&quot;/common/request/two/bbb&quot;</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.mvc.interceptor.Process05Interceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br></pre></td></tr></table></figure></p></li><li><p>多个拦截器执行顺序</p><ol><li>preHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置顺序调用各个 preHandle() 方法。</li><li>postHandle() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 postHandle() 方法。</li><li>afterCompletion() 方法：SpringMVC 会把所有拦截器收集到一起，然后按照配置相反的顺序调用各个 afterCompletion() 方法。</li></ol></li></ol><h4 id="2-3-拦截器作用位置图解"><a href="#2-3-拦截器作用位置图解" class="headerlink" title="2.3 拦截器作用位置图解"></a>2.3 拦截器作用位置图解</h4><p>![](Spring MVC控制层框架&#x2F;image_ykneI-kQzc.png)</p><h4 id="2-4-拦截器案例"><a href="#2-4-拦截器案例" class="headerlink" title="2.4 拦截器案例"></a>2.4 拦截器案例</h4><p>一个网站有 56个资源，其中一个为登陆资源，两个无须登录即可访问，另外三个需要登录后才能访问。如果不登录就访问那三个资源，需要拦截，并且提示登录后访问访问！</p><p>提示：登陆为模拟登陆，存储一个user可以到session即可！</p><p>访问资源的请求地址可参考：</p><ul><li>登陆资源：&#x2F;public&#x2F;resource&#x2F;login</li><li>公共资源1：&#x2F;public&#x2F;resource&#x2F;one</li><li>公共资源2：&#x2F;public&#x2F;resouce&#x2F;two</li><li>私密资源1：&#x2F;private&#x2F;resouce&#x2F;one</li><li>私密资源2：&#x2F;private&#x2F;resouce&#x2F;two</li><li>私密资源3：&#x2F;private&#x2F;resouce&#x2F;three</li></ul><p>案例实现：</p><ol><li>声明资源类<ol><li>PublicController<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.controller</span></span><br><span class="line"><span class="comment"> * description: 公有资源控制类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;public/resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PublicController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 模拟登录,将假用户数据存储到session中!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">login</span><span class="params">(HttpSession session)</span>&#123;</span><br><span class="line">        session.setAttribute(<span class="string">&quot;user&quot;</span>,<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login success!!&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;one&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">one</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;public one&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;two&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">two</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;public two&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>PrivateController<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;private/resource&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PrivateController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;one&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">one</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;private one&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@GetMapping(&quot;two&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">two</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;private two&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;three&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">three</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;private two&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li>声明拦截器类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.interceptor</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 登录保护拦截器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginProtectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 登录保护方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request current HTTP request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response current HTTP response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler chosen handler to execute, for type and/or instance evaluation</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">user</span> <span class="operator">=</span> request.getSession().getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>)&#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;text/html;charset=utf-8&quot;</span>);</span><br><span class="line">            <span class="comment">//没有登录</span></span><br><span class="line">            response.getWriter().print(<span class="string">&quot;请先登录,再访问! &lt;a href=&#x27;/public/resource/login&#x27;&gt;点击此处登录&lt;/a&gt;&quot;</span>);</span><br><span class="line">            <span class="comment">//拦截,不到达目标地址</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置拦截器类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置拦截器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">&quot;/private/**&quot;</span>/&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.interceptor.LoginProtectInterceptor&quot;</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="3-参数校验"><a href="#3-参数校验" class="headerlink" title="3. 参数校验"></a>3. 参数校验</h3><blockquote><p>在 Web 应用三层架构体系中，表述层负责接收浏览器提交的数据，业务逻辑层负责数据的处理。为了能够让业务逻辑层基于正确的数据进行处理，我们需要在表述层对数据进行检查，将错误的数据隔绝在业务逻辑层之外。</p></blockquote><ol><li><p><strong>校验概述</strong></p><p>JSR 303 是 Java 为 Bean 数据合法性校验提供的标准框架，它已经包含在 JavaEE 6.0 标准中。JSR 303 通过在 Bean 属性上标注类似于 @NotNull、@Max 等标准的注解指定校验规则，并通过标准的验证接口对Bean进行验证。</p><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Null</td><td>标注值必须为 null</td></tr><tr><td>@NotNull</td><td>标注值不可为 null</td></tr><tr><td>@AssertTrue</td><td>标注值必须为 true</td></tr><tr><td>@AssertFalse</td><td>标注值必须为 false</td></tr><tr><td>@Min(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@Max(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@DecimalMin(value)</td><td>标注值必须大于或等于 value</td></tr><tr><td>@DecimalMax(value)</td><td>标注值必须小于或等于 value</td></tr><tr><td>@Size(max,min)</td><td>标注值大小必须在 max 和 min 限定的范围内</td></tr><tr><td>@Digits(integer,fratction)</td><td>标注值值必须是一个数字，且必须在可接受的范围内</td></tr><tr><td>@Past</td><td>标注值只能用于日期型，且必须是过去的日期</td></tr><tr><td>@Future</td><td>标注值只能用于日期型，且必须是将来的日期</td></tr><tr><td>@Pattern(value)</td><td>标注值必须符合指定的正则表达式</td></tr><tr><td>JSR 303 只是一套标准，需要提供其实现才可以使用。Hibernate Validator 是 JSR 303 的一个参考实现，除支持所有标准的校验注解外，它还支持以下的扩展注解：</td><td></td></tr></tbody></table><table><thead><tr><th>注解</th><th>规则</th></tr></thead><tbody><tr><td>@Email</td><td>标注值必须是格式正确的 Email 地址</td></tr><tr><td>@Length</td><td>标注值字符串大小必须在指定的范围内</td></tr><tr><td>@NotEmpty</td><td>标注值字符串不能是空字符串</td></tr><tr><td>@Range</td><td>标注值必须在指定的范围内</td></tr></tbody></table><p>Spring 4.0 版本已经拥有自己独立的数据校验框架，同时支持 JSR 303 标准的校验框架。Spring 在进行数据绑定时，可同时调用校验框架完成数据校验工作。在SpringMVC 中，可直接通过注解驱动 mvc:annotation-driven 的方式进行数据校验。Spring 的 LocalValidatorFactoryBean 既实现了 Spring 的 Validator 接口，也实现了 JSR 303 的 Validator 接口。只要在Spring容器中定义了一个LocalValidatorFactoryBean，即可将其注入到需要数据校验的 Bean中。Spring本身并没有提供JSR 303的实现，所以必须将JSR 303的实现者的jar包放到类路径下。</p><p>配置 <strong>mvc:annotation-driven</strong> 后，SpringMVC 会默认装配好一个 LocalValidatorFactoryBean，通过在处理方法的入参上标注 @Validated 注解即可让 SpringMVC 在完成数据绑定后执行数据校验的工作。</p></li><li><p><strong>操作演示</strong></p><ul><li><p>导入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 校验注解 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.platform<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.jakartaee-web-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>9.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="comment">&lt;!-- 校验注解实现--&gt;</span>        </span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.hibernate.validator/hibernate-validator-annotation-processor --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator-annotation-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>应用校验注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Email;</span><br><span class="line"><span class="keyword">import</span> jakarta.validation.constraints.Min;</span><br><span class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.pojo</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="comment">//age   1 &lt;=  age &lt; = 150</span></span><br><span class="line">    <span class="meta">@Min(10)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//name 3 &lt;= name.length &lt;= 6</span></span><br><span class="line">    <span class="meta">@Length(min = 3,max = 10)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//email 邮箱格式</span></span><br><span class="line">    <span class="meta">@Email</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmail</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> email;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEmail</span><span class="params">(String email)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.email = email;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>handler标记和绑定错误收集</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Validated</span> 代表应用校验注解! 必须添加!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;save&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">save</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user,</span></span><br><span class="line"><span class="params">                       //在实体类参数和 BindingResult 之间不能有任何其他参数, BindingResult可以接受错误信息,避免信息抛出!</span></span><br><span class="line"><span class="params">                       BindingResult result)</span>&#123;</span><br><span class="line">       <span class="comment">//判断是否有信息绑定错误! 有可以自行处理!</span></span><br><span class="line">        <span class="keyword">if</span> (result.hasErrors())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;错误&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">errorMsg</span> <span class="operator">=</span> result.getFieldError().toString();</span><br><span class="line">            <span class="keyword">return</span> errorMsg;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//没有,正常处理业务即可</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正常&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>测试效果</p><p>![](Spring MVC控制层框架&#x2F;image_ciuI5tAmH6.png)</p></li></ul></li><li><p><strong>易混总结</strong></p><p>@NotNull、@NotEmpty、@NotBlank 都是用于在数据校验中检查字段值是否为空的注解，但是它们的用法和校验规则有所不同。</p><ol><li><p>@NotNull  (包装类型不为null)</p><p>@NotNull 注解是 JSR 303 规范中定义的注解，当被标注的字段值为 null 时，会认为校验失败而抛出异常。该注解不能用于字符串类型的校验，若要对字符串进行校验，应该使用 @NotBlank 或 @NotEmpty 注解。</p></li><li><p>@NotEmpty (集合类型长度大于0)</p><p>@NotEmpty 注解同样是 JSR 303 规范中定义的注解，对于 CharSequence、Collection、Map 或者数组对象类型的属性进行校验，校验时会检查该属性是否为 Null 或者 size()&#x3D;&#x3D;0，如果是的话就会校验失败。但是对于其他类型的属性，该注解无效。需要注意的是只校验空格前后的字符串，如果该字符串中间只有空格，不会被认为是空字符串，校验不会失败。</p></li><li><p>@NotBlank （字符串，不为null，切不为”  “字符串）</p><p>@NotBlank 注解是 Hibernate Validator 附加的注解，对于字符串类型的属性进行校验，校验时会检查该属性是否为 Null 或 “” 或者只包含空格，如果是的话就会校验失败。需要注意的是，@NotBlank 注解只能用于字符串类型的校验。<br>总之，这三种注解都是用于校验字段值是否为空的注解，但是其校验规则和用法有所不同。在进行数据校验时，需要根据具体情况选择合适的注解进行校验。</p></li></ol></li></ol><h3 id="4-文件上传和下载-x20"><a href="#4-文件上传和下载-x20" class="headerlink" title="4.文件上传和下载&#x20;"></a>4.文件上传和下载&#x20;</h3><h4 id="4-1-文件上传"><a href="#4-1-文件上传" class="headerlink" title="4.1 文件上传"></a>4.1 文件上传</h4><ol><li><p><strong>文件上传表单页面</strong></p><p>位置：index.html</p><ul><li>第一点：请求方式必须是 POST</li><li>第二点：请求体的编码方式必须是 multipart&#x2F;form-data（通过 form 标签的 enctype 属性设置）</li><li>第三点：使用 input 标签、type 属性设置为 file 来生成文件上传框</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/save/picture&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">      昵称：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;nickName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;龙猫&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      头像：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;headPicture&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      背景：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;backgroundPicture&quot;</span> /&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>保存<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p><strong>springmvc环境要求</strong></p><p>pom.xml添加依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/commons-fileupload/commons-fileupload --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>配置文件上传处理器(springmvc配置)</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 文件上传处理器,可处理 multipart/* 请求并将其转换为 MultipartFile 对象--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;multipartResolver&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">class</span>=<span class="string">&quot;org.springframework.web.multipart.support.StandardServletMultipartResolver&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>CommonsMultipartResolver的bean的id，必须是：multipartResolver<br>如果不是这个值，会在上传文件时报错<br>在 <code>web.xml</code> 文件中添加 Multipart 配置</p></blockquote><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>yourAppServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义文件上传时所需的最大值，单位为字节 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-file-size</span>&gt;</span>10485760<span class="tag">&lt;/<span class="name">max-file-size</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义单个上传文件的最大值，单位为字节 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">max-request-size</span>&gt;</span>20971520<span class="tag">&lt;/<span class="name">max-request-size</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 定义内存中存储文件的最大值，超过此大小的文件会写入到硬盘中 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">file-size-threshold</span>&gt;</span>5242880<span class="tag">&lt;/<span class="name">file-size-threshold</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">multipart-config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>低版本web.xml约束文件，会爆红，不管担心，继续启动即可！</p><blockquote><p>历史：Spring MVC 6之前，通常使用的是 <code>CommonsMultipartResolver</code> 来解析文件上传请求。但是在 Spring MVC 6中，此类已被移除，Spring 官方推荐使用 <code>StandardServletMultipartResolver</code> 或 <code>MockMultipartResolver</code> 来替代。</p></blockquote></li><li><p><strong>handler方法接收数据</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 上传的文件使用 MultipartFile 类型接收其相关数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nickName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> picture</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> backgroundPicture</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@throws</span> IOException</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span> (<span class="string">&quot;picture&quot;</span>)</span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">upload</span><span class="params">(String nickName, <span class="meta">@RequestPart(&quot;headPicture&quot;)</span> MultipartFile picture, <span class="meta">@RequestPart(&quot;backgroundPicture&quot;)</span>MultipartFile backgroundPicture)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    System.out.println(nickName);</span><br><span class="line">     <span class="type">String</span> <span class="variable">inputName</span> <span class="operator">=</span> picture.getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;文件上传表单项的 name 属性值：&quot;</span> + inputName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取这个数据通常都是为了获取文件本身的扩展名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">originalFilename</span> <span class="operator">=</span> picture.getOriginalFilename();</span><br><span class="line">    System.out.println(<span class="string">&quot;文件在用户本地原始的文件名：&quot;</span> + originalFilename);</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">contentType</span> <span class="operator">=</span> picture.getContentType();</span><br><span class="line">    System.out.println(<span class="string">&quot;文件的内容类型：&quot;</span> + contentType);</span><br><span class="line"></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">empty</span> <span class="operator">=</span> picture.isEmpty();</span><br><span class="line">    System.out.println(<span class="string">&quot;文件是否为空：&quot;</span> + empty);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> picture.getSize();</span><br><span class="line">    System.out.println(<span class="string">&quot;文件大小：&quot;</span> + size);</span><br><span class="line"></span><br><span class="line">    <span class="type">byte</span>[] bytes = picture.getBytes();</span><br><span class="line">    System.out.println(<span class="string">&quot;文件二进制数据的字节数组：&quot;</span> + Arrays.asList(bytes));</span><br><span class="line"></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> picture.getInputStream();</span><br><span class="line">    System.out.println(<span class="string">&quot;读取文件数据的输入流对象：&quot;</span> + inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="type">Resource</span> <span class="variable">resource</span> <span class="operator">=</span> picture.getResource();</span><br><span class="line">    System.out.println(<span class="string">&quot;代表当前 MultiPartFile 对象的资源对象&quot;</span> + resource);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;home&quot;</span>;</span><br><span class="line">&#125;   </span><br></pre></td></tr></table></figure></li><li><p><strong>MultipartFile接口</strong></p><p>![](Spring MVC控制层框架&#x2F;img014_ciD7FfevEJ.png)</p></li><li><p><strong>文件转存</strong></p><ol><li><p>底层机制</p><p>![](Spring MVC控制层框架&#x2F;img015_U98i7AFmF-.png)</p></li><li><p>本地转存</p><p>![](Spring MVC控制层框架&#x2F;img016_NDUl5QE_QR.png)</p><p>转存代码演示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">……</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 1、准备好保存文件的目标目录</span></span><br><span class="line"><span class="comment">// ①File 对象要求目标路径是一个物理路径（在硬盘空间里能够直接找到文件的路径）</span></span><br><span class="line"><span class="comment">// ②项目在不同系统平台上运行，要求能够自动兼容、适配不同系统平台的路径格式</span></span><br><span class="line"><span class="comment">//      例如：Window系统平台的路径是 D:/aaa/bbb 格式</span></span><br><span class="line"><span class="comment">//      例如：Linux系统平台的路径是 /ttt/uuu/vvv 格式</span></span><br><span class="line"><span class="comment">//      所以我们需要根据『不会变的虚拟路径』作为基准动态获取『跨平台的物理路径』</span></span><br><span class="line"><span class="comment">// ③虚拟路径：浏览器通过 Tomcat 服务器访问 Web 应用中的资源时使用的路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">destFileFolderVirtualPath</span> <span class="operator">=</span> <span class="string">&quot;/head-picture&quot;</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// ④调用 ServletContext 对象的方法将虚拟路径转换为真实物理路径</span></span><br><span class="line"><span class="type">String</span> <span class="variable">destFileFolderRealPath</span> <span class="operator">=</span> servletContext.getRealPath(destFileFolderVirtualPath);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 2、生成保存文件的文件名</span></span><br><span class="line"><span class="comment">// ①为了避免同名的文件覆盖已有文件，不使用 originalFilename，所以需要我们生成文件名</span></span><br><span class="line"><span class="comment">// ②我们生成文件名包含两部分：文件名本身和扩展名</span></span><br><span class="line"><span class="comment">// ③声明变量生成文件名本身</span></span><br><span class="line"><span class="type">String</span> <span class="variable">generatedFileName</span> <span class="operator">=</span> UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// ④根据 originalFilename 获取文件的扩展名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">fileExtname</span> <span class="operator">=</span> originalFilename.substring(originalFilename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line"> </span><br><span class="line"><span class="comment">// ⑤拼装起来就是我们生成的整体文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">destFileName</span> <span class="operator">=</span> generatedFileName + <span class="string">&quot;&quot;</span> + fileExtname;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 3、拼接保存文件的路径，由两部分组成</span></span><br><span class="line"><span class="comment">//      第一部分：文件所在目录</span></span><br><span class="line"><span class="comment">//      第二部分：文件名</span></span><br><span class="line"><span class="type">String</span> <span class="variable">destFilePath</span> <span class="operator">=</span> destFileFolderRealPath + <span class="string">&quot;/&quot;</span> + destFileName;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 4、创建 File 对象，对应文件具体保存的位置</span></span><br><span class="line"><span class="type">File</span> <span class="variable">destFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(destFilePath);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 5、执行转存</span></span><br><span class="line">picture.transferTo(destFile);</span><br><span class="line"> </span><br><span class="line">……</span><br></pre></td></tr></table></figure><p>缺陷</p><ul><li>Web 应用重新部署时通常都会清理旧的构建结果，此时用户以前上传的文件会被删除，导致数据丢失。</li><li>项目运行很长时间后，会导致上传的文件积累非常多，体积非常大，从而拖慢 Tomcat 运行速度。</li><li>当服务器以集群模式运行时，文件上传到集群中的某一个实例，其他实例中没有这个文件，就会造成数据不一致。</li><li>不支持动态扩容，一旦系统增加了新的硬盘或新的服务器实例，那么上传、下载时使用的路径都需要跟着变化，导致 Java 代码需要重新编写、重新编译，进而导致整个项目重新部署。<br>![](Spring MVC控制层框架&#x2F;img018_Fd9zEfZjJZ.png)</li></ul></li><li><p>文件服务器转存（推荐）</p><p>![](Spring MVC控制层框架&#x2F;img019_0pV4kR24fK.png)</p><p>好处</p><ul><li>不受 Web 应用重新部署影响</li><li>在应用服务器集群环境下不会导致数据不一致</li><li>针对文件读写进行专门的优化，性能有保障</li><li>能够实现动态扩容<br>![](Spring MVC控制层框架&#x2F;img020_TUZbWX5oA6.png)<br><strong>文件服务器类型</strong></li><li>第三方平台：<ul><li>阿里的 OSS 对象存储服务</li><li>七牛云</li></ul></li><li>自己搭建服务器：FastDFS 等</li></ul></li><li><p>上传到其他模块</p><p>这种情况肯定出现在分布式架构中，常规业务功能不会这么做，采用这个方案的一定是特殊情况，这种情况极其少见。</p><p>![](Spring MVC控制层框架&#x2F;img021_GYdAmeWInU.png)</p><p>在 MultipartFile 接口中有一个对应的方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Return a Resource representation of this MultipartFile. This can be used</span></span><br><span class="line"><span class="comment"> * as input to the &#123;<span class="doctag">@code</span> RestTemplate&#125; or the &#123;<span class="doctag">@code</span> WebClient&#125; to expose</span></span><br><span class="line"><span class="comment"> * content length and the filename along with the InputStream.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> this MultipartFile adapted to the Resource contract</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 5.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">default</span> Resource <span class="title function_">getResource</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MultipartFileResource</span>(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注释中说：这个 Resource 对象代表当前 MultipartFile 对象，输入给 RestTemplate 或 WebClient。而 RestTemplate 或 WebClient 就是用来在 Java 程序中向服务器端发出请求的组件。</p></li></ol></li></ol><h4 id="4-2-文件下载"><a href="#4-2-文件下载" class="headerlink" title="4.2 文件下载"></a>4.2 文件下载</h4><p>在 Spring MVC 中，<code>ResponseEntity</code> 是用于表示 HTTP 响应的一个类，它既能设置响应体的内容，也能设置响应头相关的信息。</p><p><code>ResponseEntity</code> 可以封装一个 HTTP 响应，包括响应体、响应头和响应状态码等属性，并将其发送回客户端。它提供了一种灵活的方式来表示 HTTP 响应，可以用于处理 RESTful API、文件下载、异常处理等应用场景。</p><p>演示json数据返回：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/users/&#123;age&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;User&gt; <span class="title function_">getUser</span><span class="params">(<span class="meta">@PathVariable(&quot;age&quot;)</span> <span class="type">int</span> age)</span> &#123;</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setAge(age);</span><br><span class="line">    user.setEmail(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    user.setName(<span class="string">&quot;二狗子&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ResponseEntity.ok(user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>演示文件下载代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ServletContext servletContext;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/download/file&quot;)</span></span><br><span class="line"><span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; downloadFile() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.获取要下载的文件的输入流对象</span></span><br><span class="line">    <span class="comment">// 这里指定的路径以 Web 应用根目录为基准</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> servletContext.getResourceAsStream(<span class="string">&quot;/images/mi.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 2.将要下载的文件读取到字节数组中</span></span><br><span class="line">        <span class="comment">// ①获取目标文件的长度</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> inputStream.available();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ②根据目标文件长度创建字节数组</span></span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[len];</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ③将目标文件读取到字节数组中</span></span><br><span class="line">        inputStream.read(buffer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3.封装响应消息头</span></span><br><span class="line">        <span class="comment">// ①创建MultiValueMap接口类型的对象，实现类是HttpHeaders</span></span><br><span class="line">        <span class="type">MultiValueMap</span> <span class="variable">responseHeaderMap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ②存入下载文件所需要的响应消息头</span></span><br><span class="line">        responseHeaderMap.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment; filename=mi.jpg&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// ③创建ResponseEntity对象</span></span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;&gt;(buffer, responseHeaderMap, HttpStatus.OK);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.返回responseEntity对象</span></span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (inputStream != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                inputStream.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="七、SpringMVC底层原理"><a href="#七、SpringMVC底层原理" class="headerlink" title="七、SpringMVC底层原理"></a>七、SpringMVC底层原理</h2><h3 id="1-启动配置流程"><a href="#1-启动配置流程" class="headerlink" title="1. 启动配置流程"></a>1. 启动配置流程</h3><h4 id="1-1-Servlet-生命周期回顾"><a href="#1-1-Servlet-生命周期回顾" class="headerlink" title="1.1 Servlet 生命周期回顾"></a>1.1 Servlet 生命周期回顾</h4><p>![](Spring MVC控制层框架&#x2F;img002_4CPXs6G8ar.png)</p><table><thead><tr><th>生命周期环节</th><th>调用的方法</th><th>时机</th><th>次数</th></tr></thead><tbody><tr><td>创建对象</td><td>无参构造器</td><td>默认：第一次请求&#xA;修改：Web应用启动时</td><td>一次</td></tr><tr><td>初始化</td><td>init(ServletConfig servletConfig)</td><td>创建对象后</td><td>一次</td></tr><tr><td>处理请求</td><td>service(ServletRequest servletRequest, ServletResponse servletResponse)</td><td>接收到请求后</td><td>多次</td></tr><tr><td>清理操作</td><td>destroy()</td><td>Web应用卸载之前</td><td>一次</td></tr></tbody></table><h4 id="1-2-初始化操作调用路线图"><a href="#1-2-初始化操作调用路线图" class="headerlink" title="1.2 初始化操作调用路线图"></a>1.2 初始化操作调用路线图</h4><p>类和接口之间的关系:</p><p>![](Spring MVC控制层框架&#x2F;img116_feXAAVNpoZ.png)</p><p>调用线路图:</p><p>调用线路图所示是方法调用的顺序，但是实际运行的时候本质上都是调用 DispatcherServlet 对象的方法。包括这里涉及到的接口的方法，也不是去调用接口中的『抽象方法』。毕竟抽象方法是没法执行的。抽象方法一定是在某个实现类中有具体实现才能被调用。</p><p>而对于最终的实现类：DispatcherServlet 来说，所有父类的方法最后也都是在 DispatcherServlet 对象中被调用的。</p><p>![](Spring MVC控制层框架&#x2F;img005_WfQZAJl_k4.png)</p><h4 id="1-3-SpringMVC-IoC-容器创建"><a href="#1-3-SpringMVC-IoC-容器创建" class="headerlink" title="1.3 SpringMVC IoC 容器创建"></a>1.3 SpringMVC IoC 容器创建</h4><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createWebApplicationContext</span><span class="params">(<span class="meta">@Nullable</span> ApplicationContext parent)</span> &#123;</span><br><span class="line">  Class&lt;?&gt; contextClass = getContextClass();</span><br><span class="line">  <span class="keyword">if</span> (!ConfigurableWebApplicationContext.class.isAssignableFrom(contextClass)) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ApplicationContextException</span>(</span><br><span class="line">        <span class="string">&quot;Fatal initialization error in servlet with name &#x27;&quot;</span> + getServletName() +</span><br><span class="line">        <span class="string">&quot;&#x27;: custom WebApplicationContext class [&quot;</span> + contextClass.getName() +</span><br><span class="line">        <span class="string">&quot;] is not of type ConfigurableWebApplicationContext&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过反射创建 IOC 容器对象</span></span><br><span class="line">  <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span></span><br><span class="line">      (ConfigurableWebApplicationContext) BeanUtils.instantiateClass(contextClass);</span><br><span class="line"></span><br><span class="line">  wac.setEnvironment(getEnvironment());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 设置父容器</span></span><br><span class="line">  wac.setParent(parent);</span><br><span class="line">  <span class="type">String</span> <span class="variable">configLocation</span> <span class="operator">=</span> getContextConfigLocation();</span><br><span class="line">  <span class="keyword">if</span> (configLocation != <span class="literal">null</span>) &#123;</span><br><span class="line">    wac.setConfigLocation(configLocation);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 配置并且刷新：在这个过程中就会去读XML配置文件并根据配置文件创建bean、加载各种组件</span></span><br><span class="line">  configureAndRefreshWebApplicationContext(wac);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="1-4-将-SpringMVC-IoC容器对象存入应用域"><a href="#1-4-将-SpringMVC-IoC容器对象存入应用域" class="headerlink" title="1.4 将 SpringMVC IoC容器对象存入应用域"></a>1.4 将 SpringMVC IoC容器对象存入应用域</h4><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">initWebApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">WebApplicationContext</span> <span class="variable">rootContext</span> <span class="operator">=</span></span><br><span class="line">      WebApplicationContextUtils.getWebApplicationContext(getServletContext());</span><br><span class="line">  <span class="type">WebApplicationContext</span> <span class="variable">wac</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.webApplicationContext != <span class="literal">null</span>) &#123;</span><br><span class="line">    wac = <span class="built_in">this</span>.webApplicationContext;</span><br><span class="line">    <span class="keyword">if</span> (wac <span class="keyword">instanceof</span> ConfigurableWebApplicationContext) &#123;</span><br><span class="line">      <span class="type">ConfigurableWebApplicationContext</span> <span class="variable">cwac</span> <span class="operator">=</span> (ConfigurableWebApplicationContext) wac;</span><br><span class="line">      <span class="keyword">if</span> (!cwac.isActive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cwac.getParent() == <span class="literal">null</span>) &#123;</span><br><span class="line">          <span class="comment">//springmvc容器认另一个容器（spring）作为父容器</span></span><br><span class="line">          cwac.setParent(rootContext);</span><br><span class="line">        &#125;</span><br><span class="line">        configureAndRefreshWebApplicationContext(cwac);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">    wac = findWebApplicationContext();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (wac == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建 IOC 容器</span></span><br><span class="line">    wac = createWebApplicationContext(rootContext);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">this</span>.refreshEventReceived) &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>.onRefreshMonitor) &#123;</span><br><span class="line">      onRefresh(wac);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">this</span>.publishContext) &#123;</span><br><span class="line">    <span class="comment">// 获取存入应用域时专用的属性名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">attrName</span> <span class="operator">=</span> getServletContextAttributeName();</span><br><span class="line">        <span class="comment">// 存入</span></span><br><span class="line">    getServletContext().setAttribute(attrName, wac);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> wac;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>看到这一点的意义：SpringMVC 有一个工具方法，可以从应用域获取 IOC 容器对象的引用。</p><p>工具类：org.springframework.web.context.support.<strong>WebApplicationContextUtils</strong></p><p>工具方法：<strong>getWebApplicationContext</strong>()</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Nullable</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> WebApplicationContext <span class="title function_">getWebApplicationContext</span><span class="params">(ServletContext sc)</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> getWebApplicationContext(sc, WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>作用：将来假如我们自己开发时，在IOC容器之外需要从IOC容器中获取bean，那么就可以通过这个工具方法获取IOC容器对象的引用。IOC容器之外的场景会有很多，比如在一个我们自己创建的Filter中。</p><h4 id="1-5-请求映射初始化"><a href="#1-5-请求映射初始化" class="headerlink" title="1.5 请求映射初始化"></a>1.5 请求映射初始化</h4><p>FrameworkServlet.createWebApplicationContext()→configureAndRefreshWebApplicationContext()→wac.refresh()→触发刷新事件→org.springframework.web.servlet.DispatcherServlet.initStrategies()→org.springframework.web.servlet.DispatcherServlet.initHandlerMappings()</p><p>![](Spring MVC控制层框架&#x2F;img006_vnMiRnTzrm.png)</p><h4 id="1-6-小结"><a href="#1-6-小结" class="headerlink" title="1.6 小结"></a>1.6 小结</h4><p>整个启动过程我们关心如下要点：</p><ul><li>DispatcherServlet 本质上是一个 Servlet，所以天然的遵循 Servlet 的生命周期。所以宏观上是 Servlet 生命周期来进行调度。</li><li>DispatcherServlet 的父类是 FrameworkServlet。<ul><li>FrameworkServlet 负责框架本身相关的创建和初始化。</li><li>DispatcherServlet 负责请求处理相关的初始化。</li></ul></li><li>FrameworkServlet 创建 IOC 容器对象之后会存入应用域。</li><li>FrameworkServlet 完成初始化会调用 IOC 容器的刷新方法。</li><li>刷新方法完成触发刷新事件，在刷新事件的响应函数中，调用 DispatcherServlet 的初始化方法。</li><li>在 DispatcherServlet 的初始化方法中初始化了请求映射等。</li></ul><h3 id="2-请求处理流程原理"><a href="#2-请求处理流程原理" class="headerlink" title="2. 请求处理流程原理"></a>2. 请求处理流程原理</h3><h4 id="2-1-总体阶段"><a href="#2-1-总体阶段" class="headerlink" title="2.1 总体阶段"></a>2.1 总体阶段</h4><ol><li><p>流程描述</p><ul><li>目标 handler 方法执行<strong>前</strong><ul><li>建立调用链，确定整个执行流程</li><li>拦截器的 preHandle() 方法</li><li>注入请求参数</li><li>准备目标 handler 方法所需所有参数</li></ul></li><li><strong>调用</strong>目标 handler 方法</li><li>目标 handler 方法执行<strong>后</strong><ul><li>拦截器的 postHandle() 方法</li><li>渲染视图</li><li>拦截器的 afterCompletion() 方法</li></ul></li></ul></li><li><p>核心代码</p><p>整个请求处理过程都是doDispatch()方法在宏观上协调和调度，把握了这个方法就理解了 SpringMVC 总体上是如何处理请求的。</p><p>所在类：<strong>DispatcherServlet</strong></p><p>所在方法：doDispatch()</p><p>核心方法中的核心代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Actually invoke the handler.</span></span><br><span class="line">mv = ha.handle(processedRequest, response, mappedHandler.getHandler());</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-2-调用前阶段"><a href="#2-2-调用前阶段" class="headerlink" title="2.2 调用前阶段"></a>2.2 调用前阶段</h4><ol><li><p>建立调用链</p><p>全类名：org.springframework.web.servlet.HandlerExecutionChain</p><p>![](Spring MVC控制层框架&#x2F;img003_2YuoobIwMF.png)</p><p>拦截器索引默认是 -1，说明开始的时候，它指向第一个拦截器前面的位置。每执行一个拦截器，就把索引向前移动一个位置。所以这个索引每次都是指向当前拦截器。所以它相当于拦截器的<strong>指针</strong>。</p></li><li><p>对应操作</p><p>所在类：org.springframework.web.servlet.handler.AbstractHandlerMapping</p><p>所在方法：getHandlerExecutionChain()</p><p>关键操作：</p><ul><li><p>把目标handler对象存入</p></li><li><p>把当前请求要经过的拦截器存入</p><p>![](Spring MVC控制层框架&#x2F;img004_ydSfnkOq6R.png)</p><p>结论：调用链是由拦截器和目标 handler 对象组成的。</p></li></ul></li><li><p>调用拦截器preHandle()</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p>![](Spring MVC控制层框架&#x2F;img007_A_9AZHyoTN.png)</p><p>具体调用细节：正序调用</p><p>所在类：org.springframework.web.servlet.HandlerExecutionChain</p><p>所在方法：applyPreHandle</p><p>![](Spring MVC控制层框架&#x2F;img008_htFE6CSadg.png)</p><p>从这部分代码我们也能看到，为什么拦截器中的 preHandle() 方法通过返回布尔值能够控制是否放行。</p><ul><li>每一个拦截器的 preHandle() 方法都返回 true：applyPreHandle() 方法返回 true，被取反就不执行 if 分支，继续执行后续操作，这就是放行。</li><li>任何一个拦截器的 preHandle() 方法返回 false：applyPreHandle() 方法返回 false，被取反执行 if 分支，return，导致 doDispatch() 方法结束，不执行后续操作，就是不放行。</li></ul></li><li><p>注入请求参数</p><p>相关组件：</p><p>接口：org.springframework.web.servlet.HandlerAdapter</p><p>作用：字面含义是适配器的意思，具体功能有三个</p><ul><li>将请求参数绑定到实体类对象中</li><li>给目标 handler 方法准备所需的其他参数，例如：<ul><li>Model、ModelMap、Map……</li><li>原生 Servlet API：request、response、session……</li><li>BindingResult</li><li>@RequestParam 注解标记的零散请求参数</li><li>@PathVariable 注解标记的路径变量</li></ul></li><li>调用目标 handler 方法<br>所以 HandlerAdapter 这个适配器是将底层的 HTTP 报文、原生的 request 对象进行解析和封装，『适配』到我们定义的 handler 方法上。<br>创建并获取这个组件</li></ul><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p>![](Spring MVC控制层框架&#x2F;img009_LAQfA_01-A.png)</p><p>具体操作：调用目标 handler 方法</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p>![](Spring MVC控制层框架&#x2F;img010_O3sCPwLR6_.png)</p><p>具体操作：注入请求参数</p><p>![](Spring MVC控制层框架&#x2F;img011_nwOb9QEP_8.png)</p><p>通过反射给对应属性注入请求参数应该是下面的过程：</p><ul><li>获取请求参数名称</li><li>将请求参数名称首字母设定为大写</li><li>在首字母大写后的名称前附加 set，得到目标方法名</li><li>通过反射调用 setXxx() 方法</li></ul></li></ol><h4 id="2-3调用后阶段"><a href="#2-3调用后阶段" class="headerlink" title="2.3调用后阶段"></a>2.3调用后阶段</h4><ol><li><p>调用拦截器的 postHandle() 方法</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p>![](Spring MVC控制层框架&#x2F;img014_wAV36G4Yvi.png)</p><p>调用细节：从拦截器集合长度 - 1 开始循环，循环到 0 为止。所以是<strong>倒序</strong>执行，从而让各个拦截器形成<strong>嵌套执行</strong>的效果，和AOP有异曲同工之妙。</p><p>![](Spring MVC控制层框架&#x2F;img015_YPEZAdac0w.png)</p></li><li><p>渲染视图</p><p>所有后续操作的入口:</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：doDispatch()</p><p>![](Spring MVC控制层框架&#x2F;img016_Ma3QoHPrlV.png)</p><p>后续细节1：处理异常:</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：processDispatchResult()</p><p>![](Spring MVC控制层框架&#x2F;img017_0mgDXuRD9X.png)</p><p>后续细节2：渲染视图:</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：processDispatchResult()</p><p>![](Spring MVC控制层框架&#x2F;img018_QKs8RvbiNR.png)</p><p>补充细节：模型数据存入请求域的具体位置</p><p>所在类：org.thymeleaf.context.WebEngineContext.RequestAttributesVariablesMap</p><p>所在方法：setVariable()</p><p>![](Spring MVC控制层框架&#x2F;img020_6YXuHbo-6o.png)</p></li><li><p>调用拦截器的 afterCompletion() 方法</p><p>所在类：org.springframework.web.servlet.DispatcherServlet</p><p>所在方法：processDispatchResult()</p><p>![](Spring MVC控制层框架&#x2F;img019_jnu2SgB4zG.png)</p><p>调用细节：从拦截器索引开始循环，直到循环变量 i 被减到 0 为止。这样的效果是前面执行拦截器到哪里，就从哪里倒回去执行；前面没有执行的拦截器，现在也不执行。</p><p>![](Spring MVC控制层框架&#x2F;img021_N1iTvQ8D3e.png)</p></li></ol><h4 id="2-4-所有断点总结"><a href="#2-4-所有断点总结" class="headerlink" title="2.4 所有断点总结"></a>2.4 所有断点总结</h4><p>断点位置基准：SpringMVC 版本采用 6.0.6 且源码已经下载，包含注释。</p><table><thead><tr><th>所在类</th><th>所在方法</th><th>断点行数</th><th>作用</th></tr></thead><tbody><tr><td>DispatcherServlet</td><td>doDispatch()</td><td>1057</td><td>创建调用链对象</td></tr><tr><td>DispatcherServlet</td><td>doDispatch()</td><td>1064</td><td>创建 HandlerAdapter 对象</td></tr><tr><td>DispatcherServlet</td><td>doDispatch()</td><td>1076</td><td>调用拦截器 preHandle()方法</td></tr><tr><td>DispatcherServlet</td><td>doDispatch()</td><td>1081</td><td>执行目标 handler 方法</td></tr><tr><td>DispatcherServlet</td><td>doDispatch()</td><td>1088</td><td>调用拦截器 postHandle()方法</td></tr><tr><td>DispatcherServlet</td><td>doDispatch()</td><td>1098</td><td>执行所有后续操作</td></tr><tr><td>DispatcherServlet</td><td>processDispatchResult()</td><td>1145</td><td>处理异常</td></tr><tr><td>DispatcherServlet</td><td>processDispatchResult()</td><td>1159</td><td>渲染视图</td></tr><tr><td>DispatcherServlet</td><td>processDispatchResult()</td><td>1177</td><td>调用拦截器 afterCompletion()方法</td></tr></tbody></table><h3 id="3-ContextLoaderListener"><a href="#3-ContextLoaderListener" class="headerlink" title="3. ContextLoaderListener"></a>3. ContextLoaderListener</h3><h4 id="3-1-配置分离相关问题"><a href="#3-1-配置分离相关问题" class="headerlink" title="3.1 配置分离相关问题"></a>3.1 配置分离相关问题</h4><p>目前情况：DispatcherServlet 加载 spring-mvc.xml，此时整个 Web 应用中只创建一个 IoC 容器。将来整合Mybatis、配置声明式事务，全部在 spring-mvc.xml 配置文件中配置也是可以的。可是这样会导致配置文件太长，不容易维护。</p><p>所以想到把配置文件分开：</p><ul><li>SpringMVC相关：spring-mvc.xml 配置文件</li><li>Spring和Mybatis相关：spring-persist.xml 配置文件 (命名随意，分离思维)</li></ul><p>配置文件分开之后，可以让 DispatcherServlet 加载多个配置文件。例如：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-*.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果希望这两个配置文件使用不同的机制来加载：</p><ul><li>DispatcherServlet 加载 spring-mvc.xml 配置文件：它们和处理浏览器请求相关</li><li>ContextLoaderListener 加载 spring-persist.xml 配置文件：不需要处理浏览器请求，需要配置持久化层相关功能</li></ul><p>此时会带来一个新的问题：在一个 Web 应用中就会出现两个 IOC 容器</p><ul><li>DispatcherServlet 创建一个 IOC 容器</li><li>ContextLoaderListener 创建一个 IOC 容器</li></ul><p>注意：本节我们探讨的这个技术方案并不是『必须』这样做，而仅仅是『可以』这样做。</p><h4 id="3-2-配置ContextLoaderListener"><a href="#3-2-配置ContextLoaderListener" class="headerlink" title="3.2 配置ContextLoaderListener"></a>3.2 配置ContextLoaderListener</h4><ol><li><p>创建 spring-persist.xml</p><p>![](Spring MVC控制层框架&#x2F;img022_lw63yzM-MW.png)</p></li><li><p>配置 ContextLoaderListener</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 通过全局初始化参数指定 Spring 配置文件的位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-persist.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定全类名，配置监听器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>ContextLoaderListener</p><p>![](Spring MVC控制层框架&#x2F;img023_gMZk-O9CJH.png)</p><table><thead><tr><th>方法名</th><th>执行时机</th><th>作用</th></tr></thead><tbody><tr><td>contextInitialized()</td><td>Web 应用启动时执行</td><td>创建并初始化 IOC 容器</td></tr><tr><td>contextDestroyed()</td><td>Web 应用卸载时执行</td><td>关闭 IOC 容器</td></tr></tbody></table></li><li><p>ContextLoader</p><p>ContextLoader 类是 ContextLoaderListener 类的父类。</p><p>指定配置文件位置的参数名:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Name of servlet context parameter (i.e., &#123;<span class="doctag">@value</span>&#125;) that can specify the</span></span><br><span class="line"><span class="comment"> * config location for the root context, falling back to the implementation&#x27;s</span></span><br><span class="line"><span class="comment"> * default otherwise.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> org.springframework.web.context.support.XmlWebApplicationContext#DEFAULT_CONFIG_LOCATION</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CONFIG_LOCATION_PARAM</span> <span class="operator">=</span> <span class="string">&quot;contextConfigLocation&quot;</span>;</span><br></pre></td></tr></table></figure><p>初始化 IOC 容器</p><p>方法名：initWebApplicationContext()</p><p>创建 IOC 容器</p><p>方法名：createWebApplicationContext()</p></li></ol><h4 id="3-3-探讨两个IoC容器之间关系"><a href="#3-3-探讨两个IoC容器之间关系" class="headerlink" title="3.3 探讨两个IoC容器之间关系"></a>3.3 探讨两个IoC容器之间关系</h4><p>![](Spring MVC控制层框架&#x2F;image_m_4ZcyUS8E.png)</p><p>打印两个 IOC 容器对象的 toString() 方法：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Object</span> <span class="variable">springIOC</span> <span class="operator">=</span> servletContext.getAttribute(<span class="string">&quot;org.springframework.web.context.WebApplicationContext.ROOT&quot;</span>);</span><br><span class="line">log.debug(springIOC.toString());</span><br><span class="line"></span><br><span class="line"><span class="type">Object</span> <span class="variable">springMVCIOC</span> <span class="operator">=</span> servletContext.getAttribute(<span class="string">&quot;org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcherServlet&quot;</span>);</span><br><span class="line">log.debug(springMVCIOC.toString());</span><br></pre></td></tr></table></figure><p>打印效果是：</p><blockquote><p>**Root **WebApplicationContext, started on Thu Jun 17 14:49:17 CST 2021<br>……<br>WebApplicationContext for namespace ‘dispatcherServlet-servlet’, started on Thu Jun 17 14:49:18 CST 2021, <strong>parent</strong>: Root WebApplicationContext</p></blockquote><p>结论：两个组件分别创建的 IOC 容器是<strong>父子</strong>关系。</p><ul><li>父容器：ContextLoaderListener 创建的 IOC 容器</li><li>子容器：DispatcherServlet 创建的 IOC 容器</li></ul><p>父子关系是如何决定的？</p><ul><li>Tomcat 在读取 web.xml 之后，加载组件的顺序就是监听器、过滤器、Servlet。</li><li>ContextLoaderListener 初始化时如果检查到有已经存在的根级别 IOC 容器，那么会抛出异常。</li><li>DispatcherServlet 创建的 IOC 容器会在初始化时先检查当前环境下是否存在已经创建好的 IOC 容器。<ul><li>如果有：则将已存在的这个 IOC 容器设置为自己的父容器</li><li>如果没有：则将自己设置为 root 级别的 IOC 容器</li></ul></li></ul><p>DispatcherServlet 创建的 IOC 容器设置父容器的源码截图：</p><p>所在类：org.springframework.web.servlet.FrameworkServlet</p><p>所在方法：createWebApplicationContext()</p><p>![](Spring MVC控制层框架&#x2F;img024__fEN2w3a99.png)</p><h4 id="3-4-两个IoC容器之间Bean访问"><a href="#3-4-两个IoC容器之间Bean访问" class="headerlink" title="3.4 两个IoC容器之间Bean访问"></a>3.4 两个IoC容器之间Bean访问</h4><p>![](Spring MVC控制层框架&#x2F;img113_B0qo4n9vts.png)</p><p>spring-mvc.xml配置方式：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.spring.component.controller&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>spring-persist.xml配置方式：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.spring.component.service,com.wzb.spring.component.dao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>所以bean所属IOC容器的关系：</p><ul><li>父容器<ul><li>EmpService</li><li>EmpDao</li></ul></li><li>子容器<ul><li>EmpController</li></ul></li></ul><p>结论：子容器中的 EmpController 装配父容器中的 EmpService 能够正常工作。说明子容器可以访问父容器中的bean。</p><p>分析：“子可用父，父不能用子”的根本原因是子容器中有一个属性 &lt;span style&#x3D;”color:blue;font-weight:bold;”&gt;getParent()&lt;&#x2F;span&gt; 可以获取到父容器这个对象的引用。</p><p>源码依据：</p><ul><li>在 AbstractApplicationContext 类中，有 parent 属性</li><li>在 AbstractApplicationContext 类中，有获取 parent 属性的 getParent() 方法</li><li>子容器可以通过 getParent() 方法获取到父容器对象的引用</li><li>进而调用父容器中类似 “getBean()” 这样的方法获取到需要的 bean 完成装配</li><li>而父容器中并没有类似 “getChildren()“ 这样的方法，所以没法拿到子容器对象的引用</li></ul><p>![](Spring MVC控制层框架&#x2F;img114_NCIr6ftjXa.png)</p><h4 id="3-5-有可能重复对象"><a href="#3-5-有可能重复对象" class="headerlink" title="3.5 有可能重复对象"></a>3.5 有可能重复对象</h4><p>![](Spring MVC控制层框架&#x2F;img115_DlCdffhvJZ.png)</p><p>查看日志确认是否重复创建了对象</p><blockquote><p>Root WebApplicationContext: initialization started<br>……</p></blockquote><p>Creating shared instance of singleton bean ‘helloDao’<br>Creating shared instance of singleton bean ‘helloHandler’<br>Creating shared instance of singleton bean ‘helloService’</p><p>……<br>Root WebApplicationContext initialized in 1150 ms<br>Refreshing WebApplicationContext for namespace ‘dispatcherServlet-servlet’<br>……</p><p>Creating shared instance of singleton bean ‘helloDao’<br>Creating shared instance of singleton bean ‘helloHandler’<br>Creating shared instance of singleton bean ‘helloService’</p><p>重复创建对象的问题</p><ul><li>浪费内存空间</li><li>两个 IOC 容器能力是不同的<ul><li><p>spring-mvc.xml：仅配置和处理请求相关的功能。所以不能给 service 类附加声明式事务功能。</p><p>结论：基于 spring-mvc.xml 配置文件创建的 EmpService 的 bean 不带有声明式事务的功能</p><p>影响：DispatcherServlet 处理浏览器请求时会调用自己创建的 EmpController，然后再调用自己创建的EmpService，而这个 EmpService 是没有事务的，所以处理请求时&lt;span style&#x3D;”color:blue;font-weight:bold;”&gt;没有事务功能的支持&lt;&#x2F;span&gt;。</p></li><li><p>spring-persist.xml：配置声明式事务。所以可以给 service 类附加声明式事务功能。</p><p>结论：基于 spring-persist.xml 配置文件创建的 EmpService 有声明式事务的功能</p><p>影响：由于 DispatcherServlet 的 IOC 容器会优先使用自己创建的 EmpController，进而装配自己创建的EmpService，所以基于 spring-persist.xml 配置文件创建的有声明式事务的 EmpService 用不上。</p></li></ul></li></ul><p>解决重复创建对象的问题</p><p>解决方案一[建议使用]</p><p>让两个配置文件配置自动扫描的包时，各自扫描各自的组件。</p><ul><li>SpringMVC 就扫描 XxxHandler、XXXController</li><li>Spring 扫描 XxxService 和 XxxDao</li></ul><p>解决方案二</p><p>如果由于某种原因，必须扫描同一个包，确实存在重复创建对象的问题，可以采取下面的办法处理。</p><ul><li>spring-mvc.xml 配置文件在整体扫描的基础上进一步配置：仅包含被 @Controller 注解标记的类。</li><li>spring-persist.xml 配置在整体扫描的基础上进一步配置：排除被 @Controller 注解标记的类。</li></ul><p>具体spring-mvc.xml配置文件中的配置方式如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 两个Spring的配置文件扫描相同的包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 为了解决重复创建对象的问题，需要进一步制定扫描组件时的规则 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 目标：『仅』包含@Controller注解标记的类 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- use-default-filters=&quot;false&quot;表示关闭默认规则，表示什么都不扫描，此时不会把任何组件加入IOC容器；</span></span><br><span class="line"><span class="comment">        再配合context:include-filter实现“『仅』包含”效果 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.spring.component&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签配置一个“扫描组件时要包含的类”的规则，追加到默认规则中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type属性：指定规则的类型，根据什么找到要包含的类，现在使用annotation表示基于注解来查找 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- expression属性：规则的表达式。如果type属性选择了annotation，那么expression属性配置注解的全类名 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>具体spring-persist.xml配置文件中的配置方式如下：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 两个Spring的配置文件扫描相同的包 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 在默认规则的基础上排除标记了@Controller注解的类 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.spring.component&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置具体排除规则：把标记了@Controller注解的类排除在扫描范围之外 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-5-小结"><a href="#3-5-小结" class="headerlink" title="3.5 小结"></a>3.5 小结</h4><ul><li>DispatcherServlet 和 ContextLoaderListener 并存<ul><li>DispatcherServlet 负责加载 SpringMVC 的配置文件，例如：spring-mvc.xml</li><li>ContextLoaderListener 负责加载 Spring 的配置文件，例如：spring-persist.xml</li></ul></li><li>两个 IOC 容器的关系：<ul><li>ContextLoaderListener 创建的容器是父容器</li><li>DispatcherServlet 创建的容器是子容器</li></ul></li><li>bean 的装配<ul><li>子容器可以访问父容器中的 bean</li><li>父容器不能访问子容器中的 bean</li></ul></li><li>两个容器扫描同一个包会导致重复创建对象<ul><li>解决办法一：各自扫描各自的包</li><li>解决办法二：<ul><li>DispatcherServlet 创建的容器仅扫描 handler</li><li>ContextLoaderListener 创建的容器不扫描 handler</li></ul></li></ul></li></ul><p>通过遵循 RESTful 架构的设计原则，可以构建出易于理解、可扩展、松耦合和可重用的 Web 服务。RESTful API 的特点是简单、清晰，并且易于使用和理解，它们使用标准的 HTTP 方法和状态码进行通信，不需要额外的协议和中间件。</p><p>RESTful 架构通常用于构建 Web API，提供数据的传输和操作。它可以用于各种应用场景，包括客户端-服务器应用、单页应用（SPA）、移动应用程序和微服务架构等。</p><p>总而言之，RESTful 是一种基于 HTTP 和标准化的设计原则的软件架构风格，用于设计和实现可靠、可扩展和易于集成的 Web 服务和应用程序</p>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Spring企业开发核心框架</title>
      <link href="/2024/03/02/Spring%E4%BC%81%E4%B8%9A%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6/"/>
      <url>/2024/03/02/Spring%E4%BC%81%E4%B8%9A%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring企业开发核心框架"><a href="#Spring企业开发核心框架" class="headerlink" title="Spring企业开发核心框架"></a>Spring企业开发核心框架</h1><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li><a href="#%E4%B8%80%E6%A1%86%E6%9E%B6%E5%89%8D%E8%A8%80">一、框架前言</a><ul><li><a href="#1-%E6%80%BB%E4%BD%93%E6%8A%80%E6%9C%AF%E4%BD%93%E7%B3%BB">1. 总体技术体系</a></li><li><a href="#2-%E6%A1%86%E6%9E%B6%E6%A6%82%E5%BF%B5%E5%92%8C%E7%90%86%E8%A7%A3">2. 框架概念和理解</a></li></ul></li><li><a href="#%E4%BA%8CSpring-Framework%E7%AE%80%E4%BB%8B">二、Spring Framework简介</a><ul><li><a href="#1-Spring-%E5%92%8C-SpringFramework">1. Spring 和 SpringFramework</a></li><li><a href="#2-SpringFramework%E4%B8%BB%E8%A6%81%E5%8A%9F%E8%83%BD%E6%A8%A1%E5%9D%97">2. SpringFramework主要功能模块</a></li><li><a href="#3-SpringFramework-%E4%B8%BB%E8%A6%81%E4%BC%98%E5%8A%BF">3. SpringFramework 主要优势</a></li></ul></li><li><a href="#%E4%B8%89Spring-IoC-%E5%AE%B9%E5%99%A8%E6%A6%82%E5%BF%B5">三、Spring IoC 容器概念</a><ul><li><a href="#1-%E7%BB%84%E4%BB%B6%E5%92%8C%E7%BB%84%E4%BB%B6%E7%AE%A1%E7%90%86%E6%A6%82%E5%BF%B5">1. 组件和组件管理概念</a></li><li><a href="#2-Spring-IoC%E5%AE%B9%E5%99%A8%E5%92%8C%E5%AE%B9%E5%99%A8%E5%AE%9E%E7%8E%B0">2. Spring IoC容器和容器实现</a></li><li><a href="#3-Spring-IoC--DI%E6%A6%82%E5%BF%B5%E6%80%BB%E7%BB%93">3. Spring IoC &#x2F; DI概念总结</a></li></ul></li><li><a href="#%E5%9B%9BSpring-IoC--DI-%E5%AE%9E%E7%8E%B0">四、Spring IoC &#x2F; DI 实现</a><ul><li><a href="#1--Spring-IoC--DI-%E5%AE%9E%E7%8E%B0%E6%AD%A5%E9%AA%A4">1.  Spring IoC &#x2F; DI 实现步骤</a></li><li><a href="#2-%E5%9F%BA%E4%BA%8EXML%E6%96%B9%E5%BC%8F%E7%AE%A1%E7%90%86Bean">2. 基于XML方式管理Bean</a><ul><li><a href="#21-%E5%AE%9E%E9%AA%8C%E4%B8%80-%E5%A3%B0%E6%98%8E%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%E5%92%8C%E5%88%9B%E5%BB%BA%E5%AE%B9%E5%99%A8">2.1 实验一： 声明配置文件和创建容器</a></li><li><a href="#22-%E5%AE%9E%E9%AA%8C%E4%BA%8C-%E8%8E%B7%E5%8F%96Bean">2.2 实验二： 获取Bean</a></li><li><a href="#23-%E5%AE%9E%E9%AA%8C%E4%B8%89-Bean%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BCsetter%E6%B3%A8%E5%85%A5">2.3 实验三： Bean属性赋值：setter注入</a></li><li><a href="#24-%E5%AE%9E%E9%AA%8C%E5%9B%9B-Bean%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E5%BC%95%E7%94%A8%E5%85%B6%E4%BB%96Bean">2.4 实验四： Bean属性赋值：引用其他Bean</a></li><li><a href="#25-%E5%AE%9E%E9%AA%8C%E4%BA%94-Bean-%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E5%86%85%E9%83%A8Bean%E5%A3%B0%E6%98%8E%E4%BA%86%E8%A7%A3">2.5 实验五： Bean 属性赋值：内部Bean声明(了解)</a></li><li><a href="#26-%E5%AE%9E%E9%AA%8C%E5%85%AD-Bean-%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E5%BC%95%E5%85%A5%E5%A4%96%E9%83%A8Properties%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0">2.6 实验六： Bean 属性赋值：引入外部Properties配置参数</a></li><li><a href="#27-%E5%AE%9E%E9%AA%8C%E4%B8%83-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7FactoryBean%E7%89%B9%E6%80%A7">2.7 实验七： 高级特性：FactoryBean特性</a></li><li><a href="#28-%E5%AE%9E%E9%AA%8C%E5%85%AB-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7Bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F">2.8 实验八： 高级特性：Bean的作用域</a></li><li><a href="#29-%E5%AE%9E%E9%AA%8C%E4%B9%9D-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7Bean%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">2.9 实验九： 高级特性：Bean的生命周期</a></li></ul></li><li><a href="#3-%E5%9F%BA%E4%BA%8E-%E6%B3%A8%E8%A7%A3-%E6%96%B9%E5%BC%8F%E7%AE%A1%E7%90%86-Bean">3. 基于 注解 方式管理 Bean</a><ul><li><a href="#31-%E5%AE%9E%E9%AA%8C%E4%B8%80-Bean%E6%B3%A8%E8%A7%A3%E6%A0%87%E8%AE%B0%E5%92%8C%E6%89%AB%E6%8F%8FIoC">3.1 实验一： Bean注解标记和扫描(IoC)</a></li><li><a href="#32-%E5%AE%9E%E9%AA%8C%E4%BA%8C-Bean%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B%E8%87%AA%E5%8A%A8%E8%A3%85%E9%85%8DDI">3.2 实验二： Bean属性赋值：引用类型自动装配(DI)</a></li><li><a href="#33-%E5%AE%9E%E9%AA%8C%E4%B8%89-Bean%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BCDI">3.3 实验三： Bean属性赋值：基本类型属性赋值(DI)</a></li></ul></li><li><a href="#4-%E5%9F%BA%E4%BA%8E-%E9%85%8D%E7%BD%AE%E7%B1%BB-%E6%96%B9%E5%BC%8F%E7%AE%A1%E7%90%86-Bean">4. 基于 配置类 方式管理 Bean</a><ul><li><a href="#41-%E5%AE%8C%E5%85%A8%E6%B3%A8%E8%A7%A3%E5%BC%80%E5%8F%91%E7%90%86%E8%A7%A3">4.1 完全注解开发理解</a></li><li><a href="#42-%E5%AE%9E%E9%AA%8C%E4%B8%80%E9%85%8D%E7%BD%AE%E7%B1%BB%E5%92%8C%E6%89%AB%E6%8F%8F%E6%B3%A8%E8%A7%A3">4.2 实验一：配置类和扫描注解</a></li><li><a href="#43-%E5%AE%9E%E9%AA%8C%E4%BA%8CBean%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6">4.3 实验二：@Bean定义组件</a></li><li><a href="#44-%E5%AE%9E%E9%AA%8C%E4%B8%89%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7Bean%E6%B3%A8%E8%A7%A3%E7%BB%86%E8%8A%82">4.4 实验三：高级特性：@Bean注解细节</a></li><li><a href="#45-%E5%AE%9E%E9%AA%8C%E5%9B%9B%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7Import%E6%89%A9%E5%B1%95">4.5 实验四：高级特性：@Import扩展</a></li><li><a href="#46-%E5%AE%9E%E9%AA%8C%E4%BA%94%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7Conditional%E6%89%A9%E5%B1%95%E4%BA%86%E8%A7%A3">4.6 实验五：高级特性：@Conditional扩展(了解)</a></li></ul></li><li><a href="#5-%E4%B8%89%E7%A7%8D%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93">5. 三种配置方式总结</a><ul><li><a href="#51-XML%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93">5.1 XML方式配置总结</a></li><li><a href="#52-XML%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93">5.2 XML+注解方式配置总结</a></li><li><a href="#53-%E5%AE%8C%E5%85%A8%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E9%85%8D%E7%BD%AE%E6%80%BB%E7%BB%93">5.3 完全注解方式配置总结</a></li></ul></li><li><a href="#6-%E6%95%B4%E5%90%88Spring5-Test5%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83">6. 整合Spring5-Test5搭建测试环境</a></li></ul></li><li><a href="#%E4%BA%94Spring-AOP%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B">五、Spring AOP面向切面编程</a><ul><li><a href="#1-%E5%9C%BA%E6%99%AF%E8%AE%BE%E5%AE%9A%E5%92%8C%E9%97%AE%E9%A2%98%E5%A4%8D%E7%8E%B0">1. 场景设定和问题复现</a></li><li><a href="#2-%E8%A7%A3%E5%86%B3%E6%8A%80%E6%9C%AF%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F">2. 解决技术代理模式</a></li><li><a href="#3-%E9%9D%A2%E5%90%91%E5%88%87%E9%9D%A2%E7%BC%96%E7%A8%8B%E6%80%9D%E7%BB%B4AOP">3. 面向切面编程思维（AOP）</a></li><li><a href="#4-Spring-AOP%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%85%B3%E7%B3%BB%E6%A2%B3%E7%90%86">4. Spring AOP框架介绍和关系梳理</a></li><li><a href="#5-Spring-AOP%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E5%92%8C%E7%BB%86%E8%8A%82">5. Spring AOP基于注解方式实现和细节</a><ul><li><a href="#51-Spring-AOP%E5%BA%95%E5%B1%82%E6%8A%80%E6%9C%AF%E7%BB%84%E6%88%90">5.1 Spring AOP底层技术组成</a></li><li><a href="#52-%E5%88%9D%E6%AD%A5%E5%AE%9E%E7%8E%B0">5.2 初步实现</a></li><li><a href="#53-%E8%8E%B7%E5%8F%96%E9%80%9A%E7%9F%A5%E7%BB%86%E8%8A%82%E4%BF%A1%E6%81%AF">5.3 获取通知细节信息</a></li><li><a href="#54-%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%AF%AD%E6%B3%95">5.4 切点表达式语法</a></li><li><a href="#55-%E9%87%8D%E7%94%A8%E6%8F%90%E5%8F%96%E5%88%87%E7%82%B9%E8%A1%A8%E8%BE%BE%E5%BC%8F">5.5 重用（提取）切点表达式</a></li><li><a href="#56-%E7%8E%AF%E7%BB%95%E9%80%9A%E7%9F%A5">5.6 环绕通知</a></li><li><a href="#57-%E5%88%87%E9%9D%A2%E4%BC%98%E5%85%88%E7%BA%A7%E8%AE%BE%E7%BD%AE">5.7 切面优先级设置</a></li><li><a href="#58-CGLib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86%E7%94%9F%E6%95%88">5.8 CGLib动态代理生效</a></li><li><a href="#59-%E6%B3%A8%E8%A7%A3%E5%AE%9E%E7%8E%B0%E5%B0%8F%E7%BB%93">5.9 注解实现小结</a></li></ul></li><li><a href="#6-SpringAOP%E5%9F%BA%E4%BA%8EXML%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E4%BA%86%E8%A7%A3%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">6. SpringAOP基于XML方式实现(了解)准备工作</a></li><li><a href="#7-SpringAOP%E5%AF%B9%E8%8E%B7%E5%8F%96Bean%E7%9A%84%E5%BD%B1%E5%93%8D%E7%90%86%E8%A7%A3">7. SpringAOP对获取Bean的影响理解</a><ul><li><a href="#71-%E6%A0%B9%E6%8D%AE%E7%B1%BB%E5%9E%8B%E8%A3%85%E9%85%8D-bean">7.1 根据类型装配 bean</a></li><li><a href="#72-%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93">7.2 使用总结</a></li></ul></li></ul></li><li><a href="#%E5%85%ADSpring-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1">六、Spring 声明式事务</a><ul><li><a href="#1-JdbcTemplate%E4%BD%BF%E7%94%A8">1. JdbcTemplate使用</a></li><li><a href="#2-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1%E6%A6%82%E5%BF%B5">2. 声明式事务概念</a><ul><li><a href="#21-%E7%BC%96%E7%A8%8B%E5%BC%8F%E4%BA%8B%E5%8A%A1">2.1 编程式事务</a></li><li><a href="#22-%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1">2.2 声明式事务</a></li><li><a href="#23-Spring%E4%BA%8B%E5%8A%A1%E7%AE%A1%E7%90%86%E5%99%A8">2.3 Spring事务管理器</a></li></ul></li><li><a href="#3-%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1">3. 基于注解的声明式事务</a><ul><li><a href="#31-%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C">3.1 准备工作</a></li><li><a href="#32-%E5%9F%BA%E6%9C%AC%E4%BA%8B%E5%8A%A1%E6%8E%A7%E5%88%B6">3.2 基本事务控制</a></li><li><a href="#33-%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7%E5%8F%AA%E8%AF%BB">3.3 事务属性：只读</a></li><li><a href="#34-%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7%E8%B6%85%E6%97%B6%E6%97%B6%E9%97%B4">3.4 事务属性：超时时间</a></li><li><a href="#35-%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7%E4%BA%8B%E5%8A%A1%E5%BC%82%E5%B8%B8">3.5 事务属性：事务异常</a></li><li><a href="#36-%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB">3.6 事务属性：事务隔离级别</a></li><li><a href="#37-%E4%BA%8B%E5%8A%A1%E5%B1%9E%E6%80%A7%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA">3.7 事务属性：事务传播行为</a></li></ul></li><li><a href="#4-%E5%9F%BA%E4%BA%8EXML%E7%9A%84%E5%A3%B0%E6%98%8E%E5%BC%8F%E4%BA%8B%E5%8A%A1">4. 基于XML的声明式事务</a></li></ul></li></ul><h2 id="一、框架前言"><a href="#一、框架前言" class="headerlink" title="一、框架前言"></a>一、框架前言</h2><h3 id="1-总体技术体系"><a href="#1-总体技术体系" class="headerlink" title="1. 总体技术体系"></a>1. 总体技术体系</h3><ul><li><p>单一架构</p><p>一个项目，一个工程，导出为一个war包，在一个Tomcat上运行。也叫all in one。</p><p><img src="image_RZj3JZFMaS.png"></p><p>单一架构，项目主要应用技术框架为：Spring , SpringMVC , Mybatis等</p></li><li><p>分布式架构</p><p>一个项目（对应 IDEA 中的一个 project），拆分成很多个模块，每个模块是一个 IDEA 中的一个 module。每一个模块都是运行在自己的 Tomcat 上。模块之间可以互相调用。每一个模块内部可以看成是一个单一架构的应用。</p><p><img src="image_lr5LTEnbnz.png"></p><p>分布式架构，项目主要应用技术框架：SpringBoot , SpringCloud , 中间件等</p></li></ul><h3 id="2-框架概念和理解"><a href="#2-框架概念和理解" class="headerlink" title="2. 框架概念和理解"></a>2. 框架概念和理解</h3><p>框架( Framework )是一个集成了基本结构、规范、设计模式、编程语言和程序库等基础组件的软件系统，它可以用来构建更高级别的应用程序。框架的设计和实现旨在解决特定领域中的常见问题，帮助开发人员更高效、更稳定地实现软件开发目标。</p><p><img src="image_W0xKmnXYD8.png"></p><p>框架的优点包括以下几点：</p><ol><li>提高开发效率：框架提供了许多预先设计好了的组件和工具，能够帮助开发人员快速进行开发。相较于传统手写代码，在框架提供的规范化环境中，开发者可以更快地实现项目的各种要求。</li><li>降低开发成本：框架的提供标准化的编程语言、数据操作等代码片段，避免了重复开发的问题，降低了开发成本，提供深度优化的系统，降低了维护成本，增强了系统的可靠性。</li><li>提高应用程序的稳定性：框架通常经过了很长时间的开发和测试，其中的许多组件、代码片段和设计模式都得到了验证。重复利用这些组件有助于减少bug的出现，从而提高了应用程序的稳定性。</li><li>提供标准化的解决方案：框架通常是针对某个特定领域的，通过提供标准化的解决方案，可以为开发人员提供一种共同的语言和思想基础，有助于更好地沟通和协作。</li></ol><p>框架的缺点包括以下几个方面：</p><ol><li>学习成本高：框架通常具有特定的语言和编程范式。对于开发人员而言，需要花费时间学习其背后的架构、模式和逻辑，这对于新手而言可能会耗费较长时间。</li><li>可能存在局限性：虽然框架提高了开发效率并可以帮助开发人员解决常见问题，但是在某些情况下，特定的应用需求可能超出框架的范围，从而导致应用程序无法满足要求。开发人员可能需要更多的控制权和自由度，同时需要在框架和应用程序之间进行权衡取舍。</li><li>版本变更和兼容性问题：框架的版本发布和迭代通常会导致代码库的大规模变更，进而导致应用程序出现兼容性问题和漏洞。当框架变更时，需要考虑框架是否向下兼容，以及如何进行适当的测试、迁移和升级。</li><li>架构风险：框架涉及到很多抽象和概念，如果开发者没有足够的理解和掌握其架构，可能会导致系统出现设计和架构缺陷，从而影响系统的健康性和安全性。</li></ol><p>站在文件结构的角度理解框架，可以将框架总结：<strong>框架 &#x3D; jar包+配置文件</strong></p><p><img src="image_ipQxVLXTc5.png"></p><p>莎士比亚说,”一千个观众眼中有一千个哈姆雷特” 即仁者见仁,智者见智.说每个人都会对作品有不同的理解，每个人对待任何事物都有自己的看法，同样的技术解决同样的问题会产生不同流程和风格的解决方案，而采用一种框架其实就是限制用户必须使用其规定的方案来实现，可以降低程序员之间沟通以及日后维护的成本！</p><p>常用的单一架构JavaEE项目框架演进，从SSH、SSH2过渡到了SSM：SpringMVC、Spring、MyBatis。</p><p>总之，框架已经对基础的代码进行了封装并提供相应的API，开发者在使用框架是直接调用封装好的API可以省去很多代码编写，从而提高工作效率和开发速度。</p><h2 id="二、Spring-Framework简介"><a href="#二、Spring-Framework简介" class="headerlink" title="二、Spring Framework简介"></a>二、Spring Framework简介</h2><h3 id="1-Spring-和-SpringFramework"><a href="#1-Spring-和-SpringFramework" class="headerlink" title="1. Spring 和 SpringFramework"></a>1. Spring 和 SpringFramework</h3><p><a href="https://spring.io/projects">https://spring.io/projects</a> (spring官网项目)</p><p><strong>广义的 Spring：Spring 技术栈</strong>（全家桶）</p><p>广义上的 Spring 泛指以 Spring Framework 为基础的 Spring 技术栈。</p><p>经过十多年的发展，Spring 已经不再是一个单纯的应用框架，而是逐渐发展成为一个由多个不同子项目（模块）组成的成熟技术，例如 Spring Framework、Spring MVC、SpringBoot、Spring Cloud、Spring Data、Spring Security 等，其中 Spring Framework 是其他子项目的基础。 </p><p>这些子项目涵盖了从企业级应用开发到云计算等各方面的内容，能够帮助开发人员解决软件发展过程中不断产生的各种实际问题，给开发人员带来了更好的开发体验。</p><p><strong>狭义的 Spring：Spring Framework</strong>（基础框架）</p><p>狭义的 Spring 特指 Spring Framework，通常我们将它称为 Spring 框架。</p><p>Spring Framework（Spring框架）是一个开源的应用程序框架，由SpringSource公司开发，最初是为了解决企业级开发中各种常见问题而创建的。它提供了很多功能，例如：依赖注入（Dependency Injection）、面向切面编程（AOP）、声明式事务管理（TX）等。其主要目标是使企业级应用程序的开发变得更加简单和快速，并且Spring框架被广泛应用于Java企业开发领域。</p><p>Spring全家桶的其他框架都是以SpringFramework框架为基础！</p><h3 id="2-SpringFramework主要功能模块"><a href="#2-SpringFramework主要功能模块" class="headerlink" title="2. SpringFramework主要功能模块"></a>2. SpringFramework主要功能模块</h3><table><thead><tr><th>功能模块</th><th>功能介绍</th></tr></thead><tbody><tr><td>Core Container</td><td>核心容器，控制反转和依赖注入</td></tr><tr><td>AOP&amp;Aspects</td><td>面向切面编程</td></tr><tr><td>TX</td><td>声明式事务管理</td></tr><tr><td>Testing</td><td>快速整合测试环境</td></tr><tr><td>Data Access&#x2F;Integration</td><td>提供了对数据访问&#x2F;集成的功能。</td></tr><tr><td>Spring MVC</td><td>提供了面向Web应用程序的集成功能。</td></tr></tbody></table><p>SpringFramework框架结构图：</p><p><img src="image_rOY_Nte2NI.png"></p><h3 id="3-SpringFramework-主要优势"><a href="#3-SpringFramework-主要优势" class="headerlink" title="3. SpringFramework 主要优势"></a>3. SpringFramework 主要优势</h3><ol><li>丰富的生态系统：Spring 生态系统非常丰富，支持许多模块和库，如 Spring Boot、Spring Security、Spring Cloud 等等，可以帮助开发人员快速构建高可靠性的企业应用程序。</li><li>模块化的设计：框架组件之间的松散耦合和模块化设计使得 Spring Framework 具有良好的可重用性、可扩展性和可维护性。开发人员可以轻松地选择自己需要的模块，根据自己的需求进行开发。</li><li>简化 Java 开发：Spring Framework 简化了 Java 开发，提供了各种工具和 API，可以降低开发复杂度和学习成本。同时，Spring Framework 支持各种应用场景，包括 Web 应用程序、RESTful API、消息传递、批处理等等。</li><li>不断创新和发展：Spring Framework 开发团队一直在不断创新和发展，保持与最新技术的接轨，为开发人员提供更加先进和优秀的工具和框架。</li></ol><p>因此，这些优点使得 Spring Framework 成为了一个稳定、可靠、且创新的框架，为企业级 Java 开发提供了一站式的解决方案。</p><p>Spring 使创建 Java 企业应用程序变得容易。它提供了在企业环境中采用 Java 语言所需的一切，支持 Groovy 和 Kotlin 作为 JVM 上的替代语言，并且可以根据应用程序的需求灵活地创建多种架构。<em><strong>从Spring Framework 6.0开始，Spring 需要 Java 17+。</strong></em></p><h2 id="三、Spring-IoC-容器概念"><a href="#三、Spring-IoC-容器概念" class="headerlink" title="三、Spring IoC 容器概念"></a>三、Spring IoC 容器概念</h2><h3 id="1-组件和组件管理概念"><a href="#1-组件和组件管理概念" class="headerlink" title="1. 组件和组件管理概念"></a>1. 组件和组件管理概念</h3><ul><li><p><strong>1.1 什么是组件？</strong></p><p>常规的三层架构处理请求流程：</p><p><img src="image_aKpD34cBOJ.png"></p><p>整个项目就是由各种组件搭建而成的：</p><p><img src="image_Zv7aB3JB6r.png"></p></li><li><p><strong>1.2 我们的期待？</strong></p><ul><li>有人替我们创建组件的对象</li><li>有人帮我们保存组件的对象</li><li>有人帮助我们自动组装</li><li>有人替我们管理事务</li><li>有人协助我们整合其他框架</li><li>……</li></ul></li><li><p><strong>1.3 Spring充当组件管理角色（IoC）</strong>！</p><p>那么谁帮我们完成我们的期待，帮我们管理组件呢？</p><p>当然是Spring 框架了！</p><p>组件可以完全交给Spring 框架进行管理，Spring框架替代了程序员原有的new对象和对象属性赋值动作等！</p><p>Spring具体的组件管理动作包含：</p><ul><li>组件对象实例化</li><li>组件属性属性赋值</li><li>组件对象之间引用</li><li>组件对象存活周期管理</li><li>……<br>我们只需要编写元数据（配置文件）告知Spring 管理哪些类组件和他们的管理即可！<br>注意：组件是映射到应用程序中所有可重用组件的Java对象，应该是可复用的功能对象！</li><li>组件一定是对象</li><li>对象不一定是组件<br>综上所述，Spring 充当一个组件容器，创建、管理、存储组件，减少了我们的编码压力，让我们更加专注进行业务编写！</li></ul></li><li><p><strong>1.4 组件交给Spring管理优势!</strong></p><ol><li>降低了组件之间的耦合性：Spring IoC容器通过依赖注入机制，将组件之间的依赖关系削弱，减少了程序组件之间的耦合性，使得组件更加松散地耦合。</li><li>提高了代码的可重用性和可维护性：将组件的实例化过程、依赖关系的管理等功能交给Spring IoC容器处理，使得组件代码更加模块化、可重用、更易于维护。</li><li>方便了配置和管理：Spring IoC容器通过XML文件或者注解，轻松的对组件进行配置和管理，使得组件的切换、替换等操作更加的方便和快捷。</li><li>交给Spring管理的对象（组件），方可享受Spring框架的其他功能（AOP,声明式事务管理）等</li></ol></li></ul><h3 id="2-Spring-IoC容器和容器实现"><a href="#2-Spring-IoC容器和容器实现" class="headerlink" title="2. Spring IoC容器和容器实现"></a>2. Spring IoC容器和容器实现</h3><blockquote><p>组件管理都是交给Spring的IoC容器实现，接下来我们介绍SpringIoC容器！</p></blockquote><ul><li><p><strong>2.1 普通和复杂容器</strong></p><p><strong>普通容器</strong></p><p>生活中的普通容器</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img002.6e874877.png"></p><blockquote><p>普通容器只能用来存储，没有更多功能。<br>程序中的普通容器</p></blockquote><ul><li>数组</li><li>集合：List</li><li>集合：Set<br><strong>复杂容器</strong><br>生活中的复杂容器</li></ul><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img003.6f9c041c.png"></p><blockquote><p>政府管理我们的一生，生老病死都和政府有关。<br>程序中的复杂容器<br>Servlet 容器能够管理 Servlet、Filter、Listener 这样的组件的一生，所以它是一个复杂容器。我们即将要学习的Spring IoC 容器也是一个复杂容器。它们不仅要负责创建组件的对象、存储组件的对象，还要负责调用组件的方法让它们工作，最终在特定情况下销毁组件。</p><table><thead><tr><th>名称</th><th>时机</th><th>次数</th></tr></thead><tbody><tr><td>创建对象</td><td>默认情况：接收到第一次请求 &#xA;修改启动顺序后：Web应用启动过程中</td><td>一次</td></tr><tr><td>初始化操作</td><td>创建对象之后</td><td>一次</td></tr><tr><td>处理请求</td><td>接收到请求</td><td>多次</td></tr><tr><td>销毁操作</td><td>Web应用卸载之前</td><td>一次</td></tr><tr><td>总结：Spring管理组件的容器，就是一个复杂容器，不仅存储组件，也可以管理组件之间依赖关系，并且创建和销毁组件等！</td><td></td><td></td></tr></tbody></table></blockquote></li><li><p><strong>2.2 SpringIoC容器介绍</strong></p><p>Spring IoC 容器，负责实例化、配置和组装 bean（组件）。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。配置元数据以 <strong>XML、Java 注释</strong>或** Java 代码形式**表现。它允许表达组成应用程序的组件以及这些组件之间丰富的相互依赖关系。</p><p><img src="image_NSo30Z8YgK.png"></p><p>上图显示了 Spring 容器工作原理的高级视图。应用程序类与配置元数据相结合，您拥有完全配置且可执行的系统或应用程序。</p></li><li><p><strong>2.3 SpringIoC容器接口和实现</strong></p><p><strong>SpringIoc容器接口</strong>：</p><p><code>org.springframework.beans</code> 和 <code>org.springframework.context</code> 包是 Spring Framework 的 IoC 容器的基础包。&#x20;</p><p><code>BeanFactory</code> 接口提供了一种高级配置机制，能够管理任何类型的对象，它是SpringIoC容器标准化超接口！</p><p><code>ApplicationContext</code> 是 <code>BeanFactory</code> 的子接口。它补充说：</p><ul><li>更容易与 Spring 的 AOP 功能集成</li><li>消息资源处理（用于国际化）</li><li>特定于应用程序给予此接口实现，例如Web 应用程序的 <code>WebApplicationContext</code><br>简而言之， <code>BeanFactory</code> 提供了配置框架和基本功能，而 <code>ApplicationContext</code> 添加了更多特定于企业的功能。 <code>ApplicationContext</code> 是 <code>BeanFactory</code> 的完整超集！<br><strong>ApplicationContext容器实现类</strong>：</li></ul><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img004.f6680aef.png"></p><table><thead><tr><th>类型名</th><th>简介</th></tr></thead><tbody><tr><td>ClassPathXmlApplicationContext</td><td>通过读取类路径下的 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>FileSystemXmlApplicationContext</td><td>通过文件系统路径读取 XML 格式的配置文件创建 IOC 容器对象</td></tr><tr><td>AnnotationConfigApplicationContext</td><td>通过读取Java配置类创建 IOC 容器对象</td></tr><tr><td>WebApplicationContext</td><td>专门为 Web 应用准备，基于 Web 环境创建 IOC 容器对象，并将对象引入存入 ServletContext 域中。</td></tr></tbody></table></li><li><p><strong>2.4 SpringIoC容器管理配置方式</strong></p><p>Spring IoC 容器使用多种形式的配置元数据。此配置元数据表示您作为应用程序开发人员如何告诉 Spring 容器实例化、配置和组装应用程序中的对象。</p><p><img src="image_NSo30Z8YgK.png"></p><p>Spring框架提供了多种配置方式：XML配置方式、注解方式和Java配置类方式</p><ol><li>XML配置方式：是Spring框架最早的配置方式之一，通过在XML文件中定义Bean及其依赖关系、Bean的作用域等信息，让Spring IoC容器来管理Bean之间的依赖关系。该方式从Spring框架的第一版开始提供支持。</li><li>注解方式：从Spring 2.5版本开始提供支持，可以通过在Bean类上使用注解来代替XML配置文件中的配置信息。通过在Bean类上加上相应的注解（如@Component, @Service, @Autowired等），将Bean注册到Spring IoC容器中，这样Spring IoC容器就可以管理这些Bean之间的依赖关系。</li><li>Java配置类方式：从Spring 3.0版本开始提供支持，通过Java类来定义Bean、Bean之间的依赖关系和配置信息，从而代替XML配置文件的方式。Java配置类是一种使用Java编写配置信息的方式，通过@Configuration、@Bean等注解来实现Bean和依赖关系的配置。<br>配置方式的使用场景不同，为了更多体验每种方式，SSM期间，我们使用<strong>XML+注解方式为主</strong>。SpringBoot期间，我们使用<strong>配置类+注解方式为主</strong>！</li></ol></li></ul><h3 id="3-Spring-IoC-DI概念总结"><a href="#3-Spring-IoC-DI概念总结" class="headerlink" title="3. Spring IoC &#x2F; DI概念总结"></a>3. Spring IoC &#x2F; DI概念总结</h3><ul><li><p><strong>IoC容器</strong></p><p>Spring IoC 容器，负责实例化、配置和组装 bean（组件）。容器通过读取配置元数据来获取有关要实例化、配置和组装组件的指令。</p></li><li><p><strong>IoC（Inversion of Control）控制反转</strong></p><p>IoC 主要是针对对象的创建和调用控制而言的，也就是说，当应用程序需要使用一个对象时，不再是应用程序直接创建该对象，而是由 IoC 容器来创建和管理，即控制权由应用程序转移到 IoC 容器中，也就是“反转”了控制权。这种方式基本上是通过依赖查找的方式来实现的，即 IoC 容器维护着构成应用程序的对象，并负责创建这些对象。</p></li><li><p><strong>DI (Dependency Injection)</strong> <strong>依赖注入</strong></p><p>DI 是指在组件之间传递依赖关系的过程中，将依赖关系在容器内部进行处理，这样就不必在应用程序代码中硬编码对象之间的依赖关系，实现了对象之间的解耦合。在 Spring 中，DI 是通过 XML 配置文件或注解的方式实现的。它提供了三种形式的依赖注入：构造函数注入、Setter 方法注入和接口注入。</p></li></ul><h2 id="四、Spring-IoC-DI-实现"><a href="#四、Spring-IoC-DI-实现" class="headerlink" title="四、Spring IoC &#x2F; DI 实现"></a>四、Spring IoC &#x2F; DI 实现</h2><h3 id="1-Spring-IoC-DI-实现步骤"><a href="#1-Spring-IoC-DI-实现步骤" class="headerlink" title="1.  Spring IoC &#x2F; DI 实现步骤"></a>1.  Spring IoC &#x2F; DI 实现步骤</h3><blockquote><p>我们总结下，组件交给Spring IoC容器管理，并且获取和使用的基本步骤！</p></blockquote><ol><li><p><strong>配置元数据</strong>（配置）</p><p>配置元数据，既是编写交给SpringIoC容器管理组件的信息，配置方式有三种。</p><p>基于 XML 的配置元数据的基本结构：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 此处要添加一些约束，配置文件的标签并不是随意命名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">    https://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">1</span>] <span class="attr">class</span>=<span class="string">&quot;...&quot;</span> [<span class="attr">2</span>]&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;...&quot;</span> <span class="attr">class</span>=<span class="string">&quot;...&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- collaborators and configuration for this bean go here --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- more bean definitions go here --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring IoC 容器管理一个或多个组件。这些 组件是使用你提供给容器的配置元数据（例如，以 XML <code>&lt;bean/&gt;</code> 定义的形式）创建的。</p><p>&lt;bean &#x2F;&gt; 标签 &#x3D;&#x3D; 组件信息声明</p><ul><li><code>id</code> 属性是标识单个 Bean 定义的字符串。</li><li><code>class</code> 属性定义 Bean 的类型并使用完全限定的类名。</li></ul></li><li><p><strong>实例化IoC容器</strong></p><p>提供给 <code>ApplicationContext</code> 构造函数的位置路径是资源字符串地址，允许容器从各种外部资源（如本地文件系统、Java <code>CLASSPATH</code> 等）加载配置元数据。</p><p>我们应该选择一个合适的实现类，进行IoC容器的实例化：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> </span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br></pre></td></tr></table></figure></li><li><p><strong>使用容器,获取Bean（组件）</strong></p><p><code>ApplicationContext</code> 是一个高级工厂的接口，能够维护不同 bean 及其依赖项的注册表。通过使用方法 <code>T getBean(String name, Class&lt;T&gt; requiredType)</code> ，您可以检索 bean 的实例。</p><p>允许读取 Bean 定义并访问它们，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建ioc容器对象，指定配置文件，ioc也开始实例组件对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;services.xml&quot;</span>, <span class="string">&quot;daos.xml&quot;</span>);</span><br><span class="line"><span class="comment">//获取ioc容器的组件对象</span></span><br><span class="line"><span class="type">PetStoreService</span> <span class="variable">service</span> <span class="operator">=</span> context.getBean(<span class="string">&quot;petStore&quot;</span>, PetStoreService.class);</span><br><span class="line"><span class="comment">//使用组件对象</span></span><br><span class="line">List&lt;String&gt; userList = service.getUsernameList();</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-基于XML方式管理Bean"><a href="#2-基于XML方式管理Bean" class="headerlink" title="2. 基于XML方式管理Bean"></a>2. 基于XML方式管理Bean</h3><h4 id="2-1-实验一：-声明配置文件和创建容器"><a href="#2-1-实验一：-声明配置文件和创建容器" class="headerlink" title="2.1 实验一： 声明配置文件和创建容器"></a>2.1 实验一： 声明配置文件和创建容器</h4><ol><li><p>目标</p><p>由 Spring 的 IOC 容器创建类（HappyComponent）的对象，并管理。</p></li><li><p>思路</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img006.c8bae859.png"></p></li><li><p>准备项目</p><ol><li>创建maven工程（spring-xml-bean）</li></ol></li><li><p>导入SpringIoC相关依赖</p><pre><code>pom.xml<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><ol start="3"><li>准备组件类（HappyComponent）<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.ioc;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HappyComponent.doWork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>创建SpringIoC配置（XML）</p><p><img src="image_WqHKZ59gmL.png"></p><p>文件：resources&#x2F;spring-bean-01.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实验一 [重要]创建bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyComponent&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ul><li>bean标签：通过配置bean标签告诉IOC容器需要创建对象的组件是什么<ul><li>id属性：bean的唯一标识,方便后期获取Bean！</li><li>class属性：组件类的全类名！</li></ul></li></ul></li><li><p>创建IoC容器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">IoCTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//方式1: 创建IoC容器,并读取配置文件 注意: 构造函数是可变参数,可以传入一个或者多个配置</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-01.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//方式2: 先创建容器,后配置文件!</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">iocContainer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line">        <span class="comment">//设置配置配置文件,方法参数为可变参数,可以设置一个或者多个配置</span></span><br><span class="line">        iocContainer1.setConfigLocations(<span class="string">&quot;spring-bean-01.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//后配置的文件,需要调用refresh方法,触发刷新配置</span></span><br><span class="line">        iocContainer1.refresh();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>获取Bean</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment01</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式1: 创建IoC容器,并读取配置文件 注意: 构造函数是可变参数,可以传入一个或者多个配置</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-01.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取bean</span></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;happyComponent&quot;</span>, HappyComponent.class);</span><br><span class="line">    happyComponent.doWork();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方式2: 先创建容器,后配置文件!</span></span><br><span class="line">    <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">iocContainer1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>();</span><br><span class="line">    <span class="comment">//设置配置配置文件,方法参数为可变参数,可以设置一个或者多个配置</span></span><br><span class="line">    iocContainer1.setConfigLocations(<span class="string">&quot;spring-bean-01.xml&quot;</span>);</span><br><span class="line">    <span class="comment">//后配置的文件,需要调用refresh方法,触发刷新配置</span></span><br><span class="line">    iocContainer1.refresh();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取bean</span></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent1</span> <span class="operator">=</span> iocContainer1.getBean(<span class="string">&quot;happyComponent&quot;</span>, HappyComponent.class);</span><br><span class="line">    happyComponent1.doWork();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><ol><li><p>bean的id值，必须唯一！</p></li><li><p>bean需要包含无参数构造函数！</p><p>源码解读：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">instantiate</span><span class="params">(RootBeanDefinition bd, <span class="meta">@Nullable</span> String beanName, BeanFactory owner)</span> &#123;</span><br><span class="line">    <span class="comment">//实例化获取构造函数打破访问修饰符限制，默认获取无参数构造函数</span></span><br><span class="line">    constructorToUse = clazz.getDeclaredConstructor();</span><br><span class="line">    bd.resolvedConstructorOrFactoryMethod = constructorToUse;</span><br><span class="line">    <span class="keyword">return</span> BeanUtils.instantiateClass(constructorToUse);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打破访问修饰符限制</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">makeAccessible</span><span class="params">(Constructor&lt;?&gt; ctor)</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ((!Modifier.isPublic(ctor.getModifiers()) ||</span><br><span class="line">      !Modifier.isPublic(ctor.getDeclaringClass().getModifiers())) &amp;&amp; !ctor.isAccessible()) &#123;</span><br><span class="line">    ctor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h4 id="2-2-实验二：-获取Bean"><a href="#2-2-实验二：-获取Bean" class="headerlink" title="2.2 实验二： 获取Bean"></a>2.2 实验二： 获取Bean</h4><ol><li>根据id获取<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式1: 根据id获取</span></span><br><span class="line"><span class="comment">//没有指定类型,返回为Object,需要类型转化!</span></span><br><span class="line"><span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> </span><br><span class="line">        (HappyComponent) iocContainer.getBean(<span class="string">&quot;happyComponent&quot;</span>);</span><br><span class="line">happyComponent.doWork();</span><br></pre></td></tr></table></figure></li><li>根据类型获取<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式2: 根据类型获取</span></span><br><span class="line"><span class="comment">//根据类型获取,但是要求,同类型(当前类,或者之类,或者接口的实现类)只能有一个对象交给IoC容器管理</span></span><br><span class="line"><span class="comment">//配置两个或者以上出现: org.springframework.beans.factory.NoUniqueBeanDefinitionException 问题</span></span><br><span class="line"><span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> iocContainer.getBean(HappyComponent.class);</span><br><span class="line">happyComponent.doWork();</span><br></pre></td></tr></table></figure></li><li>根据id和类型获取<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式3: 根据id和类型获取</span></span><br><span class="line"><span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;happyComponent&quot;</span>, HappyComponent.class);</span><br><span class="line">happyComponent.doWork();</span><br></pre></td></tr></table></figure></li></ol><p>   总结：</p><p>​根据类型来获取bean时，在满足bean唯一性的前提下，其实只是看：『对象 instanceof 指定的类型』的返回结果，只要返回的是true就可以认定为和类型匹配，能够获取到。</p><h4 id="2-3-实验三：-Bean属性赋值：setter注入"><a href="#2-3-实验三：-Bean属性赋值：setter注入" class="headerlink" title="2.3 实验三： Bean属性赋值：setter注入"></a>2.3 实验三： Bean属性赋值：setter注入</h4><ol><li>组件类添加属性<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="keyword">private</span> String componentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getComponentName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> componentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须配置set方法,属性设置,ioc容器是通过set方法调用,进行属性赋值!!!</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setComponentName</span><span class="params">(String componentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.componentName = componentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HappyComponent.doWork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置时给属性指定值<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实验三 [重要]给bean的属性赋值：setter注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyComponent&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;veryHappy&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>测试属性输出<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment03</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建IoC容器,并读取配置文件 注意: 构造函数是可变参数,可以传入一个或者多个配置</span></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-03.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;happyComponent3&quot;</span>, HappyComponent.class);</span><br><span class="line">    System.out.println(happyComponent.getComponentName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-4-实验四：-Bean属性赋值：引用其他Bean"><a href="#2-4-实验四：-Bean属性赋值：引用其他Bean" class="headerlink" title="2.4 实验四： Bean属性赋值：引用其他Bean"></a>2.4 实验四： Bean属性赋值：引用其他Bean</h4><ol><li>声明新组件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyMachine</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String machineName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMachineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMachineName</span><span class="params">(String machineName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.machineName = machineName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>原组件引用新组件<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加属性</span></span><br><span class="line">    <span class="keyword">private</span> String componentName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getComponentName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> componentName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//必须配置set方法,属性设置,ioc容器是通过set方法调用,进行属性赋值!!!</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setComponentName</span><span class="params">(String componentName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.componentName = componentName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//引用新组件</span></span><br><span class="line">    <span class="keyword">private</span> HappyMachine happyMachine;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">getHappyMachine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHappyMachine</span><span class="params">(HappyMachine happyMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.happyMachine = happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HappyComponent.doWork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置新组件<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyMachine&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyMachine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;makeHappy&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>组件之间引用配置<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent3&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyComponent&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- property标签：通过组件类的setXxx()方法给组件对象设置属性 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- name属性：指定属性名（这个属性名是getXxx()、setXxx()方法定义的，和成员变量无关） --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- value属性：指定属性值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;veryHappy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- ref 属性：通过 bean 的 id 引用另一个 bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;happyMachine&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;happyMachine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>测试<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment04</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-04.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;happyComponent4&quot;</span>, HappyComponent.class);</span><br><span class="line">    <span class="comment">//获取另一个bean</span></span><br><span class="line">    System.out.println(happyComponent.getHappyMachine().getMachineName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>注意事项<ol><li>声明bean，不分先后顺序，spring容器内部有缓存机制，先实例化后属性赋值！</li><li>ref 容易错写成value,会抛出Caused by: java.lang.IllegalStateException: Cannot convert value of type ‘java.lang.String’ to required type 异常！</li><li>只有声明到ioc容器，方可被其他bean引用！</li></ol></li></ol><h4 id="2-5-实验五：-Bean-属性赋值：内部Bean声明-了解"><a href="#2-5-实验五：-Bean-属性赋值：内部Bean声明-了解" class="headerlink" title="2.5 实验五： Bean 属性赋值：内部Bean声明(了解)"></a>2.5 实验五： Bean 属性赋值：内部Bean声明(了解)</h4><ol><li><p>声明内部bean配置</p><p>在bean里面配置的bean就是内部bean，内部bean只能在当前bean内部使用，在其他地方不能使用。</p><p>不会在ioc容器中，实例和存储内部bean,只会缓存类信息，每次获取的时候再实例化！！</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实验五 [重要]给bean的属性赋值：内部bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent5&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyComponent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;happyMachine&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 在一个 bean 中再声明一个 bean 就是内部 bean --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 内部 bean 可以直接用于给属性赋值，可以省略 id 属性 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyMachine&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;makeHappy&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试读取</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment05</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-05.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;happyComponent5&quot;</span>, HappyComponent.class);</span><br><span class="line">    <span class="comment">//通过外部bean,可以获取专属内部bean</span></span><br><span class="line">    System.out.println(happyComponent.getHappyMachine().getMachineName());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//直接获取内部bean,输出! [[报错]]</span></span><br><span class="line">    <span class="comment">//NoSuchBeanDefinitionException: No qualifying bean of type &#x27;com.wzb.ioc.HappyMachine&#x27; available</span></span><br><span class="line">    <span class="type">HappyMachine</span> <span class="variable">happyMachine</span> <span class="operator">=</span> iocContainer.getBean(HappyMachine.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;happyMachine = &quot;</span> + happyMachine);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-6-实验六：-Bean-属性赋值：引入外部Properties配置参数"><a href="#2-6-实验六：-Bean-属性赋值：引入外部Properties配置参数" class="headerlink" title="2.6 实验六： Bean 属性赋值：引入外部Properties配置参数"></a>2.6 实验六： Bean 属性赋值：引入外部Properties配置参数</h4><ol><li><p>实现目标</p><p>将Druid连接池对象交给SpringIoC容器管理！</p></li><li><p>加入数据库依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数据库驱动 和 连接池--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建外部属性文件</p><p>文件位置：resources&#x2F;jdbc.properties</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 配置成你的数据信息</span><br><span class="line">jdbc.user=root</span><br><span class="line">jdbc.password=root</span><br><span class="line">jdbc.url=jdbc:mysql:///数据库名</span><br><span class="line">jdbc.driver=com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure></li><li><p>引入属性文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>在 IDEA 中引入 Spring 配置文件中名称空间的两种操作方式：</p><p>在打字标签名的过程中根据提示选择一个正确的名称空间<br>对于直接复制过来的完整标签，可以在名称空间上点击，然后根据提示引入</p><p><img src="image_o_ya4_sN9V.png"></p></li><li><p>配置连接池信息</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 实验六 [重要]给bean的属性赋值：引入外部属性文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>读取测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment06</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-06.xml&quot;</span>);</span><br><span class="line">    <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> iocContainer.getBean(DataSource.class);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> dataSource.getConnection();</span><br><span class="line">    System.out.println(<span class="string">&quot;connection = &quot;</span> + connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-7-实验七：-高级特性：FactoryBean特性"><a href="#2-7-实验七：-高级特性：FactoryBean特性" class="headerlink" title="2.7 实验七： 高级特性：FactoryBean特性"></a>2.7 实验七： 高级特性：FactoryBean特性</h4><ol><li><p>FactoryBean简介</p><p><code>FactoryBean</code> 接口是Spring IoC容器实例化逻辑的可插拔特性。</p><p>用于配置复杂的Bean对象，可以将创建过程存储在<code>FactoryBean</code> 的getObject方法！</p><p><code>FactoryBean&lt;T&gt;</code> 接口提供三种方法：</p><ul><li><p><code>T getObject()</code>:&#x20;</p><p>返回此工厂创建的对象的实例。该返回值会被存储到IoC容器！</p></li><li><p><code>boolean isSingleton()</code>:&#x20;</p><p>如果此 <code>FactoryBean</code> 返回单例，则返回 <code>true</code> ，否则返回 <code>false</code> 。此方法的默认实现返回 <code>true</code> （注意，lombok插件使用，可能影响效果）。</p></li><li><p><code>Class&lt;?&gt; getObjectType()</code>: 返回 <code>getObject()</code> 方法返回的对象类型，如果事先不知道类型，则返回 <code>null</code> 。<br><img src="image_7avKHyEa0d.png"></p></li></ul></li><li><p>FactoryBean使用场景</p><ol><li>代理类的创建</li><li>第三方框架整合</li><li>复杂对象实例化等</li></ol></li><li><p>Factorybean应用</p><ol><li>准备FactoryBean实现类<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现FactoryBean接口时需要指定泛型</span></span><br><span class="line"><span class="comment">// 泛型类型就是当前工厂要生产的对象的类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;HappyMachine&gt; &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String machineName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMachineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMachineName</span><span class="params">(String machineName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.machineName = machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 方法内部模拟创建、设置一个对象的复杂过程</span></span><br><span class="line">        <span class="type">HappyMachine</span> <span class="variable">happyMachine</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyMachine</span>();</span><br><span class="line">    </span><br><span class="line">        happyMachine.setMachineName(<span class="built_in">this</span>.machineName);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 返回要生产的对象的类型</span></span><br><span class="line">        <span class="keyword">return</span> HappyMachine.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>配置FactoryBean实现类<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- FactoryBean机制 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这个bean标签中class属性指定的是HappyFactoryBean，但是将来从这里获取的bean是HappyMachine对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyMachine7&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyFactoryBean&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- property标签仍然可以用来通过setXxx()方法给属性赋值 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;iceCreamMachine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>测试读取FactoryBean和FactoryBean.getObject对象<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment07</span><span class="params">()</span>  &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-07.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//注意: 直接根据声明FactoryBean的id,获取的是getObject方法返回的对象</span></span><br><span class="line">    <span class="type">HappyMachine</span> <span class="variable">happyMachine</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;happyMachine7&quot;</span>,HappyMachine.class);</span><br><span class="line">    System.out.println(<span class="string">&quot;happyMachine = &quot;</span> + happyMachine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果想要获取FactoryBean对象, 直接在id前添加&amp;符号即可!  &amp;happyMachine7 这是一种固定的约束</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">bean</span> <span class="operator">=</span> iocContainer.getBean(<span class="string">&quot;&amp;happyMachine7&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;bean = &quot;</span> + bean);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>FactoryBean和BeanFactory区别</p><p><strong>FactoryBean</strong>是 Spring 中一种特殊的 bean，可以在 getObject() 工厂方法自定义的逻辑创建Bean！是一种能够生产其他 Bean 的 Bean。FactoryBean 在容器启动时被创建，而在实际使用时则是通过调用 getObject() 方法来得到其所生产的 Bean。因此，FactoryBean 可以自定义任何所需的初始化逻辑，生产出一些定制化的 bean。</p><p>一般情况下，整合第三方框架，都是通过定义FactoryBean实现！！！</p><p><strong>BeanFactory</strong> 是 Spring 框架的基础，其作为一个顶级接口定义了容器的基本行为，例如管理 bean 的生命周期、配置文件的加载和解析、bean 的装配和依赖注入等。BeanFactory 接口提供了访问 bean 的方式，例如 getBean() 方法获取指定的 bean 实例。它可以从不同的来源（例如 Mysql 数据库、XML 文件、Java 配置类等）获取 bean 定义，并将其转换为 bean 实例。同时，BeanFactory 还包含很多子类（例如，ApplicationContext 接口）提供了额外的强大功能。</p><p>总的来说，FactoryBean 和 BeanFactory 的区别主要在于前者是用于创建 bean 的接口，它提供了更加灵活的初始化定制功能，而后者是用于管理 bean 的框架基础接口，提供了基本的容器功能和 bean 生命周期管理。</p><blockquote><p>补充：</p></blockquote><ol><li>构造器注入</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 构造器注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tiger01&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.Tiger&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;东北虎&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;东北&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 有三个属性：index,type,name   配合使用，达到不产生歧义的目的即可 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;tiger02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.Tiger&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;20&quot;</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.Integer&quot;</span> <span class="attr">index</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;东北虎&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">&quot;东北&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>级联属性赋值</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 级联属性注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u04&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.User&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;uname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乔峰&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;30&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;t02&quot;</span>/&gt;</span>  <span class="comment">&lt;!-- 这一句不能少 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher.tid&quot;</span> <span class="attr">value</span>=<span class="string">&quot;t02&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher.tname&quot;</span> <span class="attr">value</span>=<span class="string">&quot;玄苦大师&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;teacher.age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;65&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;t02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.Teacher&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="3"><li>P名称空间</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 首先需要导入schema:  xmlns:p=&quot;http://www.springframework.org/schema/p&quot;--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- P名称空间 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.User&quot;</span> <span class="attr">p:uname</span>=<span class="string">&quot;段延庆&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;40&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;u05&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.User&quot;</span> <span class="attr">p:uname</span>=<span class="string">&quot;段延庆&quot;</span> <span class="attr">p:age</span>=<span class="string">&quot;40&quot;</span> <span class="attr">p:teacher-ref</span>=<span class="string">&quot;t03&quot;</span> <span class="attr">p:teacher.tname</span>=<span class="string">&quot;刀白凤&quot;</span> <span class="attr">p:teacher.tid</span>=<span class="string">&quot;t03&quot;</span> <span class="attr">p:teacher.age</span>=<span class="string">&quot;35&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><ol start="4"><li>属性是数组或集合类型</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 数组类型的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;s02&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.Stu&quot;</span> <span class="attr">p:sname</span>=<span class="string">&quot;钟灵&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookArr&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;b01&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;b02&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- List类型的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookList&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;b01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">&quot;b02&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Set类型的属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookSet&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>MySQL从删库到跑路<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>PHP是世界上最好的语言<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>21天精通C++<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Map类型的属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookMap&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;b01&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;b01&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;b02&quot;</span> <span class="attr">value-ref</span>=<span class="string">&quot;b02&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>集合类型的bean</li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 集合类型的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">util:list</span> <span class="attr">id</span>=<span class="string">&quot;list01&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>李四<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span>王五<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">util:list</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><h4 id="2-8-实验八：-高级特性：Bean的作用域"><a href="#2-8-实验八：-高级特性：Bean的作用域" class="headerlink" title="2.8 实验八： 高级特性：Bean的作用域"></a>2.8 实验八： 高级特性：Bean的作用域</h4><ol><li><p>Bean作用域概念</p><p><code>&lt;bean</code> 标签声明Bean，只是将Bean的信息配置给SpringIoC容器！</p><p>在IoC容器中，这些<code>&lt;bean</code>标签对应的信息转成Spring内部 <code>BeanDefinition</code> 对象，<code>BeanDefinition</code> 对象内，包含定义的信息（id,class,属性等等）！</p><p>这意味着，<code>BeanDefinition</code>与<code>类</code>概念一样，SpringIoC容器可以可以根据<code>BeanDefinition</code>对象反射创建多个Bean对象实例。</p><p>具体创建多少个Bean的实例对象，由Bean的作用域Scope属性指定！</p><p>默认情况：我们全局只需要实例化一个Bean对象，绝大情况我们也仅需创建一个对象！</p></li><li><p>常用作用域</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>singleton</td><td>在 IOC 容器中，这个 bean 的对象始终为单实例</td><td>IOC 容器初始化时</td><td>是</td></tr><tr><td>prototype</td><td>这个 bean 在 IOC 容器中有多个实例</td><td>获取 bean 时</td><td>否</td></tr></tbody></table><p>如果是在WebApplicationContext环境下还会有另外两个作用域（但不常用）：</p><table><thead><tr><th>取值</th><th>含义</th><th>创建对象的时机</th><th>默认值</th></tr></thead><tbody><tr><td>request</td><td>请求范围内有效的实例</td><td>每次请求</td><td>否</td></tr><tr><td>session</td><td>会话范围内有效的实例</td><td>每次会话</td><td>否</td></tr></tbody></table></li><li><p>作用域配置和测试</p><p>配置scope范围</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--bean的作用域 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值singleton（默认值），bean在IOC容器中只有一个实例，IOC容器初始化时创建对象 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- scope属性：取值prototype，bean在IOC容器中可以有多个实例，getBean()时创建对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyMachine8&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;prototype&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyMachine&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;machineName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;happyMachine&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;happyComponent8&quot;</span> <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.ioc.HappyComponent&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;componentName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;happyComponent&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试读取</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment08</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-08.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">HappyMachine</span> <span class="variable">bean</span> <span class="operator">=</span> iocContainer.getBean(HappyMachine.class);</span><br><span class="line">    <span class="type">HappyMachine</span> <span class="variable">bean1</span> <span class="operator">=</span> iocContainer.getBean(HappyMachine.class);</span><br><span class="line">    <span class="comment">//多例对比 false</span></span><br><span class="line">    System.out.println(bean == bean1);</span><br><span class="line"></span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">bean2</span> <span class="operator">=</span> iocContainer.getBean(HappyComponent.class);</span><br><span class="line">    <span class="type">HappyComponent</span> <span class="variable">bean3</span> <span class="operator">=</span> iocContainer.getBean(HappyComponent.class);</span><br><span class="line">    <span class="comment">//单例对比 true</span></span><br><span class="line">    System.out.println(bean2 == bean3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="2-9-实验九：-高级特性：Bean的生命周期"><a href="#2-9-实验九：-高级特性：Bean的生命周期" class="headerlink" title="2.9 实验九： 高级特性：Bean的生命周期"></a>2.9 实验九： 高级特性：Bean的生命周期</h4><ol><li><p>理解Bean的生命周期作用</p><p>Spring Framework的Bean生命周期是指一个Bean对象从它的创建、初始化到销毁的整个过程。</p><p>理解Spring Bean的生命周期可以帮助开发者更好地管理Bean，可以实现以下目的：</p><ol><li>避免重复初始化Bean，提高Bean实例化的效率；</li><li>在Bean初始化前后做些额外的处理，如日志记录、权限检查等；</li><li>实现自定义的操作，如在Bean销毁时释放资源、设置缓存等；</li><li>理解Bean的整个生命周期有助于排查问题，提高应用程序的可维护性；</li><li>理解Spring Aop 等功能的实现原理，并参与定制过程；</li></ol></li><li><p>Bean生命周期清单和步骤内容</p><p><img src="image_sKHAcPhrGZ.png"></p><p>Spring Bean 的生命周期指从 Spring 容器创建 Bean 实例开始，到 Bean 销毁的整个过程，可以按照以下流程分为以下几个阶段：</p><ol><li><p>实例化Bean实例：Spring 容器使用指定的实例化策略创建 bean，该策略可以是无参构造、工厂方法等。当 Spring 加载 Bean 的配置文件并且 Bean 标签被解析后，这个类（Bean）就会被实例化。</p></li><li><p>Bean实例属性设置：Spring 通过调用 setter 方法或直接设置字段的方式来注入 Bean 的属性。</p></li><li><p>Aware 相关接口的回调：Spring 通过 Aware 接口来把一些 Bean 相关的资源注入到 Bean 中。例如，BeanNameAware 接口可获取到 Bean 的名称；ApplicationContextAware 接口可获取到 ApplicationContext 对象实例；BeanFactoryAware 接口可获取到 BeanFactory 对象实例等。</p></li><li><p>Bean初始化前的操作：在 Bean 的初始化之前，Spring 允许用户自定义 Bean 实例化后的一些操作。</p><ul><li>如果有BeanPostProcessor注册，先执行beforeInitialization()方法；</li><li>如果Bean实现了InitializingBean接口，则执行afterPropertiesSet()方法</li></ul></li><li><p>Bean 的初始化方法调用：如果在配置文件中使用init-method属性声明了初始化方法，则执行该方法；</p></li><li><p>Bean初始化后的操作：在 Bean 的初始化之后，如果有BeanPostProcessors注册，执行afterInitialization()方法；</p><p>此方法中，Bean实例已经完成了实例化和初始化工作，最终会将afterInitialization（）方法修改后返回的对象存储到IoC容器中！</p><p>Spring Aop的实现，通过定义BeanPostProcessor(AbstractAutoProxyCreator)，在后置方法中添加动态代理技术，进行Bean的动态代理对象生成！</p></li><li><p>使用 Bean：即在 IoC 容器中调用 getBean() 方法获取 Bean 实例，使用 Bean 的过程。</p></li><li><p>销毁 Bean：当 Bean 不再被使用时，Spring 容器会自动释放 Bean 占有的资源，关闭 IoC 容器。 开发人员可以自己实现 DisposableBean 接口或者为 Bean 配置一个指定的 destroy-method 方法来实现自定义销毁的逻辑。</p></li><li><p>关闭IoC容器<br>在整个生命周期过程中，Spring 提供了各种监听器和钩子函数，允许开发人员在不同的 Bean 生命周期阶段添加自己的处理逻辑以实现更加灵活和智能的控制。</p></li></ol></li><li><p>参与Bean生命周期定义</p><ol><li><p>测试 BeanPostProcessor 接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBeanPostProcessor</span> <span class="keyword">implements</span> <span class="title class_">BeanPostProcessor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessBeforeInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanPostProcessor.postProcessBeforeInitialization&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;bean = &quot;</span> + bean + <span class="string">&quot;, beanName = &quot;</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">postProcessAfterInitialization</span><span class="params">(Object bean, String beanName)</span> <span class="keyword">throws</span> BeansException &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;MyBeanPostProcessor.postProcessAfterInitialization&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;bean = &quot;</span> + bean + <span class="string">&quot;, beanName = &quot;</span> + beanName);</span><br><span class="line">        <span class="keyword">return</span> bean;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试 init-method &#x2F; destroy-method 配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 声明BeanPostProcessor处理器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.lifecycle.MyBeanPostProcessor&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 声明bean,并且指定初始化和销毁方法</span></span><br><span class="line"><span class="comment">              init-method 指定初始化方法</span></span><br><span class="line"><span class="comment">              destroy-method 指定销毁方法</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myBean&quot;</span>  <span class="attr">class</span>=<span class="string">&quot;com.wzb.lifecycle.MyBean&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>测试读取配置即可</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testExperiment09</span><span class="params">()</span>  &#123;</span><br><span class="line">    <span class="type">ApplicationContext</span> <span class="variable">iocContainer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-bean-09.xml&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol></li></ol><h3 id="3-基于-注解-方式管理-Bean"><a href="#3-基于-注解-方式管理-Bean" class="headerlink" title="3. 基于 注解 方式管理 Bean"></a>3. 基于 注解 方式管理 Bean</h3><h4 id="3-1-实验一：-Bean注解标记和扫描-IoC"><a href="#3-1-实验一：-Bean注解标记和扫描-IoC" class="headerlink" title="3.1 实验一： Bean注解标记和扫描(IoC)"></a>3.1 实验一： Bean注解标记和扫描(IoC)</h4><ol><li><p><strong>注解理解</strong></p><p>和 XML 配置文件一样，注解本身并不能执行，注解本身仅仅只是做一个标记，具体的功能是框架检测到注解标记的位置，然后针对这个位置按照注解标记的功能来执行具体操作。</p><p>本质上：所有一切的操作都是 Java 代码来完成的，XML 和注解只是告诉框架中的 Java 代码如何执行。</p><p>举例：元旦联欢会要布置教室，蓝色的地方贴上元旦快乐四个字，红色的地方贴上拉花，黄色的地方贴上气球。</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img015.a6b65329.png"></p><p>班长做了所有标记，同学们来完成具体工作。墙上的标记相当于我们在代码中使用的注解，后面同学们做的工作，相当于框架的具体操作。</p></li><li><p><strong>扫描理解</strong></p><p>Spring 为了知道程序员在哪些地方标记了什么注解，就需要通过扫描的方式，来进行检测。然后根据注解进行后续操作。</p></li><li><p><strong>准备Spring项目和组件</strong></p><ol><li><p>准备项目pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>准备组件类</p><p>普通组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 普通的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Controller组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: controller类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Service组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: service类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Dao组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: dao类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>组件添加标记注解</strong></p><ol><li><p>组件标记注解和区别</p><p>Spring 提供了以下多个注解，这些注解可以直接标注在 Java 类上，将它们定义成 Spring Bean。</p><table><thead><tr><th>注解</th><th>说明</th></tr></thead><tbody><tr><td>@Component</td><td>该注解用于描述 Spring 中的 Bean，它是一个泛化的概念，仅仅表示容器中的一个组件（Bean），并且可以作用在应用的任何层次，例如 Service 层、Dao 层等。 使用时只需将该注解标注在相应类上即可。</td></tr><tr><td>@Repository</td><td>该注解用于将数据访问层（Dao 层）的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Service</td><td>该注解通常作用在业务层（Service 层），用于将业务层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr><tr><td>@Controller</td><td>该注解通常作用在控制层（如SpringMVC 的 Controller），用于将控制层的类标识为 Spring 中的 Bean，其功能与 @Component 相同。</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="meta">@Target(ElementType.TYPE)</span></span><br><span class="line">   <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">   <span class="meta">@Documented</span></span><br><span class="line">   <span class="meta">@Component</span></span><br><span class="line">   <span class="keyword">public</span> <span class="meta">@interface</span> Controller &#123;</span><br><span class="line">   </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * The value may indicate a suggestion for a logical component name,</span></span><br><span class="line"><span class="comment">    * to be turned into a Spring bean in case of an autodetected component.</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> the suggested component name, if any (or empty String otherwise)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="meta">@AliasFor(annotation = Component.class)</span></span><br><span class="line">   String <span class="title function_">value</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">   </span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ol><p>通过查看源码我们得知，@Controller、@Service、@Repository这三个注解只是在@Component注解的基础上起了三个新的名字。</p><pre><code>对于Spring使用IOC容器管理这些组件来说没有区别，也就是语法层面没有区别。所以@Controller、@Service、@Repository这三个注解只是给开发人员看的，让我们能够便于分辨组件的作用。注意：虽然它们本质上一样，但是为了代码的可读性、程序结构严谨！我们肯定不能随便胡乱标记。</code></pre><ol start="2"><li><p>使用注解标记</p><p>普通组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 普通的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Controller组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: controller类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Service组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: service类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxService</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Dao组件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: dao类型组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p><strong>配置文件确定扫描范围</strong></p><p>情况1：基本扫描配置</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.包要精准,提高性能!</span></span><br><span class="line"><span class="comment">         2.会扫描指定的包和子包内容</span></span><br><span class="line"><span class="comment">         3.多个包可以使用,分割 例如: com.wzb.controller,com.wzb.service等</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.components&quot;</span>/&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情况2：指定排除组件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 情况三：指定不扫描的组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.components&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- context:exclude-filter标签：指定排除规则 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- type属性：指定根据什么来进行排除，annotation取值表示根据注解来排除 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- expression属性：指定排除规则的表达式，对于注解来说指定全类名即可 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure><p>情况3：指定扫描组件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 情况四：仅扫描指定的组件 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 仅扫描 = 关闭默认规则 + 追加规则 --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- use-default-filters属性：取值false表示关闭默认扫描规则 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.ioc.components&quot;</span> <span class="attr">use-default-filters</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- context:include-filter标签：指定在原有扫描规则的基础上追加的规则 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">&quot;annotation&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;org.springframework.stereotype.Controller&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>组件BeanName问题</strong></p><p>在我们使用 XML 方式管理 bean 的时候，每个 bean 都有一个唯一标识——id 属性的值，便于在其他地方引用。现在使用注解后，每个组件仍然应该有一个唯一标识。</p><p>默认情况：</p><p>类名首字母小写就是 bean 的 id。例如：SoldierController 类对应的 bean 的 id 就是 soldierController。</p><p>使用value属性指定：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当注解中只设置一个属性时，value属性的属性名可以省略：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smallDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>总结</strong></p><ol><li>注解方式IoC只是标记哪些类要被Spring管理</li><li>最终，我们还需要XML方式或者后面讲解Java配置类方式指定注解生效的包</li><li><strong>现阶段配置方式为 注解 （标记）+ XML（扫描）</strong></li></ol></li></ol><h4 id="3-2-实验二：-Bean属性赋值：引用类型自动装配-DI"><a href="#3-2-实验二：-Bean属性赋值：引用类型自动装配-DI" class="headerlink" title="3.2 实验二： Bean属性赋值：引用类型自动装配(DI)"></a>3.2 实验二： Bean属性赋值：引用类型自动装配(DI)</h4><ol><li><p><strong>设定场景</strong></p><ul><li>SoldierController 需要 SoldierService</li><li>SoldierService 需要 SoldierDao<br>&#x20; 同时在各个组件中声明要调用的方法。</li><li>SoldierController中声明方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierService.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>SoldierService中声明方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smallDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> SoldierDao soldierDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierDao.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>SoldierDao中声明方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.print(<span class="string">&quot;I am a soldier&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>自动装配实现</strong></p><ol><li><p>前提</p><p>参与自动装配的组件（需要装配、被装配）全部都必须在IoC容器中。</p></li><li><p>@Autowired注解</p></li></ol><p>在成员变量上直接标记@Autowired注解即可，不需要提供setXxx()方法。以后我们在项目中的正式用法就是这样。<br>3.  给Controller装配Service<br>    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierService.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>4.  给Service装配Dao<br>    <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smallDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SoldierDao soldierDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierDao.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></li><li><p><strong>@Autowired注解细节</strong></p><ol><li><p>标记位置</p></li><li><p>成员变量</p><p>这是最主要的使用方式！</p><pre><code>与xml进行bean ref引用不同，他不需要有set方法！<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service(&quot;smallDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> SoldierDao soldierDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getMessage</span><span class="params">()</span> &#123;</span><br><span class="line">        soldierDao.getMessage();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="2"><li>构造器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SoldierController</span><span class="params">(SoldierService soldierService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldierService = soldierService;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure></li><li>setXxx()方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> SoldierService soldierService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSoldierService</span><span class="params">(SoldierService soldierService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.soldierService = soldierService;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure></li></ol></li></ol></li><li><p>工作流程</p><pre><code>![](http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img018.2ff0ae09.png)-   首先根据所需要的组件类型到 IOC 容器中查找    -   能够找到唯一的 bean：直接执行装配    -   如果完全找不到匹配这个类型的 bean：装配失败    -   和所需类型匹配的 bean 不止一个        -   没有 @Qualifier 注解：根据 @Autowired 标记位置成员变量的变量名作为 bean 的 id 进行匹配            -   能够找到：执行装配            -   找不到：装配失败        -   使用 @Qualifier 注解：根据 @Qualifier 注解中指定的名称作为 bean 的id进行匹配            -   能够找到：执行装配            -   找不到：装配失败<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="meta">@Qualifier(value = &quot;maomiService222&quot;)</span></span><br><span class="line">    <span class="comment">// 根据面向接口编程思想，使用接口类型引入Service组件</span></span><br><span class="line">    <span class="keyword">private</span> ISoldierService soldierService;</span><br></pre></td></tr></table></figure></code></pre></li><li><p><strong>佛系装配</strong></p><p>给 @Autowired 注解设置 required &#x3D; false 属性表示：能装就装，装不上就不装。但是实际开发时，基本上所有需要装配组件的地方都是必须装配的，用不上这个属性</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller(value = &quot;tianDog&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SoldierController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 给@Autowired注解设置required = false属性表示：能装就装，装不上就不装</span></span><br><span class="line">    <span class="meta">@Autowired(required = false)</span></span><br><span class="line">    <span class="keyword">private</span> ISoldierService soldierService;</span><br></pre></td></tr></table></figure></li><li><p><strong>扩展JSR-250注解@Resource</strong></p></li></ol><ul><li><p>理解JSR系列注解</p><pre><code>JSR（Java Specification Requests）是Java平台标准化进程中的一种技术规范，而JSR注解是其中一部分重要的内容。按照JSR的分类以及注解语义的不同，可以将JSR注解分为不同的系列，主要有以下几个系列：1.  JSR-175: 这个JSR是Java SE 5引入的，是Java注解最早的规范化版本，Java SE 5后的版本中都包含该JSR中定义的注解。主要包括以下几种标准注解：-   `@Deprecated`: 标识一个程序元素（如类、方法或字段）已过时，并且在将来的版本中可能会被删除。-   `@Override`: 标识一个方法重写了父类中的方法。-   `@SuppressWarnings`: 抑制编译时产生的警告消息。-   `@SafeVarargs`: 标识一个有安全性警告的可变参数方法。-   `@FunctionalInterface`: 标识一个接口只有一个抽象方法，可以作为lambda表达式的目标。1.  JSR-250: 这个JSR主要用于在Java EE 5中定义一些支持注解。该JSR主要定义了一些用于进行对象管理的注解，包括：-   `@Resource`: 标识一个需要注入的资源，是实现Java EE组件之间依赖关系的一种方式。-   `@PostConstruct`: 标识一个方法作为初始化方法。-   `@PreDestroy`: 标识一个方法作为销毁方法。-   `@Resource.AuthenticationType`: 标识注入的资源的身份验证类型。-   `@Resource.AuthenticationType`: 标识注入的资源的默认名称。1.  JSR-269: 这个JSR主要是Java SE 6中引入的一种支持编译时元数据处理的框架，即使用注解来处理Java源文件。该JSR定义了一些可以用注解标记的注解处理器，用于生成一些元数据，常用的注解有：-   `@SupportedAnnotationTypes`: 标识注解处理器所处理的注解类型。-   `@SupportedSourceVersion`: 标识注解处理器支持的Java源码版本。1.  JSR-330: 该JSR主要为Java应用程序定义了一个依赖注入的标准，即Java依赖注入标准（javax.inject）。在此规范中定义了多种注解，包括：-   `@Named`: 标识一个被依赖注入的组件的名称。-   `@Inject`: 标识一个需要被注入的依赖组件。-   `@Singleton`: 标识一个组件的生命周期只有一个唯一的实例。1.  JSR-250: 这个JSR主要是Java EE 5中定义一些支持注解。该JSR包含了一些支持注解，可以用于对Java EE组件进行管理，包括：-   `@RolesAllowed`: 标识授权角色-   `@PermitAll`: 标识一个活动无需进行身份验证。-   `@DenyAll`: 标识不提供针对该方法的访问控制。-   `@DeclareRoles`: 声明安全角色。    但是你要理解JSR是Java提供的**技术规范**，也就是说，他只是规定了注解和注解的含义，**JSR并不是直接提供特定的实现**，而是提供标准和指导方针，由第三方框架（Spring）和库来实现和提供对应的功能。</code></pre></li><li><p>JSR-250 @Resource注解</p><pre><code>@Resource注解也可以完成属性注入。那它和@Autowired注解有什么区别？-   @Resource注解是JDK扩展包中的，也就是说属于JDK的一部分。所以该注解是标准注解，更加具有通用性。(JSR-250标准中制定的注解类型。JSR是Java规范提案。)-   @Autowired注解是Spring框架自己的。-   **@Resource注解默认根据Bean名称装配，未指定name时，使用属性名作为name。通过name找不到的话会自动启动通过类型装配。**-   **@Autowired注解默认根据类型装配，如果想根据名称装配，需要配合@Qualifier注解一起用。**-   @Resource注解用在属性上、setter方法上。-   @Autowired注解用在属性上、setter方法上、构造方法上、构造方法参数上。    @Resource注解属于JDK扩展包，所以不在JDK当中，需要额外引入以下依赖：【**如果是JDK8的话不需要额外引入依赖。高于JDK11或低于JDK8需要引入以下依赖。**】<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></code></pre><ul><li>@Resource使用<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">XxxController</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 1. 如果没有指定name,先根据属性名查找IoC中组件xxxService</span></span><br><span class="line"><span class="comment">     * 2. 如果没有指定name,并且属性名没有对应的组件,会根据属性类型查找</span></span><br><span class="line"><span class="comment">     * 3. 可以指定name名称查找!  <span class="doctag">@Resource</span>(name=&#x27;test&#x27;) == <span class="doctag">@Autowired</span> + <span class="doctag">@Qualifier</span>(value=&#x27;test&#x27;)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> XxxService xxxService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Resource(name = &quot;指定beanName&quot;)</span></span><br><span class="line"><span class="comment">//private XxxService xxxService;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;XxxController.show&quot;</span>);</span><br><span class="line">        xxxService.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><h4 id="3-3-实验三：-Bean属性赋值：基本类型属性赋值-DI"><a href="#3-3-实验三：-Bean属性赋值：基本类型属性赋值-DI" class="headerlink" title="3.3 实验三： Bean属性赋值：基本类型属性赋值(DI)"></a>3.3 实验三： Bean属性赋值：基本类型属性赋值(DI)</h4><p><code>@Value</code> 通常用于注入外部化属性</p><p><strong>声明外部配置</strong></p><p>application.properties</p><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">catalog.name</span>=<span class="string">MovieCatalog</span></span><br></pre></td></tr></table></figure><p><strong>xml引入外部配置</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 引入外部配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;application.properties&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p><strong>@Value注解读取配置</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.components;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.components</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 普通的组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonComponent</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 情况1: $&#123;key&#125; 取外部配置key对应的值!</span></span><br><span class="line"><span class="comment">     * 情况2: $&#123;key:defaultValue&#125; 没有key,可以给与默认值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;catalog:默认值&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="4-基于-配置类-方式管理-Bean"><a href="#4-基于-配置类-方式管理-Bean" class="headerlink" title="4. 基于 配置类 方式管理 Bean"></a>4. 基于 配置类 方式管理 Bean</h3><h4 id="4-1-完全注解开发理解"><a href="#4-1-完全注解开发理解" class="headerlink" title="4.1 完全注解开发理解"></a>4.1 完全注解开发理解</h4><p>Spring 完全注解配置（Fully Annotation-based Configuration）是指通过 Java配置类 代码来配置 Spring 应用程序，使用注解来替代原本在 XML 配置文件中的配置。相对于 XML 配置，完全注解配置具有更强的类型安全性和更好的可读性。</p><p><strong>两种方式思维转化</strong>：</p><p><img src="Spring%E4%BC%81%E4%B8%9A%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6%5CSpring%E4%BC%81%E4%B8%9A%E5%BC%80%E5%8F%91%E6%A0%B8%E5%BF%83%E6%A1%86%E6%9E%B6.png"></p><h4 id="4-2-实验一：配置类和扫描注解"><a href="#4-2-实验一：配置类和扫描注解" class="headerlink" title="4.2 实验一：配置类和扫描注解"></a>4.2 实验一：配置类和扫描注解</h4><p><strong>xml+注解方式</strong></p><p>配置文件application.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置自动扫描的包 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.包要精准,提高性能!</span></span><br><span class="line"><span class="comment">         2.会扫描指定的包和子包内容</span></span><br><span class="line"><span class="comment">         3.多个包可以使用,分割 例如: com.wzb.controller,com.wzb.service等</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb.components&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部配置文件--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;application.properties&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>测试创建IoC容器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// xml方式配置文件使用ClassPathXmlApplicationContext容器读取</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;application.xml&quot;</span>);</span><br></pre></td></tr></table></figure><p><strong>配置类+注解方式（完全注解方式）</strong></p><p>配置类</p><p>使用 @Configuration 注解将一个普通的类标记为 Spring 的配置类。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.ComponentScan;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.PropertySource;</span><br><span class="line"></span><br><span class="line"><span class="comment">//标注当前类是配置类，替代application.xml    </span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//使用注解读取外部配置，替代 &lt;context:property-placeholder标签</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:application.properties&quot;)</span></span><br><span class="line"><span class="comment">//使用@ComponentScan注解,可以配置扫描包,替代&lt;context:component-scan标签</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.wzb.components&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试创建IoC容器</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// AnnotationConfigApplicationContext 根据配置类创建 IOC 容器对象</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">iocContainerAnnotation</span> <span class="operator">=</span> </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(MyConfiguration.class);</span><br></pre></td></tr></table></figure><p><strong>总结：</strong></p><p>@Configuration指定一个类为配置类，可以添加配置注解，替代配置xml文件</p><p>@ComponentScan(basePackages &#x3D; {“包”,”包”}) 替代&lt;context:component-scan标签实现注解扫描</p><p>@PropertySource(“classpath:配置文件地址”) 替代 &lt;context:property-placeholder标签</p><p>配合IoC&#x2F;DI注解，可以进行完整注解开发！</p><h4 id="4-3-实验二：-Bean定义组件"><a href="#4-3-实验二：-Bean定义组件" class="headerlink" title="4.3 实验二：@Bean定义组件"></a>4.3 实验二：@Bean定义组件</h4><p><strong>场景需求</strong>：将Druid连接池对象存储到IoC容器</p><p><strong>需求分析</strong>：第三方jar包的类，添加到ioc容器，无法使用@Component等相关注解！因为源码jar包内容为只读模式！</p><p><strong>xml方式实现</strong>：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 引入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 实验六 [重要]给bean的属性赋值：引入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.user&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>配置类方式实现</strong>：</p><p><code>@Bean</code> 注释用于指示方法实例化、配置和初始化要由 Spring IoC 容器管理的新对象。对于那些熟悉 Spring 的 <code>&lt;beans/&gt;</code> XML 配置的人来说， <code>@Bean</code> 注释与 <code>&lt;bean/&gt;</code> 元素起着相同的作用。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//标注当前类是配置类，替代application.xml    </span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//引入jdbc.properties文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:application.properties&quot;,&quot;classpath:jdbc.properties&quot;&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &#123;&quot;com.wzb.components&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfiguration</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果第三方类进行IoC管理,无法直接使用@Component相关注解</span></span><br><span class="line">    <span class="comment">//解决方案: xml方式可以使用&lt;bean标签</span></span><br><span class="line">    <span class="comment">//解决方案: 配置类方式,可以使用方法返回值+@Bean注解</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">createDataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;jdbc.user&#125;&quot;)</span> String username,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span>String password,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span>String url,</span></span><br><span class="line"><span class="params">                                       <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span>String driverClassName)</span>&#123;</span><br><span class="line">        <span class="comment">//使用Java代码实例化</span></span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setDriverClassName(driverClassName);</span><br><span class="line">        <span class="comment">//返回结果即可</span></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-4-实验三：高级特性：-Bean注解细节"><a href="#4-4-实验三：高级特性：-Bean注解细节" class="headerlink" title="4.4 实验三：高级特性：@Bean注解细节"></a>4.4 实验三：高级特性：@Bean注解细节</h4><ol><li><p><strong>@Bean生成BeanName问题</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Bean &#123;</span><br><span class="line">    <span class="comment">//前两个注解可以指定Bean的标识</span></span><br><span class="line">    <span class="meta">@AliasFor(&quot;name&quot;)</span></span><br><span class="line">    String[] value() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">    <span class="meta">@AliasFor(&quot;value&quot;)</span></span><br><span class="line">    String[] name() <span class="keyword">default</span> &#123;&#125;;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//autowireCandidate 属性来指示该 Bean 是否候选用于自动装配。</span></span><br><span class="line">    <span class="comment">//autowireCandidate 属性默认值为 true，表示该 Bean 是一个默认的装配目标，</span></span><br><span class="line">    <span class="comment">//可被候选用于自动装配。如果将 autowireCandidate 属性设置为 false，则说明该 Bean 不是默认的装配目标，不会被候选用于自动装配。</span></span><br><span class="line"><span class="type">boolean</span> <span class="title function_">autowireCandidate</span><span class="params">()</span> <span class="keyword">default</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定初始化方法</span></span><br><span class="line">    String <span class="title function_">initMethod</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="comment">//指定销毁方法</span></span><br><span class="line">    String <span class="title function_">destroyMethod</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;(inferred)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>指定@Bean的名称：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean(&quot;myThing&quot;)</span> <span class="comment">//指定名称</span></span><br><span class="line">  <span class="keyword">public</span> Thing <span class="title function_">thing</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Thing</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>@Bean</code> 注释注释方法。使用此方法在指定为方法返回值的类型的 <code>ApplicationContext</code> 中注册 Bean 定义。缺省情况下，<strong>Bean 名称与方法名称相同</strong>。下面的示例演示 <code>@Bean</code> 方法声明：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> TransferServiceImpl <span class="title function_">transferService</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransferServiceImpl</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>前面的配置完全等同于下面的Spring XML：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;beans&gt;</span><br><span class="line">  &lt;bean id=<span class="string">&quot;transferService&quot;</span> class=<span class="string">&quot;com.acme.TransferServiceImpl&quot;</span>/&gt;</span><br><span class="line">&lt;/beans&gt;</span><br></pre></td></tr></table></figure></li><li><p><strong>@Bean 初始化和销毁方法指定</strong></p><p><code>@Bean</code> 注解支持指定任意初始化和销毁回调方法，非常类似于 Spring XML 在 <code>bean</code> 元素上的 <code>init-method</code> 和 <code>destroy-method</code> 属性，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanOne</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// initialization logic</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><p>public class BeanTwo {</p><pre><code>  public void cleanup() {    // destruction logic  }</code></pre><p>}</p><pre><code>@Configuration</code></pre><p>public class AppConfig {</p><pre><code>  @Bean(initMethod = &quot;init&quot;)  public BeanOne beanOne() {    return new BeanOne();</code></pre><p>  }</p><pre><code>  @Bean(destroyMethod = &quot;cleanup&quot;)  public BeanTwo beanTwo() {    return new BeanTwo();  }}<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">3.  **@Bean Scope作用域**</span><br><span class="line"></span><br><span class="line">    可以指定使用 `@Bean` 注释定义的 bean 应具有特定范围。您可以使用在 Bean 作用域部分中指定的任何标准作用域。</span><br><span class="line"></span><br><span class="line">    默认作用域为 `singleton` ，但您可以使用 `@Scope` 注释覆盖此范围，如以下示例所示：</span><br><span class="line">    ```java</span><br><span class="line">    @Configuration</span><br><span class="line">    public class MyConfiguration &#123;</span><br><span class="line">    </span><br><span class="line">      @Bean</span><br><span class="line">      @Scope(&quot;prototype&quot;)</span><br><span class="line">      public Encryptor encryptor() &#123;</span><br><span class="line">        // ...</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre><ol start="4"><li><p><strong>@Bean方法之间依赖</strong></p><p><strong>准备组件</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyMachine</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String machineName;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMachineName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> machineName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMachineName</span><span class="params">(String machineName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.machineName = machineName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HappyComponent</span> &#123;</span><br><span class="line">    <span class="comment">//引用新组件</span></span><br><span class="line">    <span class="keyword">private</span> HappyMachine happyMachine;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">getHappyMachine</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setHappyMachine</span><span class="params">(HappyMachine happyMachine)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.happyMachine = happyMachine;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doWork</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;HappyComponent.doWork&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Java配置类实现：</strong></p><p>方案1：</p><p>直接调用方法返回 Bean 实例：在一个 <code>@Bean</code> 方法中直接调用其他 <code>@Bean</code> 方法来获取 Bean 实例，虽然是方法调用，也是通过IoC容器获取对应的Bean，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">happyMachine</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HappyMachine</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyComponent <span class="title function_">happyComponent</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyComponent</span>();</span><br><span class="line">        <span class="comment">//直接调用方法即可! </span></span><br><span class="line">        happyComponent.setHappyMachine(happyMachine());</span><br><span class="line">        <span class="keyword">return</span> happyComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方案2：</p><p>参数引用法：通过方法参数传递 Bean 实例的引用来解决 Bean 实例之间的依赖关系，例如：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wzb.ioc.HappyComponent;</span><br><span class="line"><span class="keyword">import</span> com.wzb.ioc.HappyMachine;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.config</span></span><br><span class="line"><span class="comment"> * description: 配置HappyComponent和HappyMachine关系</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JavaConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyMachine <span class="title function_">happyMachine</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HappyMachine</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 可以直接在形参列表接收IoC容器中的Bean!</span></span><br><span class="line"><span class="comment">     *    情况1: 直接指定类型即可</span></span><br><span class="line"><span class="comment">     *    情况2: 如果有多个bean,(HappyMachine 名称 ) 形参名称等于要指定的bean名称!</span></span><br><span class="line"><span class="comment">     *           例如:</span></span><br><span class="line"><span class="comment">     *               <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">     *               public Foo foo1()&#123;</span></span><br><span class="line"><span class="comment">     *                   return new Foo();</span></span><br><span class="line"><span class="comment">     *               &#125;</span></span><br><span class="line"><span class="comment">     *               <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">     *               public Foo foo2()&#123;</span></span><br><span class="line"><span class="comment">     *                   return new Foo()</span></span><br><span class="line"><span class="comment">     *               &#125;</span></span><br><span class="line"><span class="comment">     *               <span class="doctag">@Bean</span></span></span><br><span class="line"><span class="comment">     *               public Component component(Foo foo1 , Foo foo2 通过此处指定引入的bean)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> HappyComponent <span class="title function_">happyComponent</span><span class="params">(HappyMachine happyMachine)</span>&#123;</span><br><span class="line">        <span class="type">HappyComponent</span> <span class="variable">happyComponent</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HappyComponent</span>();</span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        happyComponent.setHappyMachine(happyMachine);</span><br><span class="line">        <span class="keyword">return</span> happyComponent;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="4-5-实验四：高级特性：-Import扩展"><a href="#4-5-实验四：高级特性：-Import扩展" class="headerlink" title="4.5 实验四：高级特性：@Import扩展"></a>4.5 实验四：高级特性：@Import扩展</h4><p><code>@Import</code> 注解允许从另一个配置类加载 <code>@Bean</code> 定义，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigA</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> A <span class="title function_">a</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">A</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@Import(ConfigA.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConfigB</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="keyword">public</span> B <span class="title function_">b</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，在实例化上下文时不需要同时指定 <code>ConfigA.class</code> 和 <code>ConfigB.class</code> ，只需显式提供 <code>ConfigB</code> ，如以下示例所示：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(ConfigB.class);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// now both beans A and B will be available...</span></span><br><span class="line">  <span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> ctx.getBean(A.class);</span><br><span class="line">  <span class="type">B</span> <span class="variable">b</span> <span class="operator">=</span> ctx.getBean(B.class);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此方法简化了容器实例化，因为只需要处理一个类，而不是要求您在构造期间记住可能大量的 <code>@Configuration</code> 类。</p><h4 id="4-6-实验五：高级特性：-Conditional扩展-了解"><a href="#4-6-实验五：高级特性：-Conditional扩展-了解" class="headerlink" title="4.6 实验五：高级特性：@Conditional扩展(了解)"></a>4.6 实验五：高级特性：@Conditional扩展(了解)</h4><ol><li><p><strong>@Conditional介绍</strong></p><p>@Conditional是Spring4新提供的注解，能够根据一定的条件进行判断，满足条件就给容器注入bean。</p><p>了解@Conditional辅助我们更灵活的进行Bean注入和更好的解读SpringBoot源码！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(&#123;ElementType.TYPE, ElementType.METHOD&#125;)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Conditional &#123;</span><br><span class="line">  Class&lt;? <span class="keyword">extends</span> <span class="title class_">Condition</span>&gt;[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从代码中可以看到，需要传入一个Class数组,并且需要继承Condition接口：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">  <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext var1, AnnotatedTypeMetadata var2)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Condition是一个接口,返回true就注入bean，false则不注入。如果有多个实现类，必须全部满足方可注入！</p></li><li><p><strong>@Conditional 使用示例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">User</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;User&#123;&quot;</span> + <span class="string">&quot;name=&quot;</span> + name + <span class="string">&quot;, age=&quot;</span> + age + <span class="string">&quot;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// getter/setter方法省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编写配置类BeanConfig,注入两个User实例:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Bean(name = &quot;bill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user1</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Bill Gates&quot;</span>, <span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Bean(name = &quot;linus&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user2</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Linus&quot;</span>, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>编写测试类，查看User实例是否注入:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionalTest</span> &#123;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span></span><br><span class="line">              <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(BeanConfig.class);</span><br><span class="line">      <span class="comment">//根据类型,获取全部bean,返回 id - bean实例 组成的map!</span></span><br><span class="line">      Map&lt;String, User&gt; map = applicationContext.getBeansOfType(User.class);</span><br><span class="line">      System.out.println(map);</span><br><span class="line">  &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;bill=User&#123;name=Bill Gates, age=<span class="number">62</span>&#125;, linus=User&#123;name=Linus, age=<span class="number">48</span>&#125;&#125;</span><br></pre></td></tr></table></figure><p>这时候问题来了，如果我们想根据当前操作系统来注入User实例(windows系统下注入bill, linux系统下注入linus)，那么该怎么做呢？</p><p>这就需要我们用到@Conditional注解了。</p><p>首先我们先继承Condition接口，自定义判断条件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WindowsCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> conditionContext:判断条件能使用的上下文环境</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> annotatedTypeMetadata:注解所在位置的注解信息</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> &#123;</span><br><span class="line">      <span class="comment">//获取ioc使用的beanFactory</span></span><br><span class="line">        <span class="type">ConfigurableListableBeanFactory</span> <span class="variable">beanFactory</span> <span class="operator">=</span> conditionContext.getBeanFactory();</span><br><span class="line">        <span class="comment">//获取类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> conditionContext.getClassLoader();</span><br><span class="line">        <span class="comment">//获取当前环境信息</span></span><br><span class="line">        <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> conditionContext.getEnvironment();</span><br><span class="line">        <span class="comment">//获取bean定义的注册类</span></span><br><span class="line">        <span class="type">BeanDefinitionRegistry</span> <span class="variable">registry</span> <span class="operator">=</span> conditionContext.getRegistry();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取当前系统名</span></span><br><span class="line">         <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">        <span class="comment">//如果包含 Windows则说明是windows系统，返回true,否则返回false</span></span><br><span class="line">        <span class="keyword">if</span>(property.contains(<span class="string">&quot;Windows&quot;</span>)) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LinuxCondition</span> <span class="keyword">implements</span> <span class="title class_">Condition</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(ConditionContext conditionContext, AnnotatedTypeMetadata annotatedTypeMetadata)</span> &#123;</span><br><span class="line">    <span class="type">Environment</span> <span class="variable">environment</span> <span class="operator">=</span> conditionContext.getEnvironment();</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> environment.getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(property.contains(<span class="string">&quot;Linux&quot;</span>)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将上面配置的Condition子类传递给@Conditonal注解</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BeanConfig</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">//只有一个类时，大括号可以省略</span></span><br><span class="line">    <span class="meta">@Conditional(&#123;WindowsCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;bill&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user1</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Bill Gates&quot;</span>, <span class="number">62</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Conditional(&#123;LinuxCondition.class&#125;)</span></span><br><span class="line">    <span class="meta">@Bean(name = &quot;linus&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> User <span class="title function_">user2</span><span class="params">()</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;Linus&quot;</span>, <span class="number">48</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试:</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ConditionalTest</span> &#123;</span><br><span class="line">       <span class="meta">@Test</span></span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test1</span><span class="params">()</span> &#123;</span><br><span class="line">       <span class="type">AnnotationConfigApplicationContext</span> <span class="variable">applicationContext</span> <span class="operator">=</span> </span><br><span class="line">           <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(BeanConfig.class);</span><br><span class="line">       <span class="type">String</span> <span class="variable">osname</span> <span class="operator">=</span> applicationContext.getEnvironment().getProperty(<span class="string">&quot;os.name&quot;</span>);</span><br><span class="line">       System.out.println(<span class="string">&quot;当前系统为&quot;</span> + osname);</span><br><span class="line">       Map&lt;String, User&gt; map = applicationContext.getBeansOfType(User.class);</span><br><span class="line">       System.out.println(map);</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当前系统为Windows 10</span><br><span class="line">&#123;bill=User&#123;name=&#x27;Bill Gates&#x27;, age=62&#125;&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="5-三种配置方式总结"><a href="#5-三种配置方式总结" class="headerlink" title="5. 三种配置方式总结"></a>5. 三种配置方式总结</h3><h4 id="5-1-XML方式配置总结"><a href="#5-1-XML方式配置总结" class="headerlink" title="5.1 XML方式配置总结"></a>5.1 XML方式配置总结</h4><ol><li>所有内容写到xml格式配置文件中</li><li>声明bean通过&lt;bean标签</li><li>&lt;bean标签包含基本信息（id,class）和属性信息 &lt;property name value &#x2F; ref</li><li>引入外部的properties文件可以通过&lt;context:property-placeholder</li><li>IoC具体容器实现选择ClassPathXmlApplicationContext对象</li></ol><h4 id="5-2-XML-注解方式配置总结"><a href="#5-2-XML-注解方式配置总结" class="headerlink" title="5.2 XML+注解方式配置总结"></a>5.2 XML+注解方式配置总结</h4><ol><li>注解负责标记IoC的类和进行属性装配</li><li>xml文件依然需要，需要通过&lt;context:component-scan标签指定注解范围</li><li>标记IoC注解：@Component,@Service,@Controller,@Repository&#x20;</li><li>标记DI注解：@Autowired @Qualifier @Resource @Value</li><li>IoC具体容器实现选择ClassPathXmlApplicationContext对象</li></ol><h4 id="5-3-完全注解方式配置总结"><a href="#5-3-完全注解方式配置总结" class="headerlink" title="5.3 完全注解方式配置总结"></a>5.3 完全注解方式配置总结</h4><ol><li>完全注解方式指的是去掉xml文件，使用配置类 + 注解实现</li><li>xml文件替换成使用@Configuration注解标记的类</li><li>标记IoC注解：@Component,@Service,@Controller,@Repository&#x20;</li><li>标记DI注解：@Autowired @Qualifier @Resource @Value</li><li>&lt;context:component-scan标签指定注解范围使用@ComponentScan(basePackages &#x3D; {“com.wzb.components”})替代</li><li>&lt;context:property-placeholder引入外部配置文件使用@PropertySource({“classpath:application.properties”,”classpath:jdbc.properties”})替代</li><li>&lt;bean 标签使用@Bean注解和方法实现</li><li>IoC具体容器实现选择AnnotationConfigApplicationContext对象</li></ol><h3 id="6-整合Spring6-junit5搭建测试环境"><a href="#6-整合Spring6-junit5搭建测试环境" class="headerlink" title="6. 整合Spring6-junit5搭建测试环境"></a>6. 整合Spring6-junit5搭建测试环境</h3><ol><li><p>整合测试环境作用</p><p>好处1：不需要自己创建IOC容器对象了</p><p>好处2：任何需要的bean都可以在测试类中直接享受自动装配</p></li><li><p>导入相关依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>整合测试注解使用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringJUnitConfig(locations = &#123;&quot;classpath:spring-context.xml&quot;&#125;)  //指定配置文件xml</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(value = &#123;BeanConfig.class&#125;)</span>  <span class="comment">//指定配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Junit5IntegrationTest</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> User user;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testJunit5</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="五、Spring-AOP面向切面编程"><a href="#五、Spring-AOP面向切面编程" class="headerlink" title="五、Spring AOP面向切面编程"></a>五、Spring AOP面向切面编程</h2><h3 id="1-场景设定和问题复现"><a href="#1-场景设定和问题复现" class="headerlink" title="1. 场景设定和问题复现"></a>1. 场景设定和问题复现</h3><ol><li><p>准备AOP项目</p><p>项目名：spring-aop-annotation</p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>声明接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *       + - * / 运算的标准接口!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>接口实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.proxy;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现计算接口,单纯添加 + - * / 实现! 掺杂其他功能!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明带日志接口实现</p><p>新需求： 需要在每个方法中，添加控制台输出，输出参数和输出计算后的返回值！</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img002.f8e54219.png"></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 在每个方法中,输出传入的参数和计算后的返回结果!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorLogImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>代码问题分析</p><ol><li><p>代码缺陷</p><ul><li>对核心业务功能有干扰，导致程序员在开发核心业务功能时分散了精力</li><li>附加功能代码重复，分散在各个业务功能方法中！冗余，且不方便统一维护！</li></ul></li><li><p>解决思路</p><p>&#x20; 核心就是：解耦。我们需要把附加功能从业务功能代码中抽取出来。</p><p>&#x20; 将重复的代码统一提取，并且[[动态插入]]到每个业务方法！</p></li><li><p>技术困难</p><p>解决问题的困难：提取重复附加功能代码到一个类中，可以实现</p><p>但是如何将代码插入到各个方法中，我们不会，我们需要引用新技术！！！</p></li></ol></li></ol><h3 id="2-解决技术代理模式"><a href="#2-解决技术代理模式" class="headerlink" title="2. 解决技术代理模式"></a>2. 解决技术代理模式</h3><ol><li><p><strong>代理模式</strong></p><p>二十三种设计模式中的一种，属于结构型模式。它的作用就是通过提供一个代理类，让我们在调用目标方法的时候，不再是直接对目标方法进行调用，而是通过代理类间接调用。让不属于目标方法核心逻辑的代码从目标方法中剥离出来——解耦。调用目标方法时先调用代理对象的方法，减少对目标方法的调用和打扰，同时让附加功能能够集中在一起也有利于统一维护。</p><p>无代理场景：</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img004.e76b3080.png"></p><p>有代理场景：</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img005.74dd7746.png"></p><p>生活中的代理：</p><ul><li>广告商找大明星拍广告需要经过经纪人</li><li>合作伙伴找大老板谈合作要约见面时间需要经过秘书</li><li>房产中介是买卖双方的代理</li><li>太监是大臣和皇上之间的代理<br>相关术语：</li><li>代理：将非核心逻辑剥离出来以后，封装这些非核心逻辑的类、对象、方法。(中介)<ul><li>动词：指做代理这个动作，或这项工作</li><li>名词：扮演代理这个角色的类、对象、方法</li></ul></li><li>目标：<strong>被代理</strong>“套用”了非核心逻辑代码的类、对象、方法。(房东)<br>代理在开发中实现的方式具体有两种：静态代理，动态代理技术</li></ul></li><li><p><strong>静态代理</strong></p><p>主动创建代理类：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorStaticProxy</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 将被代理的目标对象声明为成员变量</span></span><br><span class="line">    <span class="keyword">private</span> Calculator target;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalculatorStaticProxy</span><span class="params">(Calculator target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 附加功能由代理类中的代理方法来实现</span></span><br><span class="line">        System.out.println(<span class="string">&quot;参数是：&quot;</span> + i + <span class="string">&quot;,&quot;</span> + j);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 通过目标对象来实现核心业务逻辑</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">addResult</span> <span class="operator">=</span> target.add(i, j);</span><br><span class="line">    </span><br><span class="line">        System.out.println(<span class="string">&quot;方法内部 result = &quot;</span> + result);</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> addResult;</span><br><span class="line">    &#125;</span><br><span class="line">    ……</span><br></pre></td></tr></table></figure><p>静态代理确实实现了解耦，但是由于代码都写死了，完全不具备任何的灵活性。就拿日志功能来说，将来其他地方也需要附加日志，那还得再声明更多个静态代理类，那就产生了大量重复的代码，日志功能还是分散的，没有统一管理。</p><p>提出进一步的需求：将日志功能集中到一个代理类中，将来有任何日志需求，都通过这一个代理类来实现。这就需要使用动态代理技术了。</p></li><li><p><strong>动态代理</strong></p><p>动态代理技术分类</p><ul><li>JDK动态代理：JDK原生的实现方式，需要被代理的目标类必须<strong>实现接口</strong>！他会根据目标类的接口动态生成一个代理对象！代理对象和目标对象有相同的接口！（拜把子）</li><li>cglib：通过继承被代理的目标类实现代理，所以不需要目标类实现接口！（认干爹）<br>JDK动态代理技术实现（了解）<br><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img003.2fe524a2.png"></li></ul><p>代理工程：基于jdk代理技术，生成代理对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProxyFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">ProxyFactory</span><span class="params">(Object target)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">getProxy</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * newProxyInstance()：创建一个代理实例</span></span><br><span class="line"><span class="comment">         * 其中有三个参数：</span></span><br><span class="line"><span class="comment">         * 1、classLoader：加载动态生成的代理类的类加载器</span></span><br><span class="line"><span class="comment">         * 2、interfaces：目标对象实现的所有接口的class对象所组成的数组</span></span><br><span class="line"><span class="comment">         * 3、invocationHandler：设置代理对象实现目标对象方法的过程，即代理类中如何重写接口中的抽象方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> target.getClass().getClassLoader();</span><br><span class="line">        Class&lt;?&gt;[] interfaces = target.getClass().getInterfaces();</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 * proxy：代理对象</span></span><br><span class="line"><span class="comment">                 * method：代理对象需要实现的方法，即其中需要重写的方法</span></span><br><span class="line"><span class="comment">                 * args：method所对应方法的参数</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，参数：&quot;</span>+ Arrays.toString(args));</span><br><span class="line">                    result = method.invoke(target, args);</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，结果：&quot;</span>+ result);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，异常：&quot;</span>+e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;[动态代理][日志] &quot;</span>+method.getName()+<span class="string">&quot;，方法执行完毕&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(classLoader, interfaces, invocationHandler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDynamicProxy</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="type">ProxyFactory</span> <span class="variable">factory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ProxyFactory</span>(<span class="keyword">new</span> <span class="title class_">CalculatorLogImpl</span>());</span><br><span class="line">    <span class="type">Calculator</span> <span class="variable">proxy</span> <span class="operator">=</span> (Calculator) factory.getProxy();</span><br><span class="line">    proxy.div(<span class="number">1</span>,<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//proxy.div(1,1);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>代理总结</strong></p><p><strong>代理方式可以解决附加功能代码干扰核心代码和不方便统一维护的问题！</strong></p><p>他主要是将附加功能代码提取到代理中执行，不干扰目标核心代码！</p><p>但是我们也发现，无论使用静态代理和动态代理，程序员的工作都比较繁琐！</p><p>需要自己编写代理工厂等！</p><p>但是，提前剧透，我们在实际开发中，不需要编写代理代码，我们可以使用Spring AOP框架，</p><p>他会简化代理的实现！！！</p></li></ol><h3 id="3-面向切面编程思维（AOP）"><a href="#3-面向切面编程思维（AOP）" class="headerlink" title="3. 面向切面编程思维（AOP）"></a>3. 面向切面编程思维（AOP）</h3><ol><li><p><strong>面向切面编程思想AOP</strong></p><p>AOP：Aspect Oriented Programming面向切面编程</p><p>AOP可以说是OOP（Object Oriented Programming，面向对象编程）的补充和完善。OOP引入封装、继承、多态等概念来建立一种对象层次结构，用于模拟公共行为的一个集合。不过OOP允许开发者定义纵向的关系，但并不适合定义横向的关系，例如日志功能。日志代码往往横向地散布在所有对象层次中，而与它对应的对象的核心功能毫无关系对于其他类型的代码，如安全性、异常处理和透明的持续性也都是如此，这种散布在各处的无关的代码被称为横切（cross cutting），在OOP设计中，它导致了大量代码的重复，而不利于各个模块的重用。</p><p>AOP技术恰恰相反，它利用一种称为”横切”的技术，剖解开封装的对象内部，并将那些影响了多个类的公共行为封装到一个可重用模块，并将其命名为”Aspect”，即切面。所谓”切面”，简单说就是那些与业务无关，却为业务模块所共同调用的逻辑或责任封装起来，便于减少系统的重复代码，降低模块之间的耦合度，并有利于未来的可操作性和可维护性。</p><p>使用AOP，可以在不修改原来代码的基础上添加新功能。</p><p><img src="image_zlCOL6qnik.png"></p></li><li><p><strong>AOP思想主要的应用场景</strong></p><p>AOP（面向切面编程）是一种编程范式，它通过将通用的横切关注点（如日志、事务、权限控制等）与业务逻辑分离，使得代码更加清晰、简洁、易于维护。AOP可以应用于各种场景，以下是一些常见的AOP应用场景：</p><ol><li>日志记录：在系统中记录日志是非常重要的，可以使用AOP来实现日志记录的功能，可以在方法执行前、执行后或异常抛出时记录日志。</li><li>事务处理：在数据库操作中使用事务可以保证数据的一致性，可以使用AOP来实现事务处理的功能，可以在方法开始前开启事务，在方法执行完毕后提交或回滚事务。</li><li>安全控制：在系统中包含某些需要安全控制的操作，如登录、修改密码、授权等，可以使用AOP来实现安全控制的功能。可以在方法执行前进行权限判断，如果用户没有权限，则抛出异常或转向到错误页面，以防止未经授权的访问。</li><li>性能监控：在系统运行过程中，有时需要对某些方法的性能进行监控，以找到系统的瓶颈并进行优化。可以使用AOP来实现性能监控的功能，可以在方法执行前记录时间戳，在方法执行完毕后计算方法执行时间并输出到日志中。</li><li>异常处理：系统中可能出现各种异常情况，如空指针异常、数据库连接异常等，可以使用AOP来实现异常处理的功能，在方法执行过程中，如果出现异常，则进行异常处理（如记录日志、发送邮件等）。</li><li>缓存控制：在系统中有些数据可以缓存起来以提高访问速度，可以使用AOP来实现缓存控制的功能，可以在方法执行前查询缓存中是否有数据，如果有则返回，否则执行方法并将方法返回值存入缓存中。</li><li>动态代理：AOP的实现方式之一是通过动态代理，可以代理某个类的所有方法，用于实现各种功能。<br>综上所述，AOP可以应用于各种场景，它的作用是将通用的横切关注点与业务逻辑分离，使得代码更加清晰、简洁、易于维护。</li></ol></li><li><p><strong>AOP术语名词介绍</strong></p><p>1-横切关注点</p><p>从每个方法中抽取出来的同一类非核心业务。在同一个项目中，我们可以使用多个横切关注点对相关方法进行多个不同方面的增强。</p><p>这个概念不是语法层面天然存在的，而是根据附加功能的逻辑上的需要：有十个附加功能，就有十个横切关注点。</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img007.9ad7afe5.png"></p><p>AOP把软件系统分为两个部分：核心关注点和横切关注点。业务处理的主要流程是核心关注点，与之关系不大的部分是横切关注点。横切关注点的一个特点是，他们经常发生在核心关注点的多处，而各处基本相似，比如权限认证、日志、事务、异常等。AOP的作用在于分离系统中的各种关注点，将核心关注点和横切关注点分离开来。</p><p>2-通知(增强)</p><p>每一个横切关注点上要做的事情都需要写一个方法来实现，这样的方法就叫通知方法。</p><ul><li>前置通知：在被代理的目标方法前执行</li><li>返回通知：在被代理的目标方法成功结束后执行（<strong>寿终正寝</strong>）</li><li>异常通知：在被代理的目标方法异常结束后执行（<strong>死于非命</strong>）</li><li>后置通知：在被代理的目标方法最终结束后执行（<strong>盖棺定论</strong>）</li><li>环绕通知：使用try…catch…finally结构围绕整个被代理的目标方法，包括上面四种通知对应的所有位置<br><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img008.ea600562.png"><br>3-连接点 joinpoint</li></ul><p>这也是一个纯逻辑概念，不是语法定义的。</p><p>指那些被拦截到的点。在 Spring 中，可以被动态代理拦截目标类的方法</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img010.5af189f7.png"></p><p>4-切入点 pointcut</p><p>定位连接点的方式，或者可以理解成被选中的连接点！</p><p>是一个表达式，比如execution(* com.spring.service.impl.<em>.</em>(..))。符合条件的每个方法都是一个具体的连接点。</p><p>5-切面 aspect</p><p>切入点和通知的结合。是一个类。</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img009.a0b70cb3.png"></p><p>6-目标 target</p><p>被代理的目标对象。</p><p>7-代理 proxy</p><p>向目标对象应用通知之后创建的代理对象。</p><p>8-织入 weave</p><p>指把通知应用到目标上，生成代理对象的过程。可以在编译期织入，也可以在运行期织入，Spring采用后者。</p></li></ol><h3 id="4-Spring-AOP框架介绍和关系梳理"><a href="#4-Spring-AOP框架介绍和关系梳理" class="headerlink" title="4. Spring AOP框架介绍和关系梳理"></a>4. Spring AOP框架介绍和关系梳理</h3><ol><li>AOP一种区别于OOP的编程思维，用来完善和解决OOP的非核心代码冗余和不方便统一维护问题！</li><li>代理技术（动态代理|静态代理）是实现AOP思维编程的具体技术，但是自己使用动态代理实现代码比较繁琐！</li><li>Spring AOP框架，基于AOP编程思维，封装动态代理技术，简化动态代理技术实现的框架！SpringAOP内部帮助我们实现动态代理，我们只需写少量的配置，指定生效范围即可,即可完成面向切面思维编程的实现！</li></ol><h3 id="5-Spring-AOP基于注解方式实现和细节"><a href="#5-Spring-AOP基于注解方式实现和细节" class="headerlink" title="5. Spring AOP基于注解方式实现和细节"></a>5. Spring AOP基于注解方式实现和细节</h3><h4 id="5-1-Spring-AOP底层技术组成"><a href="#5-1-Spring-AOP底层技术组成" class="headerlink" title="5.1 Spring AOP底层技术组成"></a>5.1 Spring AOP底层技术组成</h4><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img006.84eb95b7.png"></p><ul><li>动态代理（InvocationHandler）：JDK原生的实现方式，需要被代理的目标类必须实现接口。因为这个技术要求代理对象和目标对象实现同样的接口（兄弟两个拜把子模式）。</li><li>cglib：通过继承被代理的目标类（认干爹模式）实现代理，所以不需要目标类实现接口。</li><li>AspectJ：早期的AOP实现的框架，SpringAOP借用了AspectJ中的AOP注解。</li></ul><h4 id="5-2-初步实现"><a href="#5-2-初步实现" class="headerlink" title="5.2 初步实现"></a>5.2 初步实现</h4><ol><li><p>加入依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- spring-aspects会帮我们传递过来aspectjweaver --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>准备接口</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>纯净实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.proxy;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实现计算接口,单纯添加 + - * / 实现! 掺杂其他功能!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalculatorPureImpl</span> <span class="keyword">implements</span> <span class="title class_">Calculator</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">add</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i + j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sub</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i - j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">mul</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i * j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">div</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> j)</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> i / j;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明切面类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.advice;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.aspectj.lang.annotation.*;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="comment">// @Aspect表示这个类是一个切面类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="comment">// @Component注解保证这个切面类能够放入IOC容器</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogAspect</span> &#123;</span><br><span class="line">        </span><br><span class="line">    <span class="comment">// @Before注解：声明当前方法是前置通知方法</span></span><br><span class="line">    <span class="comment">// value属性：指定切入点表达式，由切入点表达式控制当前通知方法要作用在哪一个目标方法上</span></span><br><span class="line">    <span class="meta">@Before(value = &quot;execution(public int com.wzb.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCore</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP前置通知] 方法开始了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterReturning(value = &quot;execution(public int com.wzb.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP返回通知] 方法成功返回了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@AfterThrowing(value = &quot;execution(public int com.wzb.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterException</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP异常通知] 方法抛异常了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@After(value = &quot;execution(public int com.wzb.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogFinallyEnd</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[AOP后置通知] 方法最终结束了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>开启aspectj注解支持</p><ol><li>xml方式<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 进行包扫描--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb&quot;</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 开启aspectj框架注解支持--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspectj-autoproxy</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li>配置类方式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.wzb&quot;)</span></span><br><span class="line"><span class="comment">//作用等于 &lt;aop:aspectj-autoproxy /&gt; 配置类上开启 Aspectj注解支持!</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyConfig</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol></li><li><p>测试效果</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@SpringJUnitConfig(locations = &quot;classpath:spring-aop.xml&quot;)</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(value = &#123;MyConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalculator</span><span class="params">()</span>&#123;</span><br><span class="line">        calculator.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.wzb.test.AopTest,testCalculator</span><br><span class="line">[AOP前置通知] 方法开始了</span><br><span class="line">[AOP返回通知] 方法成功返回了</span><br><span class="line">[AOP后置通知] 方法最终结束了</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-3-获取通知细节信息"><a href="#5-3-获取通知细节信息" class="headerlink" title="5.3 获取通知细节信息"></a>5.3 获取通知细节信息</h4><ol><li><p><strong>JointPoint接口</strong></p><p>需要获取方法签名、传入的实参等信息时，可以在通知方法声明JoinPoint类型的形参。</p><ul><li>要点1：JoinPoint 接口通过 getSignature() 方法获取目标方法的签名（方法声明时的完整信息）</li><li>要点2：通过目标方法签名对象获取方法名</li><li>要点3：通过 JoinPoint 对象获取外界调用目标方法时传入的实参列表组成的数组</li></ul><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @Before注解标记前置通知方法</span></span><br><span class="line"><span class="comment">// value属性：切入点表达式，告诉Spring当前通知方法要套用到哪个目标方法上</span></span><br><span class="line"><span class="comment">// 在前置通知方法形参位置声明一个JoinPoint类型的参数，Spring就会将这个对象传入</span></span><br><span class="line"><span class="comment">// 根据JoinPoint对象就可以获取目标方法名称、实际参数列表</span></span><br><span class="line"><span class="meta">@Before(value = &quot;execution(public int com.wzb.aop.api.Calculator.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCore</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 1.通过JoinPoint对象获取目标方法签名对象</span></span><br><span class="line">    <span class="comment">// 方法的签名：一个方法的全部声明信息</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 2.通过方法的签名对象获取目标方法的详细信息</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">    System.out.println(<span class="string">&quot;methodName = &quot;</span> + methodName);</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> <span class="variable">modifiers</span> <span class="operator">=</span> signature.getModifiers();</span><br><span class="line">    System.out.println(<span class="string">&quot;modifiers = &quot;</span> + modifiers);</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">declaringTypeName</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">    System.out.println(<span class="string">&quot;declaringTypeName = &quot;</span> + declaringTypeName);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 3.通过JoinPoint对象获取外界调用目标方法时传入的实参列表</span></span><br><span class="line">    Object[] args = joinPoint.getArgs();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 4.由于数组直接打印看不到具体数据，所以转换为List集合</span></span><br><span class="line">    List&lt;Object&gt; argList = Arrays.asList(args);</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP前置通知] &quot;</span> + methodName + <span class="string">&quot;方法开始了，参数列表：&quot;</span> + argList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>方法返回值</strong></p><p>在返回通知中，通过 <strong>@AfterReturning</strong>注解的returning属性获取目标方法的返回值！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @AfterReturning注解标记返回通知方法</span></span><br><span class="line"><span class="comment">// 在返回通知中获取目标方法返回值分两步：</span></span><br><span class="line"><span class="comment">// 第一步：在@AfterReturning注解中通过returning属性设置一个名称</span></span><br><span class="line"><span class="comment">// 第二步：使用returning属性设置的名称在通知方法中声明一个对应的形参</span></span><br><span class="line"><span class="meta">@AfterReturning(</span></span><br><span class="line"><span class="meta">        value = &quot;execution(public int com.wzb.aop.api.Calculator.add(int,int))&quot;,</span></span><br><span class="line"><span class="meta">        returning = &quot;targetMethodReturnValue&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterCoreSuccess</span><span class="params">(JoinPoint joinPoint, Object targetMethodReturnValue)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP返回通知] &quot;</span>+methodName+<span class="string">&quot;方法成功结束了，返回值是：&quot;</span> + targetMethodReturnValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>异常对象捕捉</strong></p><p>在异常通知中，通过@AfterThrowing注解的throwing属性获取目标方法抛出的异常对象</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// @AfterThrowing注解标记异常通知方法</span></span><br><span class="line"><span class="comment">// 在异常通知中获取目标方法抛出的异常分两步：</span></span><br><span class="line"><span class="comment">// 第一步：在@AfterThrowing注解中声明一个throwing属性设定形参名称</span></span><br><span class="line"><span class="comment">// 第二步：使用throwing属性指定的名称在通知方法声明形参，Spring会将目标方法抛出的异常对象从这里传给我们</span></span><br><span class="line"><span class="meta">@AfterThrowing(</span></span><br><span class="line"><span class="meta">        value = &quot;execution(public int com.wzb.aop.api.Calculator.add(int,int))&quot;,</span></span><br><span class="line"><span class="meta">        throwing = &quot;targetMethodException&quot;</span></span><br><span class="line"><span class="meta">)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterCoreException</span><span class="params">(JoinPoint joinPoint, Throwable targetMethodException)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> joinPoint.getSignature().getName();</span><br><span class="line">    </span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP异常通知] &quot;</span>+methodName+<span class="string">&quot;方法抛异常了，异常类型是：&quot;</span> + targetMethodException.getClass().getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-4-切点表达式语法"><a href="#5-4-切点表达式语法" class="headerlink" title="5.4 切点表达式语法"></a>5.4 切点表达式语法</h4><ol><li><p><strong>切点表达式作用</strong></p><p>AOP切点表达式（Pointcut Expression）是一种用于指定切点的语言，它可以通过定义匹配规则，来选择需要被切入的目标对象。</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img028.cb7f2153.png"></p></li><li><p><strong>切点表达式语法</strong></p><p>切点表达式总结</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img011.dde1a79a.png"></p><p>语法细节</p><ul><li><p>第一位：execution( ) 固定开头</p></li><li><p>第二位：方法访问修饰符</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">private</span> 直接描述对应修饰符即可</span><br></pre></td></tr></table></figure></li><li><p>第三位：方法返回值</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> String <span class="keyword">void</span> 直接描述返回值类型</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：</p><p>特殊情况 不考虑 访问修饰符和返回值</p><p>execution(* * ) 这是错误语法</p><p>execution( *) &#x3D;&#x3D; 你只要考虑返回值 或者 不考虑访问修饰符 相当于全部不考虑了</p></li><li><p>第四位：指定包的地址</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">固定的包: com.wzb.api | service | dao</span><br><span class="line">单层的任意命名: com.wzb.*  = com.wzb.api  com.wzb.dao  * = 任意一层的任意命名</span><br><span class="line">任意层任意命名: com.. = com.wzb.api.erdaye com.a.a.a.a.a.a.a  ..任意层,任意命名 用在包上!</span><br><span class="line">注意: ..不能用作包开头   <span class="keyword">public</span> <span class="type">int</span> .. 错误语法  com..</span><br><span class="line">找到任何包下: *..</span><br></pre></td></tr></table></figure></li><li><p>第五位：指定类名称</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">固定名称: UserService</span><br><span class="line">任意类名: *</span><br><span class="line">部分任意: com..service.impl.*Impl</span><br><span class="line">任意包任意类: *..*</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>第六位：指定方法名称</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">语法和类名一致</span><br><span class="line">任意访问修饰符,任意类的任意方法: * *..*.*</span><br></pre></td></tr></table></figure></li><li><p>第七位：方法参数</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">第七位: 方法的参数描述</span><br><span class="line">       具体值: (String,<span class="type">int</span>) != (<span class="type">int</span>,String) 没有参数 ()</span><br><span class="line">       模糊值: 任意参数 有 或者 没有 (..)  ..任意参数的意识</span><br><span class="line">       部分具体和模糊:</span><br><span class="line">         第一个参数是字符串的方法 (String..)</span><br><span class="line">         最后一个参数是字符串 (..String)</span><br><span class="line">         字符串开头,<span class="type">int</span>结尾 (String..<span class="type">int</span>)</span><br><span class="line">         包含<span class="type">int</span>类型(..<span class="type">int</span>..)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><strong>切点表达式案例</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1.</span>查询某包某类下，访问修饰符是公有，返回值是<span class="type">int</span>的全部方法</span><br><span class="line">   <span class="keyword">public</span> <span class="type">int</span> xx.xx.xxx.类名.*(..)</span><br><span class="line"><span class="number">2.</span>查询某包下类中第一个参数是String的方法</span><br><span class="line">   * xxx.xxx.xxx.*(String..)</span><br><span class="line"><span class="number">3.</span>查询全部包下，无参数的方法！</span><br><span class="line">   * *..*.*()</span><br><span class="line"><span class="number">4.</span>查询com包下，以<span class="type">int</span>参数类型结尾的方法</span><br><span class="line">   * com..*.*(..<span class="type">int</span>)</span><br><span class="line"><span class="number">5.</span>查询指定包下，Service开头类的私有返回值<span class="type">int</span>的无参数方法</span><br><span class="line">   <span class="keyword">private</span> <span class="type">int</span> xx.xx.xx.Service*.*() </span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="5-5-重用（提取）切点表达式"><a href="#5-5-重用（提取）切点表达式" class="headerlink" title="5.5 重用（提取）切点表达式"></a>5.5 重用（提取）切点表达式</h4><ol><li><p>重用切点表达式优点</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">// @Before注解：声明当前方法是前置通知方法</span></span><br><span class="line"><span class="comment">// value属性：指定切入点表达式，由切入点表达式控制当前通知方法要作用在哪一个目标方法上</span></span><br><span class="line"><span class="meta">@Before(value = &quot;execution(public int com.wzb.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCore</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP前置通知] 方法开始了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterReturning(value = &quot;execution(public int com.wzb.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterSuccess</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP返回通知] 方法成功返回了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@AfterThrowing(value = &quot;execution(public int com.wzb.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogAfterException</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP异常通知] 方法抛异常了&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@After(value = &quot;execution(public int com.wzb.proxy.CalculatorPureImpl.add(int,int))&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogFinallyEnd</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;[AOP后置通知] 方法最终结束了&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面案例，是我们之前编写切点表达式的方式，发现， 所有增强方法的切点表达式相同！</p><p>出现了冗余，如果需要切换也不方便统一维护！</p><p>我们可以将切点提取，在增强上进行引用即可！</p></li><li><p>同一类内部引用</p><p>提取</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 切入点表达式重用</span></span><br><span class="line"><span class="meta">@Pointcut(&quot;execution(public int com.wzb.aop.api.Calculator.add(int,int)))</span><span class="string">&quot;)</span></span><br><span class="line"><span class="string">public void declarPointCut() &#123;&#125;</span></span><br></pre></td></tr></table></figure><p>注意：提取切点注解使用@Pointcut(切点表达式) ， 需要添加到一个无参数无返回值方法上即可！</p><p>引用</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;declarPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">printLogBeforeCoreOperation</span><span class="params">(JoinPoint joinPoint)</span> &#123;</span><br></pre></td></tr></table></figure></li><li><p>不同类中引用</p><p>不同类在引用切点，只需要添加类的全限定符+方法名即可！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(value = &quot;com.wzb.spring.aop.aspect.LogAspect.declarPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">roundAdvice</span><span class="params">(ProceedingJoinPoint joinPoint)</span> &#123;</span><br></pre></td></tr></table></figure></li><li><p>切点统一管理</p><p>建议：将切点表达式统一存储到一个类中进行集中管理和维护！</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AtguiguPointCut</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public int *..Calculator.sub(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atguiguGlobalPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(public int *..Calculator.add(int,int))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">atguiguSecondPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(value = &quot;execution(* *..*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transactionPointCut</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="5-6-环绕通知"><a href="#5-6-环绕通知" class="headerlink" title="5.6 环绕通知"></a>5.6 环绕通知</h4><p>环绕通知对应整个 try…catch…finally 结构，包括前面四种通知的所有功能。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用@Around注解标明环绕通知方法</span></span><br><span class="line"><span class="meta">@Around(value = &quot;com.wzb.aop.aspect.AtguiguPointCut.transactionPointCut()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">manageTransaction</span><span class="params">(</span></span><br><span class="line"><span class="params">    </span></span><br><span class="line"><span class="params">        // 通过在通知方法形参位置声明ProceedingJoinPoint类型的形参，</span></span><br><span class="line"><span class="params">        // Spring会将这个类型的对象传给我们</span></span><br><span class="line"><span class="params">        ProceedingJoinPoint joinPoint)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过ProceedingJoinPoint对象获取外界调用目标方法时传入的实参数组</span></span><br><span class="line">    Object[] args = joinPoint.getArgs();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过ProceedingJoinPoint对象获取目标方法的签名对象</span></span><br><span class="line">    <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> joinPoint.getSignature();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 通过签名对象获取目标方法的方法名</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 声明变量用来存储目标方法的返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">targetMethodReturnValue</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法执行前：开启事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 开启事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，参数列表：&quot;</span> + Arrays.asList(args));</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 过ProceedingJoinPoint对象调用目标方法</span></span><br><span class="line">        <span class="comment">// 目标方法的返回值一定要返回给外界调用者</span></span><br><span class="line">        targetMethodReturnValue = joinPoint.proceed(args);</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法成功返回后：提交事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 提交事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，方法返回值：&quot;</span> + targetMethodReturnValue);</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">catch</span> (Throwable e)&#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法抛异常后：回滚事务（模拟）</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 回滚事务，方法名：&quot;</span> + methodName + <span class="string">&quot;，异常：&quot;</span> + e.getClass().getName());</span><br><span class="line">    </span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 在目标方法最终结束后：释放数据库连接</span></span><br><span class="line">        log.debug(<span class="string">&quot;[AOP 环绕通知] 释放数据库连接，方法名：&quot;</span> + methodName);</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> targetMethodReturnValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="5-7-切面优先级设置"><a href="#5-7-切面优先级设置" class="headerlink" title="5.7 切面优先级设置"></a>5.7 切面优先级设置</h4><p>相同目标方法上同时存在多个切面时，切面的优先级控制切面的内外嵌套顺序。</p><ul><li>优先级高的切面：外面</li><li>优先级低的切面：里面</li></ul><p>使用 @Order 注解可以控制切面的优先级：</p><ul><li>@Order(较小的数)：优先级高</li><li>@Order(较大的数)：优先级低</li></ul><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img012.b353bc56.png"></p><p>实际意义</p><p>实际开发时，如果有多个切面嵌套的情况，要慎重考虑。例如：如果事务切面优先级高，那么在缓存中命中数据的情况下，事务切面的操作都浪费了。</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img013.53c41dc7.png"></p><p>此时应该将缓存切面的优先级提高，在事务操作之前先检查缓存中是否存在目标数据。</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img014.ee4ed40a.png"></p><h4 id="5-8-CGLib动态代理生效"><a href="#5-8-CGLib动态代理生效" class="headerlink" title="5.8 CGLib动态代理生效"></a>5.8 CGLib动态代理生效</h4><p>在目标类没有实现任何接口的情况下，Spring会自动使用cglib技术实现代理。为了证明这一点，我们做下面的测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmployeeService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getEmpList</span><span class="params">()</span> &#123;</span><br><span class="line">       System.out.print(<span class="string">&quot;方法内部 com.wzb.aop.imp.EmployeeService.getEmpList&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmployeeService employeeService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testNoInterfaceProxy</span><span class="params">()</span> &#123;</span><br><span class="line">    employeeService.getEmpList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>没有接口：</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img029.d45d40f4.png"></p><p>有接口：</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img030.e2f27997.png"></p><p>使用总结：</p><p>a.  如果目标类有接口,选择使用jdk动态代理</p><p>b.  如果目标类没有接口,选择cglib动态代理</p><p>c.  如果有接口,接口接值</p><p>d.  如果没有接口,类进行接值</p><h4 id="5-9-注解实现小结"><a href="#5-9-注解实现小结" class="headerlink" title="5.9 注解实现小结"></a>5.9 注解实现小结</h4><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img015.9c921baf.png"></p><h3 id="6-SpringAOP基于XML方式实现-了解"><a href="#6-SpringAOP基于XML方式实现-了解" class="headerlink" title="6. SpringAOP基于XML方式实现(了解)"></a>6. SpringAOP基于XML方式实现(了解)</h3><ol><li><p>准备工作</p><p>加入依赖</p><p>和基于注解的 AOP 时一样。</p><p>准备代码</p><p>把测试基于注解功能时的Java类复制到新module中，去除所有注解。</p></li><li><p>配置Spring配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置目标类的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;calculatorPure&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.aop.imp.CalculatorPureImpl&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置切面类的bean --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;logAspect&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.wzb.aop.aspect.LogAspect&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!-- 配置AOP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 配置切入点表达式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;logPointCut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..*.*(..))&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- aop:aspect标签：配置切面 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- ref属性：关联切面类的bean --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">&quot;logAspect&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- aop:before标签：配置前置通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- method属性：指定前置通知的方法名 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- pointcut-ref属性：引用切入点表达式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">&quot;printLogBeforeCore&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after-returning标签：配置返回通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- returning属性：指定通知方法中用来接收目标方法返回值的参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">&quot;printLogAfterCoreSuccess&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">returning</span>=<span class="string">&quot;targetMethodReturnValue&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after-throwing标签：配置异常通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- throwing属性：指定通知方法中用来接收目标方法抛出异常的异常对象的参数名 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span></span></span><br><span class="line"><span class="tag">                <span class="attr">method</span>=<span class="string">&quot;printLogAfterCoreException&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span></span></span><br><span class="line"><span class="tag">                <span class="attr">throwing</span>=<span class="string">&quot;targetMethodException&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:after标签：配置后置通知 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">&quot;printLogCoreFinallyEnd&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;logPointCut&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!-- aop:around标签：配置环绕通知 --&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;aop:around method=&quot;……&quot; pointcut-ref=&quot;logPointCut&quot;/&gt;--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:spring-aop.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AopTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> Calculator calculator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testCalculator</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(calculator);</span><br><span class="line">        calculator.add(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h3 id="7-SpringAOP对获取Bean的影响理解"><a href="#7-SpringAOP对获取Bean的影响理解" class="headerlink" title="7. SpringAOP对获取Bean的影响理解"></a>7. SpringAOP对获取Bean的影响理解</h3><h4 id="7-1-根据类型装配-bean"><a href="#7-1-根据类型装配-bean" class="headerlink" title="7.1 根据类型装配 bean"></a>7.1 根据类型装配 bean</h4><ol><li><p>情景一</p><ul><li>bean 对应的类没有实现任何接口</li><li>根据 bean 本身的类型获取 bean<ul><li><p>测试：IOC容器中同类型的 bean 只有一个</p><p>正常获取到 IOC 容器中的那个 bean 对象</p></li><li><p>测试：IOC 容器中同类型的 bean 有多个</p><p>会抛出 NoUniqueBeanDefinitionException 异常，表示 IOC 容器中这个类型的 bean 有多个</p></li></ul></li></ul></li><li><p>情景二</p><ul><li>bean 对应的类实现了接口，这个接口也只有这一个实现类<ul><li><p>测试：根据接口类型获取 bean</p></li><li><p>测试：根据类获取 bean</p></li><li><p>结论：上面两种情况其实都能够正常获取到 bean，而且是同一个对象</p></li></ul></li></ul></li><li><p>情景三</p><ul><li>声明一个接口</li><li>接口有多个实现类</li><li>接口所有实现类都放入 IOC 容器<ul><li><p>测试：根据接口类型获取 bean</p><p>会抛出 NoUniqueBeanDefinitionException 异常，表示 IOC 容器中这个类型的 bean 有多个</p></li><li><p>测试：根据类获取bean</p><p>正常</p></li></ul></li></ul></li><li><p>情景四</p><ul><li><p>声明一个接口</p></li><li><p>接口有一个实现类</p></li><li><p>创建一个切面类，对上面接口的实现类应用通知</p><ul><li><p>测试：根据接口类型获取bean</p><p>正常</p></li><li><p>测试：根据类获取bean</p><p>无法获取<br>原因分析：</p></li></ul></li><li><p>应用了切面后，真正放在IOC容器中的是代理类的对象</p></li><li><p>目标类并没有被放到IOC容器中，所以根据目标类的类型从IOC容器中是找不到的</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img021.3e0da1cc.png"></p></li></ul></li><li><p>情景五</p><ul><li><p>声明一个类</p></li><li><p>创建一个切面类，对上面的类应用通知</p><ul><li>测试：根据类获取 bean，能获取到<br><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img023.b5696f3e.png"><br>debug查看实际类型：</li></ul><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img024.558f6062.png"></p></li></ul></li></ol><h4 id="7-2-使用总结"><a href="#7-2-使用总结" class="headerlink" title="7.2 使用总结"></a>7.2 使用总结</h4><p>对实现了接口的类应用切面</p><p><img src="image_VkV-uHK8KE.png"></p><p>对没实现接口的类应用切面</p><p><img src="image_xH8Fl3WZWi.png"></p><p><strong>如果使用AOP技术，目标类有接口，必须使用接口接收数据！</strong></p><h2 id="六、Spring-声明式事务"><a href="#六、Spring-声明式事务" class="headerlink" title="六、Spring 声明式事务"></a>六、Spring 声明式事务</h2><h3 id="1-JdbcTemplate使用"><a href="#1-JdbcTemplate使用" class="headerlink" title="1. JdbcTemplate使用"></a>1. JdbcTemplate使用</h3><p>为了在特定领域帮助我们简化代码，Spring 封装了很多 『Template』形式的模板类。例如：RedisTemplate、HibernateTemplate  等等，包括我们今天要学习的 JDBCTemplate。</p><ol><li><p><strong>准备工作</strong></p><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 数据库驱动 和 连接池--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><p>数据库脚本</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database studb;</span><br><span class="line"></span><br><span class="line">use studb;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE TABLE</span> students (</span><br><span class="line">  id <span class="type">INT</span> AUTO_INCREMENT <span class="keyword">PRIMARY KEY</span>,</span><br><span class="line">  name <span class="type">VARCHAR</span>(<span class="number">50</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  gender <span class="type">VARCHAR</span>(<span class="number">10</span>) <span class="keyword">NOT NULL</span>,</span><br><span class="line">  age <span class="type">INT</span>,</span><br><span class="line">  class <span class="type">VARCHAR</span>(<span class="number">50</span>)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT INTO</span> students (id, name, gender, age, class)</span><br><span class="line"><span class="keyword">VALUES</span></span><br><span class="line">  (<span class="number">1</span>, <span class="string">&#x27;张三&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">2</span>, <span class="string">&#x27;李四&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">3</span>, <span class="string">&#x27;王五&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">4</span>, <span class="string">&#x27;赵六&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">5</span>, <span class="string">&#x27;刘七&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>),</span><br><span class="line">  (<span class="number">6</span>, <span class="string">&#x27;陈八&#x27;</span>, <span class="string">&#x27;女&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;高中一班&#x27;</span>),</span><br><span class="line">  (<span class="number">7</span>, <span class="string">&#x27;杨九&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">20</span>, <span class="string">&#x27;高中三班&#x27;</span>),</span><br><span class="line">  (<span class="number">8</span>, <span class="string">&#x27;吴十&#x27;</span>, <span class="string">&#x27;男&#x27;</span>, <span class="number">19</span>, <span class="string">&#x27;高中二班&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>jdbc.properties</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wzb.url=jdbc:mysql://localhost:3306/studb</span><br><span class="line">wzb.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">wzb.username=root</span><br><span class="line">wzb.password=root</span><br></pre></td></tr></table></figure><p>application.xml配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><strong>使用JdbcTemplate</strong></p><p>测试环境搭建</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TemplateTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>DML操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用jdbcTemplate实现DML操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//TODO 执行插入一条学员数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into students (id,name,gender,age,class) values (?,?,?,?,?);&quot;</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        参数1: sql语句</span></span><br><span class="line"><span class="comment">        参数2: 可变参数,占位符的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> jdbcTemplate.update(sql, <span class="number">9</span>,<span class="string">&quot;十一&quot;</span>, <span class="string">&quot;男&quot;</span>, <span class="number">18</span>, <span class="string">&quot;二年三班&quot;</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;rows = &quot;</span> + rows);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>DQL操作</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回单个简单类型</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDQLForString</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select name from students where id = ? ;&quot;</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        参数1: sql语句</span></span><br><span class="line"><span class="comment">        参数2: 返回单值类型</span></span><br><span class="line"><span class="comment">        参数3: 可变参数,占位符的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql, String.class, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询单条实体对象</span></span><br><span class="line"><span class="comment"> *   public class Student &#123;</span></span><br><span class="line"><span class="comment"> *     private Integer id;</span></span><br><span class="line"><span class="comment"> *     private String name;</span></span><br><span class="line"><span class="comment"> *     private String gender;</span></span><br><span class="line"><span class="comment"> *     private Integer age;</span></span><br><span class="line"><span class="comment"> *     private String classes;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDQLForPojo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from students where id = ? ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> jdbcTemplate.queryForObject(sql,  (rs, rowNum) -&gt; &#123;</span><br><span class="line">        <span class="comment">//自己处理结果映射</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">stu</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        stu.setId(rs.getInt(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">        stu.setName(rs.getString(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">        stu.setAge(rs.getInt(<span class="string">&quot;age&quot;</span>));</span><br><span class="line">        stu.setGender(rs.getString(<span class="string">&quot;gender&quot;</span>));</span><br><span class="line">        stu.setClasses(rs.getString(<span class="string">&quot;classes&quot;</span>));</span><br><span class="line">        <span class="keyword">return</span> stu;</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;student = &quot;</span> + student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询实体类集合</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDQLForListPojo</span><span class="params">()</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;select id , name , age , gender , class as classes from students where id &gt; ? ;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        query可以返回集合!</span></span><br><span class="line"><span class="comment">        BeanPropertyRowMapper就是封装好RowMapper的实现,要求属性名和列名相同即可</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Student&gt; studentList = jdbcTemplate.query(sql, <span class="keyword">new</span> <span class="title class_">BeanPropertyRowMapper</span>&lt;&gt;(Student.class), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;studentList = &quot;</span> + studentList);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="2-声明式事务概念"><a href="#2-声明式事务概念" class="headerlink" title="2. 声明式事务概念"></a>2. 声明式事务概念</h3><h4 id="2-1-编程式事务"><a href="#2-1-编程式事务" class="headerlink" title="2.1 编程式事务"></a>2.1 编程式事务</h4><p>编程式事务是指手动编写程序来管理事务，即通过编写代码的方式直接控制事务的提交和回滚。在 Java 中，通常使用事务管理器(如 Spring 中的 <code>PlatformTransactionManager</code>)来实现编程式事务。</p><p>编程式事务的主要优点是灵活性高，可以按照自己的需求来控制事务的粒度、模式等等。但是，编写大量的事务控制代码容易出现问题，对代码的可读性和可维护性有一定影响。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ...;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 开启事务：关闭事务的自动提交</span></span><br><span class="line">    conn.setAutoCommit(<span class="literal">false</span>);</span><br><span class="line">    <span class="comment">// 核心操作</span></span><br><span class="line">    <span class="comment">// 业务代码</span></span><br><span class="line">    <span class="comment">// 提交事务</span></span><br><span class="line">    conn.commit();</span><br><span class="line">  </span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 回滚事务</span></span><br><span class="line">    conn.rollBack();</span><br><span class="line">  </span><br><span class="line">&#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 释放数据库连接</span></span><br><span class="line">    conn.close();</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编程式的实现方式存在缺陷：</p><ul><li>细节没有被屏蔽：具体操作过程中，所有细节都需要程序员自己来完成，比较繁琐。</li><li>代码复用性不高：如果没有有效抽取出来，每次实现功能都需要自己编写代码，代码就没有得到复用。</li></ul><h4 id="2-2-声明式事务"><a href="#2-2-声明式事务" class="headerlink" title="2.2 声明式事务"></a>2.2 声明式事务</h4><p>声明式事务是指使用注解或 XML 配置的方式来控制事务的提交和回滚。</p><p>开发者只需要添加配置即可， 具体事务的实现由第三方框架实现，避免我们直接进行事务操作！</p><p>使用声明式事务可以将事务的控制和业务逻辑分离开来，提高代码的可读性和可维护性。</p><p>区别：</p><ul><li>编程式事务需要手动编写代码来管理事务</li><li>而声明式事务可以通过配置文件或注解来控制事务。</li></ul><h4 id="2-3-Spring事务管理器"><a href="#2-3-Spring事务管理器" class="headerlink" title="2.3 Spring事务管理器"></a>2.3 Spring事务管理器</h4><ol><li><p>Spring声明式事务对应依赖</p><ul><li>spring-tx: 包含声明式事务实现的基本规范（事务管理器规范接口和事务增强等等）</li><li>spring-jdbc: 包含DataSource方式事务管理器实现类DataSourceTransactionManager</li><li>spring-orm: 包含其他持久层框架的事务管理器实现类例如：Hibernate&#x2F;Jpa等</li></ul></li><li><p>Spring声明式事务对应事务管理器接口</p><p><img src="image_maTcx-F58u.png"></p><p>我们现在要使用的事务管理器是org.springframework.jdbc.datasource.DataSourceTransactionManager，将来整合 JDBC方式、JdbcTemplate方式、Mybatis方式的事务实现！</p><p>DataSourceTransactionManager类中的主要方法：</p><ul><li>doBegin()：开启事务</li><li>doSuspend()：挂起事务</li><li>doResume()：恢复挂起的事务</li><li>doCommit()：提交事务</li><li>doRollback()：回滚事务</li></ul></li></ol><h3 id="3-基于注解的声明式事务"><a href="#3-基于注解的声明式事务" class="headerlink" title="3. 基于注解的声明式事务"></a>3. 基于注解的声明式事务</h3><h4 id="3-1-准备工作"><a href="#3-1-准备工作" class="headerlink" title="3.1 准备工作"></a>3.1 准备工作</h4><ol><li>准备项目<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--spring context依赖--&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--当你引入Spring Context依赖之后，表示将Spring的基础依赖引入了--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--junit5测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jakarta.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jakarta.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 数据库驱动 和 连接池--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.0.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- spring-jdbc --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 声明式事务依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 为了更好的观测事务的细节信息，建议添加日志 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在resources中添加logback.xml文件 --&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">debug</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定日志输出的位置 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;STDOUT&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 日志输出的格式 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 按照顺序分别是：时间、日志级别、线程名称、打印日志的类、日志主体内容、换行 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>[%d&#123;HH:mm:ss.SSS&#125;] [%-5level] [%thread] [%logger] [%msg]%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 设置全局日志级别。日志级别按顺序分别是：DEBUG、INFO、WARN、ERROR --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定任何一个日志级别都只打印当前级别和后面级别的日志。 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 指定打印日志的appender，这里通过“STDOUT”引用了前面配置的appender --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;STDOUT&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"> </span><br><span class="line">    <span class="comment">&lt;!-- 根据特殊需求指定局部日志级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ol><li><p>外部配置文件</p><p>jdbc.properties</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wzb.url=jdbc:mysql://localhost:3306/studb</span><br><span class="line">wzb.driver=com.mysql.cj.jdbc.Driver</span><br><span class="line">wzb.username=root</span><br><span class="line">wzb.password=root</span><br></pre></td></tr></table></figure></li><li><p>spring配置文件</p><p>application.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>准备dao&#x2F;service层</p><p>dao</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentDao</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JdbcTemplate jdbcTemplate;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateNameById</span><span class="params">(String name,Integer id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update students set name = ? where id = ? ;&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> jdbcTemplate.update(sql, name, id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateAgeById</span><span class="params">(Integer age,Integer id)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update students set age = ? where id = ? ;&quot;</span>;</span><br><span class="line">        jdbcTemplate.update(sql,age,id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>service</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试环境搭建</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-2-基本事务控制"><a href="#3-2-基本事务控制" class="headerlink" title="3.2 基本事务控制"></a>3.2 基本事务控制</h4><ol><li><p>配置事务管理器</p><p>Xml配置文件方式</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    &lt;/bean</span><br><span class="line">        </span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">       </span><br><span class="line">        <span class="comment">&lt;!-- 事务管理器的bean只需要装配数据源，其他属性保持默认值即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span>  </span><br><span class="line">    <span class="comment">&lt;!-- 开启基于注解的声明式事务功能 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用transaction-manager属性指定当前使用是事务管理器的bean --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- transaction-manager属性的默认值是transactionManager，如果事务管理器bean的id正好就是这个默认值，则可以省略这个属性 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>    </span><br></pre></td></tr></table></figure><p>Java配置类方式</p></li></ol><p>​   数据库相关的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 数据库和连接池配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@PropertySource(value = &quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataSourceConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化dataSource加入到ioc容器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> url</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> driver</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> username</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> password</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(<span class="meta">@Value(&quot;$&#123;wzb.url&#125;&quot;)</span>String url,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;wzb.driver&#125;&quot;)</span>String driver,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;wzb.username&#125;&quot;)</span>String username,</span></span><br><span class="line"><span class="params">                                 <span class="meta">@Value(&quot;$&#123;wzb.password&#125;&quot;)</span>String password)</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 实例化JdbcTemplate对象,需要使用ioc中的DataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JdbcTemplate <span class="title function_">jdbcTemplate</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">JdbcTemplate</span> <span class="variable">jdbcTemplate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JdbcTemplate</span>();</span><br><span class="line">        jdbcTemplate.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> jdbcTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>事务管理器的配置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: spring的事务管理器配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//该注解作用 == &lt;tx:annotation-driven</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 装配事务管理实现对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> dataSource</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>整合配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.config</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description: 项目整体配置类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Import(value = &#123;DataSourceConfig.class, TxConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@ComponentScan(basePackages = &quot;com.wzb&quot;)</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>使用声明事务注解@Transactional<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.service</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;-----------&quot;</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li>测试事务效果<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.test</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * description:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">//@SpringJUnitConfig(locations = &quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="meta">@SpringJUnitConfig(classes = AppConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-3-事务属性：只读"><a href="#3-3-事务属性：只读" class="headerlink" title="3.3 事务属性：只读"></a>3.3 事务属性：只读</h4><ol><li><p>只读介绍</p><p>对一个查询操作来说，如果我们把它设置成只读，就能够明确告诉数据库，这个操作不涉及写操作。这样数据库就能够针对查询操作来进行优化。</p></li><li><p>设置方式</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// readOnly = true把当前事务设置为只读 默认是false!</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br></pre></td></tr></table></figure></li><li><p>针对DML动作设置只读模式</p><p>会抛出下面异常：</p><p>Caused by: java.sql.SQLException: Connection is read-only. Queries leading to data modification are not allowed</p></li><li><p>@Transactional注解放在类上</p><ol><li><p>生效原则</p><p>如果一个类中每一个方法上都使用了 @Transactional 注解，那么就可以将 @Transactional 注解提取到类上。反过来说：@Transactional 注解在类级别标记，会影响到类中的每一个方法。同时，类级别标记的 @Transactional 注解中设置的事务属性也会延续影响到方法执行时的事务属性。除非在方法上又设置了 @Transactional 注解。</p><p>对一个方法来说，离它最近的 @Transactional 注解中的事务属性设置生效。</p></li><li><p>用法举例</p><p>在类级别@Transactional注解中设置只读，这样类中所有的查询方法都不需要设置@Transactional注解了。因为对查询操作来说，其他属性通常不需要设置，所以使用公共设置即可。</p><p>然后在这个基础上，对增删改方法设置@Transactional注解 readOnly 属性为 false。</p></li></ol><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">EmpService</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 为了便于核对数据库操作结果，不要修改同一条记录</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">updateTwice</span><span class="params">(……)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// readOnly = true把当前事务设置为只读</span></span><br><span class="line">    <span class="comment">// @Transactional(readOnly = true)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getEmpName</span><span class="params">(Integer empId)</span> &#123;</span><br><span class="line">    ……</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h4 id="3-4-事务属性：超时时间"><a href="#3-4-事务属性：超时时间" class="headerlink" title="3.4 事务属性：超时时间"></a>3.4 事务属性：超时时间</h4><ol><li><p>需求</p><p>事务在执行过程中，有可能因为遇到某些问题，导致程序卡住，从而长时间占用数据库资源。而长时间占用资源，大概率是因为程序运行出现了问题（可能是Java程序或MySQL数据库或网络连接等等）。</p><p>此时这个很可能出问题的程序应该被回滚，撤销它已做的操作，事务结束，把资源让出来，让其他正常程序可以执行。</p><p>概括来说就是一句话：超时回滚，释放资源。</p></li><li><p>设置超时时间</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//休眠4秒,等待方法超时!</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">4000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>测试超时效果</p><p>执行抛出事务超时异常</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">org.springframework.transaction.TransactionTimedOutException: Transaction timed out: deadline was Wed May <span class="number">24</span> 09:<span class="number">10</span>:<span class="number">43</span> IRKT <span class="number">2023</span></span><br><span class="line"></span><br><span class="line">  at org.springframework.transaction.support.ResourceHolderSupport.checkTransactionTimeout(ResourceHolderSupport.java:<span class="number">155</span>)</span><br><span class="line">  at org.springframework.transaction.support.ResourceHolderSupport.getTimeToLiveInMillis(ResourceHolderSupport.java:<span class="number">144</span>)</span><br><span class="line">  at org.springframework.transaction.support.ResourceHolderSupport.getTimeToLiveInSeconds(ResourceHolderSupport.java:<span class="number">128</span>)</span><br><span class="line">  at org.springframework.jdbc.datasource.DataSourceUtils.applyTimeout(DataSourceUtils.java:<span class="number">341</span>)</span><br><span class="line">  at org.springframework.jdbc.core.JdbcTemplate.applyStatementSettings(JdbcTemplate.java:<span class="number">1467</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-5-事务属性：事务异常"><a href="#3-5-事务属性：事务异常" class="headerlink" title="3.5 事务属性：事务异常"></a>3.5 事务属性：事务异常</h4><ol><li><p>默认情况</p><p>默认只针对运行时异常回滚，编译期异常不回滚。情景模拟代码如下：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! </span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置回滚异常</p><p>rollbackFor属性：指定哪些异常类才会回滚,默认是 RuntimeException and Error 异常方可回滚!</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment"> * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment"> * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">    studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内! </span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">    studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置不回滚的异常</p><p>在默认设置和已有设置的基础上，再指定一个异常类型，碰到它不回滚。</p><p>noRollbackFor属性：指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,timeout = 3,rollbackFor = Exception.class,noRollbackFor = FileNotFoundException.class)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内!</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-6-事务属性：事务隔离级别"><a href="#3-6-事务属性：事务隔离级别" class="headerlink" title="3.6 事务属性：事务隔离级别"></a>3.6 事务属性：事务隔离级别</h4><ol><li><p>事务隔离级别回滚</p><p>数据库事务的隔离级别是指在多个事务并发执行时，数据库系统为了保证数据一致性所遵循的规定。常见的隔离级别包括：</p><ol><li>读未提交（Read Uncommitted）：事务可以读取未被提交的数据，容易产生脏读、不可重复读和幻读等问题。实现简单但不太安全，一般不用。</li><li>读已提交（Read Committed）：事务只能读取已经提交的数据，可以避免脏读问题，但可能引发不可重复读和幻读。</li><li>可重复读（Repeatable Read）：在一个事务中，相同的查询将返回相同的结果集，不管其他事务对数据做了什么修改。可以避免脏读和不可重复读，但仍有幻读的问题。</li><li>串行化（Serializable）：最高的隔离级别，完全禁止了并发，只允许一个事务执行完毕之后才能执行另一个事务。可以避免以上所有问题，但效率较低，不适用于高并发场景。<br>不同的隔离级别适用于不同的场景，需要根据实际业务需求进行选择和调整。</li></ol></li><li><p>事务隔离级别设置</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wzb.service;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.wzb.dao.StudentDao;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Isolation;</span><br><span class="line"><span class="keyword">import</span> org.springframework.transaction.annotation.Transactional;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * projectName: com.wzb.service</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment">     * isolation = 设置事务的隔离级别,mysql默认是repeatable read!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,</span></span><br><span class="line"><span class="meta">                   timeout = 3,</span></span><br><span class="line"><span class="meta">                   rollbackFor = Exception.class,</span></span><br><span class="line"><span class="meta">                   noRollbackFor = FileNotFoundException.class,</span></span><br><span class="line"><span class="meta">                   isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内!</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li></ol><h4 id="3-7-事务属性：事务传播行为"><a href="#3-7-事务属性：事务传播行为" class="headerlink" title="3.7 事务属性：事务传播行为"></a>3.7 事务属性：事务传播行为</h4><ol><li><p>事务传播行为要研究的问题</p><p><img src="http://heavy_code_industry.gitee.io/code_heavy_industry/assets/img/img012.faac2cb7.png"></p><p>举例代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MethodA</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    MethodB();</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在被调用的子方法中设置传播行为，代表如何处理调用的事务！ 是加入，还是新事务等！</span></span><br><span class="line"><span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">MethodB</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>propagation属性</p><p>@Transactional 注解通过 propagation 属性设置事务的传播行为。它的默认值是：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Propagation <span class="title function_">propagation</span><span class="params">()</span> <span class="keyword">default</span> Propagation.REQUIRED;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>propagation 属性的可选值由 org.springframework.transaction.annotation.Propagation 枚举类提供：</p><table><thead><tr><th>名称</th><th>含义</th></tr></thead><tbody><tr><td>REQUIRED &#xA;默认值</td><td>当前方法必须工作在事务中 &#xA;如果当前线程上有已经开启的事务可用，那么就在这个事务中运行 &#xA;如果当前线程上没有已经开启的事务，那么就自己开启新事务，在新事务中运行 &#xA;所以当前方法有可能和其他方法共用事务 &#xA;在共用事务的情况下：当前方法会因为其他方法回滚而受连累</td></tr><tr><td>REQUIRES_NEW</td><td>当前方法必须工作在事务中 &#xA;不管当前线程上是否有已经开启的事务，都要开启新事务 &#xA;在新事务中运行 &#xA;不会和其他方法共用事务，避免被其他方法连累</td></tr></tbody></table></li><li><p>测试</p><ol><li><p>声明两个业务方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * timeout设置事务超时时间,单位秒! 默认: -1 永不超时,不限制事务时间!</span></span><br><span class="line"><span class="comment">     * rollbackFor = 指定哪些异常才会回滚,默认是 RuntimeException and Error 异常方可回滚!</span></span><br><span class="line"><span class="comment">     * noRollbackFor = 指定哪些异常不会回滚, 默认没有指定,如果指定,应该在rollbackFor的范围内!</span></span><br><span class="line"><span class="comment">     * isolation = 设置事务的隔离级别,mysql默认是repeatable read!</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(readOnly = false,</span></span><br><span class="line"><span class="meta">                   timeout = 3,</span></span><br><span class="line"><span class="meta">                   rollbackFor = Exception.class,</span></span><br><span class="line"><span class="meta">                   noRollbackFor = FileNotFoundException.class,</span></span><br><span class="line"><span class="meta">                   isolation = Isolation.REPEATABLE_READ)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//主动抛出一个检查异常,测试! 发现不会回滚,因为不在rollbackFor的默认范围内!</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;xxxx&quot;</span>);</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 声明两个独立修改数据库的事务业务方法</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeAge</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">99</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRED)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeName</span><span class="params">()</span>&#123;</span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test2&quot;</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>声明一个整合业务方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TopService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">topService</span><span class="params">()</span>&#123;</span><br><span class="line">        studentService.changeAge();</span><br><span class="line">        studentService.changeName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>添加传播行为测试</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(classes = AppConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TopService topService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        topService.topService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>在同一个类中，对于@Transactional注解的方法调用，事务传播行为不会生效。这是因为Spring框架中使用代理模式实现了事务机制，在同一个类中的方法调用并不经过代理，而是通过对象的方法调用，因此@Transactional注解的设置不会被代理捕获，也就不会产生任何事务传播行为的效果。</p></li></ol></li><li><p>其他传播行为值（了解）</p><ol><li>Propagation.REQUIRED：如果当前存在事务，则加入当前事务，否则创建一个新事务。</li><li>Propagation.REQUIRES_NEW：创建一个新事务，并在新事务中执行。如果当前存在事务，则挂起当前事务，即使新事务抛出异常，也不会影响当前事务。</li><li>Propagation.NESTED：如果当前存在事务，则在该事务中嵌套一个新事务，如果没有事务，则与Propagation.REQUIRED一样。</li><li>Propagation.SUPPORTS：如果当前存在事务，则加入该事务，否则以非事务方式执行。</li><li>Propagation.NOT_SUPPORTED：以非事务方式执行，如果当前存在事务，挂起该事务。</li><li>Propagation.MANDATORY：必须在一个已有的事务中执行，否则抛出异常。</li><li>Propagation.NEVER：必须在没有事务的情况下执行，否则抛出异常。</li></ol></li></ol><h3 id="4-基于XML的声明式事务"><a href="#4-基于XML的声明式事务" class="headerlink" title="4. 基于XML的声明式事务"></a>4. 基于XML的声明式事务</h3><ol><li><p>准备项目</p><p>将上一个基于注解的 module 中的代码转移到新 module。去掉 @Transactional 注解。</p><p>业务代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentDao studentDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">changeInfo</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">        studentDao.updateAgeById(<span class="number">100</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//int i = 1/0;</span></span><br><span class="line">        studentDao.updateNameById(<span class="string">&quot;test1&quot;</span>,<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>修改Spring配置文件</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:tx</span>=<span class="string">&quot;http://www.springframework.org/schema/tx&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:aop</span>=<span class="string">&quot;http://www.springframework.org/schema/aop&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 扫描包 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.wzb&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 导入外部属性文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:jdbc.properties&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置数据源 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;druidDataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;wzb.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置 JdbcTemplate --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;jdbcTemplate&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.core.JdbcTemplate&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 装配数据源 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 配置事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;transactionManager&quot;</span> <span class="attr">class</span>=<span class="string">&quot;org.springframework.jdbc.datasource.DataSourceTransactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 事务管理器的bean只需要装配数据源，其他属性保持默认值即可 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;druidDataSource&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- tx:advice标签：配置事务通知 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- id属性：给事务通知标签设置唯一标识，便于引用 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- transaction-manager属性：关联事务管理器 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">transaction-manager</span>=<span class="string">&quot;transactionManager&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- tx:method标签：配置具体的事务方法 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- name属性：指定方法名，可以使用星号代表多个字符 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;get*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;query*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;find*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;true&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- read-only属性：设置只读属性 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- rollback-for属性：设置回滚的异常 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- no-rollback-for属性：设置不回滚的异常 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- isolation属性：设置事务的隔离级别 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- timeout属性：设置事务的超时属性 --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- propagation属性：设置事务的传播行为 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;save*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;update*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;delete*&quot;</span> <span class="attr">read-only</span>=<span class="string">&quot;false&quot;</span> <span class="attr">rollback-for</span>=<span class="string">&quot;java.lang.Exception&quot;</span> <span class="attr">propagation</span>=<span class="string">&quot;REQUIRES_NEW&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 兜个底--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">&quot;*&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 配置切入点表达式，将事务功能定位到具体方法上 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">&quot;txPoincut&quot;</span> <span class="attr">expression</span>=<span class="string">&quot;execution(* *..*Service.*(..))&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 将事务通知和切入点表达式关联起来 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">&quot;txAdvice&quot;</span> <span class="attr">pointcut-ref</span>=<span class="string">&quot;txPoincut&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span>   </span><br></pre></td></tr></table></figure></li><li><p>测试类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringJUnitConfig(locations = &quot;classpath:application.xml&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TxTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StudentService studentService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">testTx</span><span class="params">()</span> <span class="keyword">throws</span> FileNotFoundException &#123;</span><br><span class="line">       studentService.changeInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>注意事项</p><p>即使需要事务功能的目标方法已经被切入点表达式涵盖到了，但是如果没有给它配置事务属性，那么这个方法就还是没有事务。所以事务属性必须配置。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> java开发 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>利用Hexo搭建个人博客</title>
      <link href="/2024/01/30/%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/01/30/%E5%88%A9%E7%94%A8Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="1-环境及工具准备"><a href="#1-环境及工具准备" class="headerlink" title="1.环境及工具准备"></a>1.环境及工具准备</h2><p>需要安装git和nodejs</p><p>安装完成后打开cmd控制台，输入命令<code>npm install hexo-cli -g</code>，安装Hexo</p><h2 id="2-仓库搭建"><a href="#2-仓库搭建" class="headerlink" title="2.仓库搭建"></a>2.仓库搭建</h2><p>进入github网站后，点击创建仓库<code>create repository</code></p><p><img src="1.png"></p><p>仓库名字最好是用户名+.github.io,设置为公开仓库，公选设置生成readme文件</p><p><img src="2.png"></p><h2 id="3-配置ssh-key"><a href="#3-配置ssh-key" class="headerlink" title="3.配置ssh key"></a>3.配置ssh key</h2><p>回到桌面右击鼠标选择G0it Bash Here</p><p>在命令行中输入：<code>ssh-keygen -t rsa -C &quot;邮箱地址&quot;</code></p><p>后面提示一直按enter回车键就行</p><p>之后进入本地磁盘C:\Users\用户名字\ .ssh</p><p>打开.pub文件，将里面的内容复制</p><p>之后回到github网站页面，点击右上角头像，选择setting，之后再点击ssh and gpg keys,然后再new ssh key</p><p><img src="3.png"></p><p>之后标题任意，把复制的ssh key粘贴在key填写框中</p><p><img src="5.png"></p><p>然后点击创建add ssh key</p><p>回到git命令窗口，输入<code>ssh -T git@github.com</code>，出现下方提示就成功了</p><p><img src="6.png"></p><h2 id="4-本地部署"><a href="#4-本地部署" class="headerlink" title="4.本地部署"></a>4.本地部署</h2><p>先在本地磁盘上创建一个文件夹，用于存放博客数据，这里我选择创建的是D:\BlogkFile目录</p><p>然后在此目录下右击鼠标选择git bash here</p><p>在命令窗口输入：<code>hexo init</code> 进行初始化</p><p>​   <code>npx hexo instal</code>l 安装</p><p>​   <code>npx hexo g </code>生成</p><p>​                               <code>npx hexo s</code> 本地部署</p><p>最后命令窗口会有一个链接，打开就可以进入本地部署的hexo了</p><p><img src="7.png"></p><p><img src="8.png"></p><p><strong>ctrl+c 停止本地服务器</strong></p><h2 id="5-上线博客"><a href="#5-上线博客" class="headerlink" title="5.上线博客"></a>5.上线博客</h2><p>打开文件夹中的config文件</p><p><img src="9.png"></p><p>复制这段文字：</p><p>type: git<br>repository:<br>branch: main</p><p>将它粘贴在config文件下面，将原来底部的type：‘ ’替换掉</p><p><img src="10.png"></p><p>之后回到github网站，回到自己的仓库，点击code复制git链接</p><p><img src="11.png"></p><p>将链接粘贴到config文件中的repository：旁边</p><p><img src="12.png"></p><p>保存退出，然后在本地博客文件夹中git bash here，输入命令<code>npx hexo g</code>，<code>npx hexo g</code>上传</p><p><strong>$ npx hexo d</strong><br><strong>INFO Validating config</strong><br><strong>ERROR Deployer not found: git</strong><br><strong>如果出现这个问题，在bash界面输入npm install hexo-deployer-git –save后再输入npx hexo d即可解决</strong></p><p>注意第一次使用要填写git邮箱与用户名字</p><p>然后结束后会弹窗，登入即可</p><h2 id="网站资料"><a href="#网站资料" class="headerlink" title="网站资料"></a>网站资料</h2><p>我们的博客标题还是默认的hexo，整个页面是初始默认的，接下来我们对其进行修改</p><p>用记事本打开我们blog文件夹中的_config.yml文件</p><p>将#Site下面按自己的需求填上</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">## Site</span><br><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">keywords: 关键词</span><br><span class="line">author: 站主</span><br><span class="line">language: 语言（可以填写zh-CN）</span><br><span class="line">timezone: 时区（可以填写Asia/Shanghai）</span><br></pre></td></tr></table></figure><p>然后保存</p><h2 id="如何上传文章"><a href="#如何上传文章" class="headerlink" title="如何上传文章"></a>如何上传文章</h2><p>我们在Blog文件夹中打开git bash,输入下方代码就可以生成新的文章md文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo new 文章标题</span><br></pre></td></tr></table></figure><p>文章是.md格式，在我们的Blog文件夹中的source&#x2F;_posts中</p><p>推荐用Typora软件来编辑.md格式的文件</p><p>然后我们用Typora软件打开该.md文件就可以开始写文章了</p><p>写好以后，我们还是一样打开git bash生成、上传</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><hr><p>至此，我们就成功搭建好基本的博客了，剩下的就是对博客的一些优化和美化了。</p><p>推荐主题：<a href="https://butterfly.js.org/posts/21cfbf15/">Butterfly</a>，<a href="http://docs.anheyu.com/">anzhiyu</a></p><h2 id="相关问题解决"><a href="#相关问题解决" class="headerlink" title="相关问题解决"></a>相关问题解决</h2><h3 id="网络问题"><a href="#网络问题" class="headerlink" title="网络问题"></a>网络问题</h3><p>这个错误 <code>fatal: unable to access &#39;https://github.com/mingea/mingea.github.io.git/&#39;: OpenSSL SSL_read: Connection was reset, errno 10054</code> 是一个典型的 <strong>网络连接问题</strong>，通常是 GitHub 连接被重置导致的。</p><p><strong>步骤：</strong></p><ol><li><p><strong>生成 SSH 密钥</strong>（如果你还没有）：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><br></pre></td></tr></table></figure><p>直接按回车使用默认路径和空密码。</p></li><li><p><strong>将公钥添加到 GitHub</strong>：</p><ul><li>复制公钥内容：<code>cat ~/.ssh/id_rsa.pub</code></li><li>登录 GitHub → Settings → SSH and GPG keys → New SSH key</li><li>粘贴公钥内容</li></ul></li><li><p><strong>修改部署配置</strong>：<br>将 <code>_config.yml</code> 中的 repository地址改为 SSH 格式：</p><p>yaml</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: git@github.com:mingea/mingea.github.io.git</span><br><span class="line">  branch: main</span><br></pre></td></tr></table></figure></li><li><p><strong>测试 SSH 连接</strong>：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><p>如果显示 “You’ve successfully authenticated”，说明配置成功。</p></li><li><p><strong>重新部署</strong>：</p><p>bash</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx hexo clean &amp;&amp; npx hexo g &amp;&amp; npx hexo d</span><br></pre></td></tr></table></figure></li></ol><h3 id="图片加载问题"><a href="#图片加载问题" class="headerlink" title="图片加载问题"></a>图片加载问题</h3><ul><li>进入你博客的根目录，然后下面顺序找到<code>index.js</code>:<br><code>node_modules</code> –&gt; <code>hexo-asset-image</code> –&gt; <code>index.js</code></li><li>用<a href="https://zhida.zhihu.com/search?content_id=208599834&content_type=Article&match_order=1&q=VS+Code&zd_token=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJ6aGlkYV9zZXJ2ZXIiLCJleHAiOjE3NTk2MzAxMDIsInEiOiJWUyBDb2RlIiwiemhpZGFfc291cmNlIjoiZW50aXR5IiwiY29udGVudF9pZCI6MjA4NTk5ODM0LCJjb250ZW50X3R5cGUiOiJBcnRpY2xlIiwibWF0Y2hfb3JkZXIiOjEsInpkX3Rva2VuIjpudWxsfQ.qFI2a32pQBViRBwWoK2sPR_ButdW9O7vrFdS459m-GM&zhida_source=entity">VS Code</a> 或者 记事本打开 <code>index.js</code></li><li>在第 58 行，可以找到这么一行代码：</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, config.<span class="property">root</span> + link + src);</span><br></pre></td></tr></table></figure><ul><li>把这一行代码改成下面这样</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">$(<span class="variable language_">this</span>).<span class="title function_">attr</span>(<span class="string">&#x27;src&#x27;</span>, src);</span><br></pre></td></tr></table></figure><ul><li>保存文件</li></ul><h4 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h4><ul><li>进入博客的根目录</li><li><code>node_modules</code> –&gt; <code>hexo-asset-image</code> –&gt; 打开 <code>README.md</code>, 里面写了用法。我截了个图：</li></ul><p><img src="https://pic3.zhimg.com/v2-743a77f20e7c4ed5e7dcf3aec2383672_1440w.png" alt="img"></p><p>Usage of hexo-asset-image</p><p><strong>注意</strong></p><ul><li>要先把 <code>_config.yml</code>中的 <code>post_asset_folder: false</code> 改成 <code>post_asset_folder: true</code> (默认是false，如果你没有修改过，那请去修改)</li><li>圆括号里面只要写 图片名.后缀 就可以了，不要多加任何的东西。</li></ul><p>最后，<code>hexo clean</code> <code>hexo g</code> <code>hexo s</code> 三部曲，然后进入浏览器打开<code>localhost:4000</code> 就可以看到你想要的图片.</p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 标签1 </tag>
            
            <tag> 标签2 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
